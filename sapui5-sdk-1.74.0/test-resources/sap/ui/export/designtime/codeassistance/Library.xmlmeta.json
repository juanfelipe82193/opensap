{"enums":{"sap.ui.export.EdmType":{"Enumeration":{"Deprecated":false,"Experimental":false,"description":"Property of type Enumeration.","helpDescription":"Property of type Enumeration.","DeprecatedInfo":{"isDeprecated":false},"value":"Enumeration"},"Number":{"Deprecated":false,"Experimental":false,"description":"Property of type Number.","helpDescription":"Property of type Number.","DeprecatedInfo":{"isDeprecated":false},"value":"Number"},"BigNumber":{"Deprecated":false,"Experimental":false,"description":"Property of type bignumber.","helpDescription":"Property of type bignumber.","DeprecatedInfo":{"isDeprecated":false},"value":"BigNumber"},"Currency":{"Deprecated":false,"Experimental":false,"description":"Property of type Currency","helpDescription":"Property of type Currency","DeprecatedInfo":{"isDeprecated":false},"value":"Currency"},"Time":{"Deprecated":false,"Experimental":false,"description":"Property of type Time.","helpDescription":"Property of type Time.","DeprecatedInfo":{"isDeprecated":false},"value":"Time"},"String":{"Deprecated":false,"Experimental":false,"description":"Property of type string.","helpDescription":"Property of type string.","DeprecatedInfo":{"isDeprecated":false},"value":"String"},"Boolean":{"Deprecated":false,"Experimental":false,"description":"Property of type boolean.","helpDescription":"Property of type boolean.","DeprecatedInfo":{"isDeprecated":false},"value":"Boolean"},"Date":{"Deprecated":false,"Experimental":false,"description":"Property of type Date.","helpDescription":"Property of type Date.","DeprecatedInfo":{"isDeprecated":false},"value":"Date"},"DateTime":{"Deprecated":false,"Experimental":false,"description":"Property of type DateTime.","helpDescription":"Property of type DateTime.","DeprecatedInfo":{"isDeprecated":false},"value":"DateTime"}}},"metadatas":{"sap":{"filetype":"library","types":["sap.ui"],"name":"sap","version":"1.74.0"},"sap.ui.export":{"filetype":"library","types":["sap.ui.export.ExportUtils","sap.ui.export.EdmType"],"module":"sap/ui/export/library","name":"sap.ui.export","description":"UI5 library: sap.ui.export - document export utilities","helpDescription":"UI5 library: sap.ui.export - document export utilities","version":"1.74.0"},"sap.ui.export.Spreadsheet":{"extend":"sap.ui.base.EventProvider","associations":{},"filetype":"class","Deprecated":false,"Experimental":false,"module":"sap/ui/export/Spreadsheet","constructorDescription":"Creates a new spreadsheet export object. Use this object to build and download a spreadsheet file in Office Open XML Spreadsheet format from tabular data.\nThis functionality is normally used together with UI5 tables.\n\n\n<h3>Overview<\/h3>\nThe class builds a spreadsheet in an Office Open XML Spreadsheet format using tabular data from a specified data source.\nData is retrieved and the document is built asynchronously in a worker thread of the browser.\nThe status of the process is visually presented to the user in a progress dialog that can be suppressed.\nThe user can cancel the process with the Cancel button of the dialog.\n\n\nThis class provides a low level API for spreadsheet export. The {@link sap.ui.comp.smarttable.SmartTable} control implements it internally and provides the export\nfunctionality out of the box. For special cases, please refer to details below.\n\n\nOptional features:\n<ul>\n  <li>Suppress the progress dialog.<\/li>\n  <li>Suppress worker and run the document generation process in a main thread.<\/li>\n  <li>Configure the exported file name.<\/li>\n<\/ul>\n\n\n<h3>Export settings object<\/h3>\nExport settings should be provided in the constructor as an <code>mSettings<\/code> property map with the following fields:\n<ul>\n  <li><code>workbook<\/code> - Spreadsheet properties object\n  <ul>\n      <li><code>workbook.columns<\/code> - Array of column configurations. Each column configuration is an object with the following fields:\n      <ul>\n        <li><code>label<\/code> (string) - Column header text<\/li>\n        <li><code>property<\/code> (string) - Field name or Array of field names in the data source feed<\/li>\n        <li><code>type<\/code> (string) - Optional data type of the field. See {@link sap.ui.export.EdmType} for the list of supported types.\n            If this property is omitted, the property is processed as a string field.<\/li>\n        <li><code>width<\/code> (number) - Optional width of the column in characters. There is no 1:1 correspondence between\n          character widths in the exported spreadsheet and CSS units.The width of one character\n          is approximately 0.5em in CSS units, depending on the fonts that are\n          used in the table and in the resulting spreadsheet. The default value is 10 characters.<\/li>\n        <li><code>textAlign<\/code> (string) - Horizontal alignment of cell contents. The following values of the CSS <code>text-align<\/code>\n          property are accepted: <code>[left, right, center, begin, end]<\/code>. If not specified, the columns are\n          horizontally aligned based on the property type.<\/li>\n        <li><code>scale<\/code> (number) - Number of digits after decimal point for numeric values<\/li>\n        <li><code>delimiter<\/code> (boolean) - Set to <code>true<\/code> to display thousands separators in numeric values.\n          The default value is <code>false<\/code>.<\/li>\n        <li><code>unit<\/code> (string) - Text to display as the unit of measurement or currency next to the numeric value.\n          It is treated as a string and has no influence on the value itself. For example, a value of 150 with the unit \"%\" is still 150\n          and not 1.5, as a user may expect.<\/li>\n        <li><code>unitProperty<\/code> (string) - Name of the data source field that contains the unit/currency text<\/li>\n        <li><code>displayUnit<\/code> (boolean) - The property applies to currency values only and defines if the currency is shown in the column.\n          The default value is <code>true<\/code>.<\/li>\n        <li><code>trueValue<\/code> (string) - Textual representation of a boolean type that has the value <code>true<\/code><\/li>\n        <li><code>falseValue<\/code> (string) - Textual representation of a boolean type that has the value <code>false<\/code><\/li>\n        <li><code>template<\/code> (string) - Formatting template that supports indexed placeholders within curly brackets<\/li>\n        <li><code>inputFormat<\/code> (string) - Formatting template for string formatted dates<\/li>\n        <li><code>valueMap<\/code> (string) - Mapping object or Map containing the values that should be mapped to a particular key<\/li>\n        <li><code>wrap<\/code> (boolean) - Indicates if wrapping is enabled for this particular column<\/li>\n     <\/ul>\n     <\/li>\n     <li><code>workbook.context<\/code> - Context object that will be applied to the generated file. It may contain the following fields:<\/li>\n     <ul>\n         <li><code>application<\/code> (string) - The application that creates the XLSX document (default: \"SAP UI5\")<\/li>\n         <li><code>version<\/code> (string) - Application version that creates the XLSX document (default: \"1.74.0\")<\/li>\n         <li><code>title<\/code> (string) - Title of the XLSX document (NOT the filename)<\/li>\n         <li><code>modifiedBy<\/code> (string) - User context for the XLSX document<\/li>\n         <li><code>sheetName<\/code> (string) - The label of the data sheet<\/li>\n         <li><code>metaSheetName<\/code> (string) - The label of the metadata sheet. The sheet will not be shown unless metadata entries are provided<\/li>\n         <li><code>metainfo<\/code> (Array) - An Array of metadata groups. Each group has a name property and an items Array which contains key/value pairs<\/li>\n     <\/ul>\n     <li><code>workbook.hierarchyLevel<\/code> - Name of the property that contains the hierarchy level information of each line item<\/li>\n  <\/ul>\n  <li><code>dataSource<\/code> - Source of spreadsheet data. It can be a JSON array with row data,\n     an URL or an OData properties object with the following fields:\n     <ul>\n        <li><code>type<\/code> (string) - Type of the data source. Currently, only OData is supported and the value have to be set to <code>\"odata\"<\/code>.<\/li>\n        <li><code>dataUrl<\/code> (string) - URL to table data on the server, including all select, filter, and search query parameters<\/li>\n        <li><code>serviceUrl<\/code> (string) - URL to the OData service. The parameter is required for OData batch requests.<\/li>\n        <li><code>count<\/code> (number) - Count of available records on the server<\/li>\n        <li><code>useBatch<\/code> (boolean) - Set to <code>true<\/code> if OData batch requests are used to fetch the spreadsheet data.\n           In this case, <code>serviceUrl<\/code> and <code>headers<\/code> have to be specified, too.<\/li>\n        <li><code>headers<\/code> (object) - Map of HTTP request header properties. They should correspond to the HTTP request headers that are\n           used to obtain table data for display in the browser.<\/li>\n        <li><code>sizeLimit<\/code> (number) - Maximal allowed number of records that can be obtained from the service in a single request<\/li>\n     <\/ul>\n  <\/li>\n  <li><code>count<\/code> (number) - The maximal number of records to export. If not specified, all data from the data source is fetched.<\/li>\n  <li><code>worker<\/code> (boolean) - Run export process in a worker thread. Set to <code>false<\/code> to disable worker and run export\n       in a main thread. This is needed, for example, if a mock server is used to provide spreadsheet data.<br>\n       <b>Note:<\/b> In case of a strict content security policy, it is not always possible to create an export worker.\n       In this case, export runs in a main thread disregarding the <code>worker<\/code> value.<\/li>\n  <li><code>fileName<\/code> (string) - Optional file name for the exported file. If not specified, the spreadsheet is exported as <code>export.xlsx<\/code>.<\/li>\n  <li><code>showProgress<\/code> (boolean) - Set to <code>false<\/code> to suppress the progress dialog<\/li>\n<\/ul>\n\n\n<h3>Usage<\/h3>\nTo start export, create a new <code>sap.ui.export.Spreadsheet<\/code> object and call the <code>build<\/code> method.\nColumn configuration, data source, and export settings must be provided in the constructor.\nThe <code>build<\/code> method opens a progress dialog and starts an asynchronous export process.\nThe export process fetches data rows from the data source, builds a spreadsheet in-browser in a worker thread, and finally downloads the document\nto the client.\n\n\nExample:\n<pre>\n  var oSpreadsheet = new sap.ui.export.Spreadsheet(mSettings);\n  oSpreadsheet.build();\n<\/pre>\n\n\nOptionally, you can attach <code>onprogress<\/code> event listeners to be notified about the\nexport progress and follow the completion status of the returned <code>Promise<\/code>.\n\n\nExample:\n<pre>\n  var oSpreadsheet = new sap.ui.export.Spreadsheet(mSettings);\n  oSpreadsheet.onprogress = function(iValue) {\n  \t{@link sap.base.Log#debug Log.debug}(\"Export: %\" + iValue + \" completed\");\n  };\n  oSpreadsheet.build()\n    .then( function() { {@link sap.base.Log#debug Log.debug}(\"Export is finished\"); })\n    .catch( function(sMessage) { {@link sap.base.Log#error Log.error}(\"Export error: \" + sMessage); });\n<\/pre>\n\n\nExample of column configuration:\n<pre>\n  var aColumns = [];\n  aColumns.push({\n  \tlabel: \"Name\",\n  \tproperty: \"name\"\n  });\n  aColumns.push({\n    label: \"Salary\",\n    property: \"salary\",\n    type: \"number\",\n    scale: 2\n  });\n\n  var mSettings = {\n    workbook: {\n      columns: aColumns,\n      context: {\n        application: 'Debug Test Application',\n        version: '1.74.0',\n        title: 'Some random title',\n        modifiedBy: 'John Doe',\n        metaSheetName: 'Custom metadata',\n        metainfo: [\n          {\n            name: 'Grouped Properties',\n            items: [\n              { key: 'administrator', value: 'Foo Bar' },\n              { key: 'user', value: 'John Doe' },\n              { key: 'server', value: 'server.domain.local' }\n            ]\n          },\n          {\n            name: 'Another Group',\n            items: [\n              { key: 'property', value: 'value' },\n              { key: 'some', value: 'text' },\n              { key: 'fu', value: 'bar' }\n            ]\n          }\n        ]\n      },\n      hierarchyLevel: 'level'\n    },\n    dataSource: mDataSource,\n    fileName: \"salary.xlsx\"\n  };\n  var oSpreadsheet = new sap.ui.export.Spreadsheet(mSettings);\n  oSpreadsheet.build();\n<\/pre>\n\n<h3>Limitations<\/h3>\nFor a complete list of limitations, see:\n{@link topic:2c641481649f44de9c1c22c9c3c49d13 Spreadsheet limitations}\n\n\nYou can export only the primitive cell data types that are listed in {@link sap.ui.export.EdmType}.\nIcons, images, check boxes, and complex controls in UI5 table cells are not supported.\n\n\nCustom formatters in data binding are not supported.\n\n\nThe size of an exported table is limited by available browser\nmemory. Export of large data sets can lead to memory overflow\nerrors. Therefore, do not use <code>sap.ui.export.Spreadsheet<\/code>\nwith data tables containing more than 2,000,000 table cells\non desktop computers and more than 100,000 cells on mobile\ndevices. Consider a specialized export solution in such cases.\nFor example, MS Excel® can import spreadsheets from an OData\nservices directly, without any UI.\n\n\nThe export process runs in a worker thread whenever possible.\nHowever, code injection to native XMLHttpRequest events is not\navailable in the worker environment. Therefore, the\n<code>worker<\/code> parameter in export settings should be set\nto <code>false<\/code> if the application uses a mock server to\nfetch table data.\n\n\nFor exporting hierarchy level information, the maximum\nhierarchy depth is 8. This limitation results from the Office\nOpen XML standard and the programs that can open such files.\nThe sap.ui.export.Spreadsheet allows you to export more\nhierarchy levels although they might not be displayed\ncorrectly when opening the generated file if the hierarchy\ndepth exceeds the value of 8.\n\nThe column configuration must contain at least one column to\nexecute the export process. If there is no column configured,\nthe export will be canceled.\n\nIf the export is used within a table, any row that is showing\naggregated data (i.E. sum row) will not be exported.","DeprecatedInfo":{"isDeprecated":false},"aggregations":{},"properties":{},"events":{"beforeSave":{"method":"sap.ui.export.Spreadsheet#event:beforeSave","eventParams":{"oEvent.getSource":"type: sap.ui.base.EventProvider","oEvent":"sap.ui.base.Event","oEvent.getParameters":"type: object"},"name":"beforeSave","description":"The <code>beforeSave<\/code> event is fired just before the generated file is saved to the file system.","fullName":"sap.ui.export.Spreadsheet#beforeSave","type":"fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]"}}}},"!version":"1.20.0"}