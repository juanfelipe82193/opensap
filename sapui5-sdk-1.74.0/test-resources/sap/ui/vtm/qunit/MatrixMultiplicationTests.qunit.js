/* global QUnit*/

sap.ui.define([
    "sap/ui/vtm/MatrixUtilities"
], function(
    matrixUtilities
) {
    "use strict";

    QUnit.test("matrixMultiply13x1Tests", function (assert) {
        var matrixUtilities = sap.ui.vtm.MatrixUtilities;
        var multipliedString;
        var expected = [-1.79000376330778, -1.44282591824361, 1.95655362771664, 0.0632695830721732, -0.280319600388475, 0.22857485209991, -1.94104343463715, 0.0589565653628468, 0.941043434637153, 0.853795766762363, 1.00737167548069, -0.853795766762363, 0];
        var actual = matrixUtilities.multiply([1, 0.956553627716635, 0, 0, 0.22857485209991, 0.291844435172083, 0.941043434637153, 0, -1, -1, 0.146204233237637, 0, 0.491055731890283], [0.339166928706303, -1, 0, -1, -1, 1, -1, 0.0504203969847506, 1, 1, -1, 0, 0]);
        var message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.290921059572567, 0.523809205518947, 0.197035720197966, -1.70783733963923, -1.7582474801495, -1.80296427980203, 0.509887506425094, 0.719084261785766, 0.719084261785766, -1.00440195482429, 0.523809205518947, -0.802964279802034, 0];
        actual = matrixUtilities.multiply([-1, 1, 0, -1, -1, 0.282056685668443, 0, 0.719084261785766, 0, -1, 0, -1, 0], [0, -1, 0, 1, 0.476190794481053, 0.802964279802034, 0.709078940427433, 1, 1, 0.00440195482429208, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.78275453661697, -0.606047398052554, -1.71470502145342, 0.196698377000493, 0.740831749259341, 1.14485645300935, -1, 0.111432794310056, -0.246566947198737, 1.51825095783838, 0.909616713432093, 1.51825095783838, 0];
        actual = matrixUtilities.multiply([-1, 0.217245463383033, -1, 0.948158076008855, 0.196698377000493, 0, 0.753433052801263, -1, 0, 1, 0.518250957838376, 1, -1], [1, 0, 0.931950484836451, 0, 0.695713444936887, 1, 1, 0.412740710383626, 1, 1, 0, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, -2, 2, 1, -1.21604233338313, 1, 0.841052282527579, -0.625009949144446, 0.841052282527579, -0.411712032468855, 0.248498808913139, -0.411712032468855, -1];
        actual = matrixUtilities.multiply([0, 1, 0, -1, 1, 1, 0.158947717472421, 0, -1, 0, 0.343756680536902, 0.755468713005757, 1], [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 0.783957666616867, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.58951620459068, -0.910879970930411, 1.02483603608583, -0.586300473001925, 1.37063617928449, 0.218579258871534, -1.21037517497799, 0.970384533347121, -0.902593955755868, -1.58951620459068, 1.10997829195095, -0.969351167677256, 0];
        actual = matrixUtilities.multiply([0.113624852669251, -1, 1, 1, 0.586300473001925, 0, 0.445632603692651, 0.620858970387307, -1, 0.140218392545459, 1, -1, 0], [-1, 0, 0.251308749081245, 0, 0.784335706282563, 0.218579258871534, -1, 1, 0, 0.589516204590684, 0, 1, 0.935350890241261]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 2, 0.462953101593514, 0.600661749299924, -1, -0.661086778962668, 0.257672193114493, 1.74232780688551, 0.20528090847902, -0.764908714110455, 0.764908714110455, 0.764908714110455, -1];
        actual = matrixUtilities.multiply([-1, 0, 1, 0, 0.399338250700076, -1, -1, 0, 0.742327806885507, 0, 0, 0.764908714110455, 1], [0, 0, 0, -1, -1, 0.537046898406486, -1, 0, 0.84868709782543, -1, 1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.92605044409914, -1, 0, 2.10432440652713, 0.82172603757201, 0, -0.926050444099144, 2, 0, -0.0739495559008557, 1, 0, 0];
        actual = matrixUtilities.multiply([1, 1, 0, 1, 0.17827396242799, 1, -1, -1, 1, 1, -1, 0, 0], [0, 0, -1, 0.926050444099144, 0, 0, 1, -1, 0, 1, 1, 0, 0.26833580912479]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 0.463017437356998, 0.325713448378124, -1, 2, -0.408590779364384, 2, 1, -0.591409220635616, 2.1951019103616, 0.51480820193645, -1.19512907200103, -1];
        actual = matrixUtilities.multiply([0, 0, 0, -1, -1, -1, 0, -1, 1, 0.48519179806355, -1, 0.709910112298052, 1], [-1, 0.463017437356998, 0.325713448378124, 1, -1, -1, -1, -1, 1, 1, 0, 0.408590779364384, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.45785501387802, 3.25118873512893, -1.85788839396922, 1, 0.296649462215905, 0.161491536610523, 0.838591539691478, 0.135241001907383, 0.164619621366286, -1.30264315675136, -1.90849575896687, 1.0444453318873, 1];
        actual = matrixUtilities.multiply([1, 1, -1, 0, 1, 0, 0, 1, 0.161408460308522, -1, 0.155211857126659, 1, 1], [-1, 1, -1, 0.457855013878017, 0.954539272913029, -1, 1, 0.296649462215905, 0.161491536610523, -1, -1, 0.0193799305797461, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.336946952313626, -0.586989823536477, 0, 0.749957128777149, -1.7336824311566, 0, 0.0310273389242633, 0.733682431156599, 0, 1, -0.610423602276229, 0, 0.497978620718435];
        actual = matrixUtilities.multiply([0.0498664314159502, -1, 0, 1, -1, -1, 0, 0.124088076466735, 1, 1, 0, 0.530987769612571, 0.537123392120527], [1, -1, 0, 1, -1, 0, 0.250042871222851, 0, 0, 0, 0.733682431156599, 0, 0.927121454815902]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -0.24412312190271, -0.521306999736143, 0, 0, 0, 0, 0.285841275964012, 0.463197980291768, 0, 0, 0, 0.466386390180439];
        actual = matrixUtilities.multiply([0.0390504612769235, 0, 0.56026929037658, 0, 0, 0, -1, 0.536802019708232, 0.629758090074061, 0, 0, 0, 0.482256538459219], [0, -1, -1, 0, 0.496821857288863, -1, 0, 1, -1, 0, 0.390405645310136, 0, 0.967091896090234]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.81446263557973, 2, -0.400220231805099, 0, -1, -0.705958237535181, -0.666950436619553, -1, -2.09725003414659, 0, -1, -0.958154656886697, -1];
        actual = matrixUtilities.multiply([0, 0.814462635579734, -1, 0.683341941648788, 0, 1, -1, 0.666950436619553, 1, 0.0972469957066919, 0, 1, -1], [1, -1, 0.585757596225365, 0, 0, 0.43029959752704, -1, 0, -1, 0, -1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.3733285457703, 1.91012084433349, -1.91012084433349, 0, 0, 0, -1.53679229856319, 0, 0, -1.12169977469449, 2, -2, 1];
        actual = matrixUtilities.multiply([0, 0.910120844333489, 1, 0, 0, 0, 0, 1, -1, -1, 1, 0, 1], [-1, 0, 0, 0.121699774694489, -1, 1, -1, 1, -1, 0.536792298563194, 1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0537510356254488, 0.00398563966462172, -0.773904459911354, -0.132714354262278, 1.8270120680458, 1, 0.0283138812651457, 0.233678061623908, -1, -0.0283138812651457, -1.76632193837609, -1, 0.120451894673137];
        actual = matrixUtilities.multiply([0.348038074722531, 0.690943580442548, 1, 0, 0.827012068045797, -1, -1, 1, 0, -1, -1, 0, 0.121942534633885], [-1, 0.379956405786777, -1, 0, 0.766321938376092, 1, 0.0283138812651457, 1, 0, 0.156130275761769, -1, -1, 0.987775881769031]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.00601450959501, 1.17725096185564, -2.48254447545975, 1.36085738001604, 1.03748625053833, -0.569416825924729, -0.716575024517521, -0.805439303764604, 1.47803972436097, 0.163779086975278, 0.0285288305114852, 0.163779086975278, 0.723311089781724];
        actual = matrixUtilities.multiply([-1, -1, 1, 0, 0.398631444852162, 0.96804827077689, 0.415773609846725, 0.277410465887473, -1, 0, 0.163779086975278, 0, 1], [-1, 0.703167698673516, 0, 0, 0.351725812699518, 0.482544475459747, 1, 0.174190924118362, 1, 0.993985490404994, 1, -1, 0.723311089781724]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.76882048512504, -0.515355434043033, 0.932593512783103, 1.3866253972964, 1.81052120021103, 0.0674064872168966, 0.336879924910123, -1.20408016964983, 0.0506157614697791, 0.319008952155248, 0.319008952155248, 0.0215032728555283, -0.058518165749739];
        actual = matrixUtilities.multiply([-1, 0.484644565956967, 0, 1, 0.81052120021103, 0, 0.750903415377672, -1, 0.954983585027504, 0.319008952155248, 0, 0, -1], [1, 0, -1, 1, 1, 0.0674064872168966, 0.477008370904721, 1, 0, 0.0659538880297699, -1, 0, 0.058518165749739]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.53173980048473, -1, 0, -0.628409342316225, 1.52055676631655, -1.52055676631655, 0.140934196371675, 0.256423927031655, -0.256423927031655, 0.48370328720439, 0.314626159758599, -0.314626159758599, 0];
        actual = matrixUtilities.multiply([0, -1, 0, -1, 1, 0.479443233683446, 0, 0.438263662363525, 0.181839735331871, 0, 0.938722227205859, 0.62409606744726, -1], [0.53173980048473, 0, 1, 1, -1, 1, 0, 1, -1, 0.775046202715042, -1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, -0.6366278276018, 1, 2, 2, 1, 0, 0.6366278276018, 0, -2, -1.3633721723982, 0];
        actual = matrixUtilities.multiply([-1, 1, -1, 1, 1, 0, 0, 0, 1, -1, -1, 1, 0], [0, 0, -1, 0, 1, 1, 1, 1, 1, 1, 0, 0.6366278276018, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -0.652476961565768, 0.37583144259445, 0, -0.173158157697487, -0.906152296767641, 0, 0.500524956701265, 0.592958655950128, 0, 0.631101173176943, -1, -1];
        actual = matrixUtilities.multiply([0.432103209864396, 0.179993822323156, 0, 0, 0.906152296767641, -1, 0.407041344049872, -1, 1, 1, 0, -1, 1], [-1, -1, 0.987928474782001, 0, 0.80425933087443, -1, 0, 0, -1, 0, 0.173158157697487, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.28246662825461, -0.444803882253462, 0.434762937743874, -0.463690922345822, 0.398055717774856, -0.515046854686522, 0.350648069917526, -0.739744347106891, -0.682929319137398, 1.12565113377089, -1.38972302478018, -0.369363943148077, 0];
        actual = matrixUtilities.multiply([0.480803789794819, 0.801662838459789, 0, 0.536309077654178, -1, 1, 0.350648069917526, 0, 1, 0.125651133770892, 1, 0.482982964479822, 0], [-1, 0, -1, 1, 0.742213276560518, 0.904241911091023, 1, -1, 0, 0, -1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.20661435352228, 2.29080830160106, 1.18636786341032, 0.424267455201721, -0.264466204337993, -1, -0.424267455201721, -2.73553379566201, 0, 0.182050077496625, 1.31561219900308, 0.570907277320934, 0];
        actual = matrixUtilities.multiply([0.813632136589676, -1, 0.692354367902667, 1, 0, -1, -1, 1, -1, 0.429092722679066, -1, 0, 1], [0.861416717461039, 0, 1, 0.424267455201721, 0.735533795662007, -1, 0, -1, -1, 0, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.657025464352897, 0.286824042586144, 0.231415123786505, 0, -0.603631949333303, -0.282341396101909, 1, 0.624637969594746, 1, -0.417000555161853, 1.22826991892805, 1.59504178915601, -0.392031570613399];
        actual = matrixUtilities.multiply([0, 0.12042761972194, 1, 1, 0, -1, 0, 1, 0, 0.417000555161853, 1, 1, 0.392031570613399], [0.567676005218027, -1, -1, -1, 0, 0.220677678576055, 1, 0.624637969594746, 1, -1, 0.603631949333303, 0.503019074677964, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-3, 0, -0.383755997002011, 1, -1.41886572838708, -0.469774516518123, -1.2961365013831, 1.12272922700398, 0.330657134757509, 1, 1.41886572838708, -1.53022548348188, 1];
        actual = matrixUtilities.multiply([0, -1, -1, -1, -1, 1, 1, 0.7038634986169, -1, 1, 1, 1, -1], [1, -1, 0.913981480483888, -1, 0.418865728387081, -1, 1, 1, 0.469774516518123, 1, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 0.89704036719797, 0.489724842593877, 2, 0.637170800304586, 0.487262391246512, 0, 0.319873351752699, -0.319873351752699, 1, 0, 0, 0.214945606167316];
        actual = matrixUtilities.multiply([0.510275157406123, 1, 0, 0.512737608753488, 1, -1, 0.319873351752699, 0, 0, 0, 0, -1, 0.398303455858633], [0, 0.658623505224764, 0, 0, 1, -1, 1, 0.124433191551097, 1, -1, 0, 0, 0.539652877738538]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.731845613444152, 0.611695582797609, -1.78501232424053, -0.731845613444152, -1.38830441720239, 0.21498767575947, 0.231887716907956, -0.388304417202391, -1.78501232424053, -0.268070179628241, -0.611695582797609, -0.21498767575947, 0];
        actual = matrixUtilities.multiply([1, 1, -1, -1, -1, -1, 1, 0, -1, 1, -1, 1, 0], [0.277063531464461, 0, 0, 0.231887716907956, 0, -1, 0.499957896536197, 1, 0, 0, 0.388304417202391, 0.78501232424053, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.689711870481126, 2.68971187048113, -2.68971187048113, -0.29109278241689, 0.473984752855051, 0.29109278241689, 0, 0.897636307355778, 0, 0, 0.897636307355778, 0, -0.996536084449168];
        actual = matrixUtilities.multiply([0, -1, 0.689711870481126, 0.852324631927686, 1, 0.70890721758311, 1, 1, 1, 1, 0, 0, -1], [1, -1, 1, 0, 0.897636307355778, 0, -1, -1, 1, 1, 1, -1, 0.996536084449168]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -1, 1, -1, 1, 0.0980415027429724, 0.831864713612881, -0.831864713612881, -0.2961160886549, -1, 0, 0.7038839113451, 0];
        actual = matrixUtilities.multiply([0, 1, 0, -1, 0, 0.331091441833922, 0.831864713612881, 0, -1, -1, 1, -1, 0], [-1, 0.379885564269445, 0, 1, -1, 0, 0, -1, 1, 0, 0, 0.2961160886549, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.12881273456328, -1, -0.789938549950324, -0.90659552156301, 0.0934044784369899, -0.0934044784369899, 2.71844182243498, 0, -1.96512121100217, -0.21455208548091, 1.78544791451909, 0.179673296483082, 0.23879807965774];
        actual = matrixUtilities.multiply([0, 0.128812734563282, -1, 0.0934044784369899, -1, 0, 1, 0.718441822434981, -1, 0.78544791451909, 0, 1, 0.23879807965774], [0, 0, 0.733601632403956, 1, 1, -1, 1, 0, 0, -1, 1, 0.965121211002172, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.27345390956544, -3, 0, -2.27345390956544, 1, 0, 1.27345390956544, -2, 0, 1, 1, 0, 0];
        actual = matrixUtilities.multiply([1, 1, -1, -1, 1, 1, 1, 0, -1, 0, -1, 0, 0], [0, -1, -1, 0.27345390956544, -1, -1, -1, -1, 0, -1, 1, -1, 0.00337122660287247]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.16380764182048, -0.649501052864156, 0.460908418099786, 1.19951950907685, 0.751738722320524, -0.800480490923152, 0.531468847548342, -0.468531152451658, 2.53146884754834, 2, -1, 0, -0.709991848892529];
        actual = matrixUtilities.multiply([0, -1, -1, 0.475629115698686, -1, 0.276109606621838, 0.531468847548342, 1, -1, 0, -1, -1, 0.709991848892529], [0.230717637217938, 0.493666156424985, 0.649174238857429, 1, 1, 1, -1, 0, 1, -1, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.749191312933895, -0.557831208947036, 0.0613009757647761, 0.560374921914365, -0.0473988102969708, 0.439625078085635, 0, 0.607773732211335, -2, 1.09455393398858, 0.486780201777248, 0.905446066011417, -1];
        actual = matrixUtilities.multiply([0.111243499029075, 0.938699024235224, -1, 0, 0.560374921914365, -1, -1, 1, 1, 1, 0.0945539339885833, -1, -1], [0.300751210330404, 1, 0, 1, 1, 0, 1, 1, -1, 0, 0.607773732211335, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 0.420698167451152, -0.0325407553615704, -0.140636871634348, 0.168635508883917, 0.271539654243523, -0.966470296944711, 1.85095209307145, 1.96647029694471, -0.797120964060128, 0.750460828401887, 0.939148576901829, 0.269263182892121];
        actual = matrixUtilities.multiply([0, 0.879841897580699, -1, 0, 0.130902782609175, 0.140636871634348, 1, 0, 0.966470296944711, 0, 0.142027612841701, 0.797120964060128, 1], [0, 1, 0.0876173470577306, 0, 1, 1, 0, 0.34230274490188, 1, -1, 0.8804741291704, 1, 0.269263182892121]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.98878511553108, 0, -0.39603257570231, 0, 1, 0.950712704076764, 0, -1, -0.950712704076764, 0.0112148844689201, -2, -1.95071270407676, 0.330256022201039];
        actual = matrixUtilities.multiply([1, 1, 0, -1, 0, -1, 1, 0, 1, 1, 1, 1, 1], [-1, 1, 0.554680128374454, -1, 0, 0.0492872959232364, 0.01121488446892, -1, -1, 1, -1, -1, 0.330256022201039]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.932973250249854, 1.06702674975015, -0.932973250249854, 0, 0, 0, 0.277371123096613, 0.277371123096613, 0.277371123096613, -0.350964524015302, 0.350964524015302, -0.350964524015302, 0];
        actual = matrixUtilities.multiply([0.0670267497501461, 1, 1, 0, -1, 0, 0.277371123096613, 0.994900526476512, 0, 0, 0.152736309521243, 0.350964524015302, 0], [0.673474603180529, 0.49701331439289, -1, 1, 1, 1, 0, 0, 0, -1, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.263871623326033, -1.87069069047331, -1.95362721102015, -0.217498834346188, -0.297694783796414, 0, -0.782501165653812, 0.126313475019444, 1, 0.948120878989237, 0.916115336815567, -0.93375955565542, -1];
        actual = matrixUtilities.multiply([-1, 0.953627211020154, -1, 0, 0, -1, 0, -1, 1, 1, 0.93375955565542, 0.0660294266725096, -1], [1, 1, 1, 0, 0.736429786186865, 0, 1, 0.17138130877697, -1, 0.217498834346188, 0.297694783796414, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.206691419807052, 0.547404578210509, 0.23784765332837, 0.130461657424811, 0.441684819497953, 0.441684819497953, -1, 0.760583528206024, 1, 1, -0.760583528206024, -1, -0.154778462441069];
        actual = matrixUtilities.multiply([0, -1, 0.392626115769439, 0, 0, 0.441684819497953, 1, 0.881986467578442, 0, -1, 1, 0, 0.154778462441069], [0.58613042746956, 1, -1, -1, 0.760583528206024, 1, 0, 0, 0, 0.29537274469406, 1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.515981908196575, -1, 0.927205289214479, -1.76513620361925, -2, 0, 0.999681564853172, 0.944801355220751, 0.205104888429293, 1.59693610838228, 1.22713008533564, 0.375002063710456, 0];
        actual = matrixUtilities.multiply([1, -1, 1, 0, -1, -1, 0.221207634183209, 0.972959223656431, 0.193049765747529, 0.404443404359949, 0.631573489695589, 1, 0], [0, 0, -1, 0.281118111815824, -1, 0.927205289214479, 0.765136203619249, 1, 0, 1, 1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.323822354355564, 0.890948792403074, 0.890948792403074, 0.241058912240462, 0, -2, 0.0761918338655345, 0.630439338959132, 0, -0.167246492240311, 0.529909215648616, 0.303952470097669, -1];
        actual = matrixUtilities.multiply([1, 0, 0.890948792403074, -1, 0, -1, 0, 0.801576038264472, 0, 0.280271493028976, 1, 0.0236809770686929, -1], [0, -1, 1, -1, -1, 1, 0.0950525342929422, 0.786499731608899, 0, 0.758941087759538, 1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -1, -1.53122839635761, 0, -1, -0.85875652444491, -0.179627956440499, 0.179627956440499, 0.179627956440499, -1.31116013010552, 1.68883986989448, 1.54759639433939, -0.531228396357609];
        actual = matrixUtilities.multiply([0, -1, 0, 0, -1, 1, 0.179627956440499, 0, 0, 1, 0.688839869894478, -1, 0.531228396357609], [0, 0, -1, -1, 1, 1, 1, 1, 1, 1, 0, 0.14124347555509, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.742762556179782, 1, -1, 1, -0.95921709246897, -0.689042539656648, -1, 1, -1, -1.45208963959109, 1.43365210962391, -0.688491006583693, 0];
        actual = matrixUtilities.multiply([-1, 0, 0, 0, -1, 1, -1, 0, 1, -1, 0.452089639591095, 1, 1], [0.257237443820218, 0, 0, 1, -1, 1, -1, 0.95921709246897, 0.689042539656648, 0, 0, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.835948420199247, 1.51199094369635, 0.760783126535766, 2.00914103935169, -1.98222285927377, -0.0177771407262315, -1.19522431501896, -0.318977574500711, 1.68102242549929, -0.192726776169995, 1.23037241084053, -0.101838084916509, -0.192949759398098];
        actual = matrixUtilities.multiply([0.319041184298248, 1, 0, 0.0177771407262316, -1, 1, -1, 0.681022425499289, 0, 0.685275617374701, 0.56426716296201, 0.0191703694961827, 0.192949759398098], [0, 1, 0.413705158705686, 0.514201889519674, 1, -1, -1, 1, 1, 1, -1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, -1, -1, -0.820832997011409, 0.12754306715333, -1, 1.03429374033091, 1.19140656347918, -0.191406563479177, 0, -1, 0, 1];
        actual = matrixUtilities.multiply([-1, 0, 0, -1, 1, 0.87245693284667, 1, 0.191406563479177, -1, 0, 0, 1, -1], [1, 1, 1, 1, 0, 0, 0.179167002988591, 1, -1, 0, -1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.02766782662211, -0.801316717547046, -0.00266577879275914, 1, -0.12743030494425, 0.0884837410824763, 1, -0.12743030494425, 0.0884837410824763, 0, 0.87256969505575, 0.284411351794569, -0.198683282452954];
        actual = matrixUtilities.multiply([-1, 0, -1, -1, 1, -1, -1, 1, 1, 0, 1, 0, 0.198683282452954], [0.139255936788049, 1, 0.972713101642538, -1, 1, 0.195927610712092, 0, 0.87256969505575, 0.284411351794569, 0, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -1, -2.7861657928611, 1, 0, 1.7861657928611, 1, 0, 0, -0.966459274276374, -1.96645927427637, -1.96645927427637, -1];
        actual = matrixUtilities.multiply([0, -1, -1, -1, 0, 1, -1, -1, 0, 0.966459274276374, -1, 0, -1], [0, 1, 1, -1, -1, -1, 0, 1, 1, 0, -1, 0.786165792861099, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.82303806525797, 1, -1, -1.18346009318878, 2.18346009318878, -2.18346009318878, 0, 0.846456891319927, -0.846456891319927, 0.957218988778637, -1.95721898877864, 1.95721898877864, -0.823038065257966];
        actual = matrixUtilities.multiply([1, 0, 0, 1, 0.183460093188779, 1, -1, 1, 0.846456891319927, 0.0427810112213627, -1, -1, 0.823038065257966], [-1, 0, 0, -1, 1, -1, -1, 1, -1, 0, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.2360758330841, -2.4636783392666, -0.513131099992027, 0.844336181340896, 1.45092593201014, 0.963127727603134, -1.68244783891479, -1.48654782798078, -1.80123938517703, 0, -1, 0, 0];
        actual = matrixUtilities.multiply([-1, 0.550003372388893, -1, 1, 0, 0.450925932010136, -1, 0.838111657573894, -1, 0, 0, -1, -1], [0.841736279354308, 0.800626791920805, -1, 0.844336181340896, 1, 0.963127727603134, -1, 0.612629793869625, -1, 0, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.823591717407122, 1.42828281895643, -0.932089960735279, -0.00494220853082006, -0.0159779456518487, 1.01597794565185, -0.598756426292824, -1, 0, 0.804896081706926, 1, 0, -0.906577207104572];
        actual = matrixUtilities.multiply([0, 0.482434613854827, 0.521705611851861, -1, -1, 0.984022054348151, -1, 1, 0, 0, -1, 1, 0.906577207104572], [0.229171018688554, 1, 0.0794750457068323, 0.793860344585898, 1, -1, 0.195103918293074, 0, -1, 1, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.985846100376188, -0.956481099108458, -0.283980427442109, 0.157118277231752, 0.988690176973441, 1.15536726863057, -0.383539191625798, -0.0787041294754968, 0.281323154061599, 0.636377630120319, 2, 2.01635738509538, 0];
        actual = matrixUtilities.multiply([-1, 0, 0.0435189008915419, 0.988690176973441, 0.831571899741689, 0, 0.921295870524503, 0.979599375268258, -1, 1, 0.688858056761724, 1, 0], [0, 1, 0.7872640456945, 1, 1, 0.327499328333651, -1, 0, 1, 0.325235686882043, 1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, 2, -1.9935620604053, 0.261529004323077, -2.07500530736288, 0.413331579085009, 1.26905413228202, -1.40866430821301, 2.00892515242458, -0.738470995676923, -1.66431520258277, -0.00115246720308637, 0.164893058671101];
        actual = matrixUtilities.multiply([0, -1, 1, -1, 0.075005307362883, -1, 0.364339471498662, 0.773003779711669, -1, -1, 0.664315202582774, 0, 1], [-1, 0, 0, 0.738470995676923, 1, 0.661190848639789, 0, -1, 0.993562060405296, -1, 1, -1, 0.164893058671101]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.261679102540398, -0.112047956198455, -1.23652420297103, 0.199939680788964, 0, 0.261783471710452, 0.36848989148884, 0.488757218927498, 0.419096554574908, 0.232008928541098, 1.90658482672022, 1.08069795886087, 0.645390844273097];
        actual = matrixUtilities.multiply([0.266340532929795, -1, 0, 0, 0, 0.383082388147284, 0, 0.488757218927498, 0, 0.906584826720219, 1, -1, 0.645390844273097], [0.762721191515551, 0.963155142945775, -1, 0, 1, 1, 0.753932376277602, 1, 0.85747389162773, 0.521923447736503, 0, 0.683360759487078, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.277836366806809, -0.587011686799588, 1.16316021253005, 1.18549041179264, -0.401186649874405, -1.42245756631055, 1.30467107626827, 0.30467107626827, -0.241311546061799, 0.776775932766858, -1, -0.811599641019292, 0.0104294193866597];
        actual = matrixUtilities.multiply([-1, 0.406059277432998, 0.412988313200412, 0.598813350125595, 0.809901128900191, -1, 0.30467107626827, 1, 0, 0, 1, -1, 0.223915424767842], [1, 0, -1, 1, 1, -1, 1, 0, 0.0633595302064715, 0.223224067233142, 1, 0.874959171225764, 0.0465774941475026]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.349732878315138, -0.349732878315138, 2.19906321000582, 0, 1, 0.249131426796844, 0.449261300009331, 0, 0.575271680834969, 1.56834797215105, -0.568347972151054, 1.32349595577554, -0.90017816605986];
        actual = matrixUtilities.multiply([1, 0.349732878315138, 0, 1, -1, -1, 0.449261300009331, 0, 0.693576053573553, 1, 0.568347972151054, 0, -1], [1, 0, -1, 1, 0, 1, 1, -1, 0.56918643441479, 0, 0, 0.181682138788366, 0.90017816605986]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -0.853282988568948, -0.875413754896919, 0, -0.367814290974203, -1.27430258284989, 0, 0.0576668045292682, 0.156782392485432, 2, 2.05129241135045, -1.25751991349157, 0];
        actual = matrixUtilities.multiply([1, -1, 0.39888882795297, 1, -1, -1, 0, 0, 0.156782392485432, -1, -1, 0.139451926173387, -1], [-1, 1, 1, -1, -1, 0.561334628407534, -1, -1, 0.835637211257423, 0, 0.367814290974203, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.29638456846419, 0.19503110144056, -0.450041148555484, -1.38505489769627, 1.34602824882032, 1.09764001959139, 0, 0.10135346702363, 0.746425717019674, 2.60964848408925, -1.65991310532683, -0.643925798891078, 0];
        actual = matrixUtilities.multiply([0.70361543153581, 0, 1, -1, 0, 0.385054897696271, -1, 0, -1, 1, 0.609648484089248, -1, 0], [-1, 0.165402864183021, 0, 1, -1, -1, 1, 0.391591931875605, 1, -1, 0.89864653297637, 0.253574282980326, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.12870941743259, 0.125346334417909, -0.867978220278387, 0.857521656911191, 0.530756579527026, 1.8795901461875, 0, 0.223603512572211, -0.734671095728255, 0.924765934666975, 0.645078124313186, 2.05014455134521, 0];
        actual = matrixUtilities.multiply([0.132021779721613, 0, -1, 0.879590146187502, -1, 0, 0, 0.734671095728255, 0, 1, -1, 0.0501445513452145, 0], [0.0894223498596914, 1, 1, 0.97491048601219, 0.949436787492333, 1, 0, 0.304358663179147, -1, -1, 0, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.30748637190229, 0.01234749938005, -2.52090200712946, 1.08716319272628, 0.087163192726282, -1.30200626761746, -0.410416373708479, -1.41041637370848, -0.410416373708479, -3, -2, 1, -0.190492378170831];
        actual = matrixUtilities.multiply([0.766624753254757, 0.563784875703875, 1, 0.194584730171871, 0.107421537445589, 1, -1, 0.410416373708479, 1, -1, 1, -1, 0.190492378170831], [0.549347408837335, -1, -1, 1, 1, -1, -1, -1, -1, 1, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.88661936618696, 0.0463802236199439, 0, 2, 0.0700440099789035, 0, 1, -1, 0, -1, -0.490041028936413, 0, -0.113380633813041];
        actual = matrixUtilities.multiply([1, -1, -1, -1, 1, 0.929955990021097, 0, 1, 1, 0, -1, 0.490041028936413, 0.113380633813041], [1, 0.409066540379574, 0, -1, -1, 0, 1, 0, 0, 0, -1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.185342460329, 0.242466883846776, 0.777658794862236, -0.830760222157015, -0.156402354201489, 1.00900496589439, 2, -1, -1, -0.711642904072834, -1, -0.713950906281337, 0.0894989737813979];
        actual = matrixUtilities.multiply([0.577551903006412, 0, 0, 0.165407320095881, 0.00900496589439221, 1, 1, 0, -1, 0, -1, 0.286049093718663, 0.820018786853188], [0.741191015458289, 1, 0.94834265669265, 1, -1, 0, 0.42559381035417, 1, 1, -1, 0, 1, 0.109142589433651]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.252886639560054, 1.27696188691862, -0.156833851951819, 2.40097526991785, 2, -1.00620533107138, 1.40097526991785, 1, -0.739813509741711, 0, 0, 0.473421688412047, 0.337706437026014];
        actual = matrixUtilities.multiply([1, 0.148088630357798, -1, 1, -1, -1, 1, -1, 0, 0, 1, -1, 1], [-1, 0.425050517276419, 0, 0.400975269917853, 0, 0, -1, -1, 0.739813509741711, -1, -1, 0.266391821329664, 0.337706437026014]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.995626399291505, -2, -0.00917001290306468, 1.15176196543116, -0.531590686427239, 0.640613697570423, -0.120233775638153, 2, 0.434945608226091, -0.896035636341969, -0.864685177740029, 1.86468517774003, 0.875392623653353];
        actual = matrixUtilities.multiply([-1, 1, 1, 0.468409313572761, 0.563118876220248, 1, 1, -1, -1, 0, -1, 0.864685177740029, 0.875392623653353], [1, 0, 0.486382434371106, 1, 1, 0.434945608226091, 1, 0, -1, 0.120233775638153, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.17491702816923, 0.678415356519825, 1.91839412596002, -0.760626819804603, -0.0848347717359824, -0.15271218500692, -0.21955331890823, -0.0848347717359824, 0.84728781499308, -0.697464575850155, -0.0848347717359824, 1.07106525547974, 1];
        actual = matrixUtilities.multiply([1, 0.765681940953099, 0, -1, 0, 0, -1, 1, 0, -1, 1, 0.477911256941925, 1], [0, 0.593580584783843, 1, 0.760626819804603, 0.0848347717359824, 0.15271218500692, 0.541073500896373, 0, 1, -1, 0, 0.468240572357662, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 1, -1, -0.550737960520544, 1.09130033435826, -0.795668182333777, 0, -1.27575276898022, 0.980120616955739, -1.28035379167663, 0.252056855325247, 0.0181711131840053, 0];
        actual = matrixUtilities.multiply([-1, 0, 0, 0.184452434621962, 1, 1, 1, 0, -1, 1, 1, 0.914068265778044, 0], [-1, 0.810112926554919, -1, -1, -1, 1, 0.633714474101418, 1, -1, -1, 0.275752768980224, 0.0198793830442612, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, -2, 2.96150765286829, -2, 1, -1.96150765286829, -2, 1, 0, 1.73197468124888, 0.268025318751123, -0.306517665882836, 1];
        actual = matrixUtilities.multiply([1, -1, 1, -1, 1, 0, 0, 1, 1, 1, 0.268025318751123, -1, -1], [-1, 1, 0, 1, 0, 0.961507652868287, -1, 1, -1, -1, 0, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 0.954477230531386, 0.0227433182405044, 0.522516978216598, 0.498753470118245, -0.0819745783567963, 0, 0, 0, 0.0543535831637464, -0.889812697901229, -0.733151978461163, 0];
        actual = matrixUtilities.multiply([4.3848995139752E-05, 1, -1, 0, 0.522516978216598, -1, 0, 0, 0, 0.941694338778823, 0.0543535831637464, 1, 0], [-1, -1, 0, 0, -1, -1, 1, 0.954521079526526, 0.219404127085304, 0, 0, 0.19661695984966, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.90715406970454, -1.02628432820844, 0, -2, 1.1191302585039, 0, 0.371339668692713, 0.171375722558129, 0.371339668692713, 0, -1.4615066393565, -1, 1];
        actual = matrixUtilities.multiply([0.907154069704541, 1, -1, -1, -1, 1, 0, 0.371339668692713, 0, 1, -1, 0, -1], [0, 0, 0, 1, -1, 0, 1, 0.461506639356495, 1, 0, 0.580636897860392, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.769853551764904, -0.769853551764904, 0, 0.0653338441929472, -0.0653338441929472, 0.0653338441929472, -0.646137634127465, -1.35386236587254, 0.353862365872535, 2.58289719306999, 1, 0, 0];
        actual = matrixUtilities.multiply([0, 0.769853551764904, 0, 0, 0, 0.0653338441929472, 0, 1, 0.353862365872535, 1, -1, 1, 0], [1, -1, -1, 0.582897193069988, 1, -1, -1, -1, 0, 1, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.80162922656239, 0.11139356407781, -1.40447030374988, 0.343438440162427, 0.739010843400694, -1.94315549635475, -1.72616490988348, -0.361407528387126, 0, 2, 1.21968632900141, -1, -1];
        actual = matrixUtilities.multiply([0.801629226562394, 1, 1, 1, 0.28659393651718, 0.943155496354753, -1, 0.273835090116521, 1, 1, 1, 0, 1], [1, -1, 0.39715892281251, 1, 0.545910887208726, -1, 1, 0.673775441792689, 0, -1, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.999507351080331, 0.548093590674965, -1, -0.864428677431664, -0.382268611985384, 1, -0.275513575074968, 0.539270818950269, 0, 0.397612158734793, -1, -0.139541078889529, 0];
        actual = matrixUtilities.multiply([-1, 1, 0.451906409325035, 0.343895463898729, -1, 0.0383731480866546, 0.460729181049731, 0, -1, 0, 0.139541078889529, 1, 0], [0.814719079441726, -1, 0, 0, -1, 0, 0.875001000647899, 0, -1, 0.275513575074968, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.60166869061145, 0.241169969420412, -0.0536267138335979, -1.08706052093164, 1.27527373017523, -0.542266237336335, 1, 1.90460048844321, -2, 1.16416959146232, -0.370366125540047, 1.37006477144084, 0.543689568800371];
        actual = matrixUtilities.multiply([0.599291090666918, -1, 0.652917804500516, 0.457733762663665, 0.370673241732024, 1, -1, 1, 1, 0.370064771440842, 0.53423436290316, -1, 0.650540204555979], [1, 1, 0, -1, 0, 1, 1, 1, 0, -1, 0.904600488443207, -1, 0.835750911308336]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.214472346573357, 1.37821726611732, 0, 0, 0, -0.939973795664115, 0.785527653426643, 0.378217266117324, -0.648495876066618, 0, 0, 0.177487166889652, -1];
        actual = matrixUtilities.multiply([0, 1, 0, 0.170769559299, 0, -1, 1, 1, -1, 0.504936229207058, 0, 0, 1], [-1, 1, 0, 0, 0, 0.351504123933382, 0.785527653426643, 0.378217266117324, 0, 0, 0, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.122672186767107, -0.284399484416656, 0, -0.241467256211428, -1.52349976736951, -1, 1.36022477613772, 1.56320425313932, 1, 0, 0, 0, 0];
        actual = matrixUtilities.multiply([0.284399484416656, 0, 0, 1, 0.119747452027978, -1, -1, 0.999010067898319, 1, 0, 0, 0, 0], [0.123042274789439, -1, 1, 0.431337584942271, -1, 0, 1, 0.0354898045936086, 0, 0.792552293181677, 0.527749581042561, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.46244405208152, 1.31113948823857, -0.661088676034049, -1, 1.06952419414629, -1.25609381089736, -0.236977688612872, -0.983524317168541, 0.0191161222844926, 0.50698250701484, -0.372261841023463, 0.256093810897364, 0.349630354625726];
        actual = matrixUtilities.multiply([0, 0, 0.992226243481145, -1, 1, 0, 1, 0.236977688612872, 0, 1, 0, 0.627738158976537, 0.661088676034049], [1, 0.482406152636933, -1, 0, -1, 0.256093810897364, -1, 0.0695241941462849, -1, 0.807633723974057, 1, 0, 0.528870584689486]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -2, 1, 0, 1, -0.969098491114144, 0, 1, 0.957660896218224, 0, -0.698734511481009, -1, 0.961656924784955];
        actual = matrixUtilities.multiply([0, -1, 1, 0.0309015088858556, 1, -1, 1, 0.0423391037817761, -1, 0, 1, 0.698734511481009, 1], [1, -1, 0, 0, 0, 1, 0, 0, -1, 0, -1, 0, 0.961656924784955]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.250039737788048, -1.75393490329673, -0.255813684433612, -1, 1.43598806692101, 0, -0.208325326539728, -0.791674673460272, 0.797275430428458, 0, 1, -0.797275430428458, -0.872588691242313];
        actual = matrixUtilities.multiply([0, 0.564384934755221, -1, 0, 1, 1, 1, 0, 0.208325326539728, -1, 0, 0, -1], [0.749960262211952, 1, 0.255813684433612, 0, -1, 0.797275430428458, 0, 0.435988066921005, 0, -1, 1, 0, 0.872588691242313]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.899778715020239, 1.12099112855317, 0.346347791932079, -1, -0.0658324961857091, 1.45836506432778, 1.75579357089279, -0.289166055288709, -1.10336651285336, -0.378168202647086, -0.646727554111235, 1.17333909253305, 0];
        actual = matrixUtilities.multiply([0.132604045389501, 0, 1, 0, 1, 1, 1, 0.354998551474418, -1, 0, 1, 0.378168202647086, 0.0542195793493742], [0, 1, 0.379692598888507, 0.755793570892789, 1, -1, 0, -1, 1, -1, 0.934167503814291, 0.458365064327775, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.340922327405271, -0.437515650613939, 2.34092232740527, 0, -0.096593323208668, 1, 0, 1, -1.58073859781993, 0, 0.224521655814502, 2.07166395805388, -0.340922327405271];
        actual = matrixUtilities.multiply([1, 0, 1, 1, 1, 1, -1, 0.580738597819926, 0, 0.390681995726508, -1, 0.680981962327371, 0.340922327405271], [-1, -1, 1, 0, -1, 1, 0, 0, -1, 0, 0.903406676791332, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.718973280265449, -1.38278231275397, -1.1477218652832, 0.936677950870561, 0, 0.0585234109584817, 1, 0.895041227291823, 0.012401155201905, -0.988915160394728, -0.824945026927136, -0.835189841056606, 0];
        actual = matrixUtilities.multiply([0.718973280265449, 0, -1, -1, -1, 0, -1, 0, -1, 1, 0.175054973072864, 0, 0.558850259780348], [0, -1, 1, -1, -1, -1, 0.0633220491294386, 1, 0.941476589041518, 0, 0.104958772708177, 0.987598844798095, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 0.801061744709062, -1, 0, 0, 0, 0, -1.1119489106871, -2, 1, -0.839502875686369, 0.351577768266004, -1];
        actual = matrixUtilities.multiply([1, 1, 1, 0, 0, 0, 1, -1, 1, 0, 0.351577768266004, 1, 1], [1, 1, -1, -1, 0.344556417010984, -1, 0, 0.456505327698079, 1, 1, -1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.410759181906823, 0.844190119421632, 0.32955499055309, -0.0151474229130649, -0.539803213143711, 1.01514742291306, 0.297219353400739, -0.105333978545515, -1.40240014409758, 1, -0.450456351251554, 0, 0.316825610733044];
        actual = matrixUtilities.multiply([0.711744280863434, 0.699014901043388, -1, 0.0151474229130649, -1, 1, -1, 0.402400144097582, 0.30038050250168, 0, 0, -1, 0.316825610733044], [0, 0.4354123992079, 1, -1, 0.643042427787111, 1, -1, 1, -1, -1, 0.450456351251554, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.87368112330962, 0.666557319827825, 2.34867101784268, 0.0903597251001558, -0.74174756358459, -2, 0.0447360249708868, 0.113508704171852, -0.495088103923522, -0.283121485860609, -0.687895784009199, -1, 0];
        actual = matrixUtilities.multiply([-1, 0.34867101784268, 0.557261446284718, 1, -1, 0, 0.495088103923522, 0, 0, 0, -1, 0.283121485860609, -1], [0.226059951924747, 0, -1, 0.0903597251001558, 0.229269706285219, -1, 0, 0.971017269869809, 1, -1, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.34505267410774, -1, 1.68893241768706, -1.54400062539801, 0, 1.06868037928418, -0.901685182890708, -0.654661896477762, 0.138422431127395, -0.509640631503258, -0.509640631503258, 0.322802938887543, -0.345052674107744];
        actual = matrixUtilities.multiply([-1, -1, 1, -1, 0.54400062539801, 0, 0.351843226864861, 0.598866513277807, 0.654661896477762, 0, 0, 0.509640631503258, 0.345052674107744], [-1, 0, 0.526846268925279, 1, 0, -1, -1, 0, 0.126250552072306, -1, -1, 0.633393255823009, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.5911397536244, 0, 0.408860246375604, -0.997940506968763, 0.0122996096681728, 1.01326082088671, 0.844693398030798, -0.927514953505022, 0, -1.45292948107511, 0.321943317785956, 0.840266217868899, 0];
        actual = matrixUtilities.multiply([0, 0.591139753624396, -1, 0.0132608208867073, -1, 0, -1, 0, -1, 0.347103102294311, -1, 0.506836884425411, 0], [0, 0, 0, 0.155306601969202, 0.927514953505022, 1, 1, 0, -1, -1, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.90532042361112, -0.418399840788171, 0.380586332353105, -0.551550992090046, -0.61153899782565, -1.55155099209005, 2.82279887926895, 0.295693403247601, 0.177201120731049, -2.37318840593714, -0.737160943866962, 0.626811594062863, 0];
        actual = matrixUtilities.multiply([0.619413667646895, -1, 0.285906755964228, 1, 0.551550992090046, -1, 0.822798879268951, -1, 1, -1, 0.373188405937137, -1, 0], [0, 0.607545665748206, 1, 1, 0, -1, -1, 0.704306596752399, -1, 1, 1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0104653976428826, -0.639205452006457, 1.66619857628376, 0, 0, -1, -0.0398759744315762, -0.930745810703722, 0, -0.0398759744315762, -0.930745810703722, 0, 0];
        actual = matrixUtilities.multiply([1, 0.883478479871283, 0.262448699801438, -1, 0, 0, 1, 0, -1, 1, 0, -1, 0], [1, -1, 1, 0, 0, 1, 0, -1, 0.457000239033718, 0.0398759744315762, 0.930745810703722, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.857012804065371, 0.0301906092862118, 0.857012804065371, 1.2840654092301, 0.834347665698429, 1.2840654092301, -1, 1.49642740539109, 0, 0, 1.49642740539109, 1, -0.147614622091695];
        actual = matrixUtilities.multiply([0.0361846871842559, 0, 0.820828116881115, 1, 0, 0.284065409230099, 1, 1, -1, 1, 1, 0, 0.147614622091695], [0, 0, 0, 1, 0.834347665698429, 1, -1, 0.662079739692658, 0, 1, 0, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, 0.420815551849462, 0.0314606992666756, 0, 1, 0.43364863816353, 0.00798338186367575, 0.907337642697309, 0.793902306009665, 0, 0, -0.260755260596404, 0];
        actual = matrixUtilities.multiply([0.420815551849462, -1, 1, 1, -1, -1, 0.907337642697309, 0.628342105368312, 0.636325487231987, 0, -1, -1, 0], [0, 0, 0, 0, 1, 0.694403898759933, -1, 0, 0.260755260596404, 1, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.457365180041159, -2.30509891640929, 0.403057429602563, 0.315134295357232, -0.299599563360245, 0.639364914179556, -0.143811427589418, 0.42785814920633, 0.850064174202301, 0.391021012510648, -1.20402880720982, 0.561502561234637, -0.904507777609168];
        actual = matrixUtilities.multiply([0.785876371798048, 0.929094311282548, 1, 0.34199701638054, 0.529593128026274, 0, 0.850064174202301, 0, 0.143811427589418, 0, 1, 0.204028807209818, 0.904507777609168], [1, -1, -1, 0, 0.672501670044149, 1, 0.595049819720467, -1, 0.561502561234637, -1, -1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 1.61790367198079, 1, 0, 0, 0, 1, -1, 0, 0, 2.17899927272415, 0.796902944704938, -1];
        actual = matrixUtilities.multiply([0, -1, 1, 0, 0, 0, 1, 0, 0, -1, 1, 0.796902944704938, 1], [0, 1, 0, 1, -1, 0, 1, 0.382096328019209, 0, 0, 1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.21692290679408, 1.68778003737693, 0, -1.78307709320592, 1.22548573614354, 1, 0, 1, 0, -1.16339112127358, 0.605799764211196, 0.380314028067661, 0];
        actual = matrixUtilities.multiply([0.94847436339989, 1, 1, -1, 1, -1, -1, 0, 0, -1, 0.380314028067661, -1, 1], [-1, 0.861740136920353, -1, 0, -1, 0, -1, 1, 1, 0.783077093205916, 0.774514263856464, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.972788110828394, -0.256158212784751, 1.5851928804987, -1.15118673550147, 1.21845346966706, -0.693054920161697, 0, -0.716629898043643, -0.915044984740692, 2, -1.28337010195636, 1.08495501525931, -0.972788110828394];
        actual = matrixUtilities.multiply([0, -1, -1, 0.958439329154063, 0.77091220336543, -1, 0, 1, 1, 0, -1, 1, 0.972788110828394], [-1, -1, 0.688894003019153, 0.646598536822292, 0, 0.169872305435069, -1, 0.283370101956357, -1, 1, -1, 0.0849550152593083, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -1.2786730775976, 1.50537944189523, -0.990035034245828, 0.896493714733882, -1, -0.949161965841969, 1.30475587126701, -0.445273421446454, 1, -1.59300645747828, 0, -1];
        actual = matrixUtilities.multiply([1, 0.18419023984307, -1, 0.990035034245828, 1, 1, 0.949161965841969, 0, 0.445273421446454, -1, 0.687489295232803, 0, 1], [0, -1, 0.505379441895233, -1, 0.905517162245473, 0, 0, -1, 0, 0, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.90076477541624, 0.46739546649992, 2.90076477541624, 0.46916393398734, -1.28880204040967, -0.46916393398734, -0.194434098058582, 0.801363990424767, 1.2256737850726, -2, -0.24203402560299, 2, 0];
        actual = matrixUtilities.multiply([0, 1, 1, 0, -1, 0.53083606601266, 1, 0.231462447080511, 0.374076668812929, 0, 1, 1, 0.900764775416239], [-1, 0.787585739878745, 1, 0.411105017834858, 1, 0.620134669179159, -1, 0.75796597439701, 1, -1, -1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.952532479602735, -0.374066591902667, -1.05279508840889, 1.58742401059629, -1, -1.57255674319926, 0.899089703755029, 1.46413162791363, -0.0807974306311446, 1.6565056596661, -1, -1.64939184517106, 0];
        actual = matrixUtilities.multiply([0, 0, 0.0527950884088851, 0, -1, 0.65335417383041, 1, 1, 1, 0, -1, 0.730189275802201, -1], [1, 0.374066591902667, 1, 1, 0.464131627913626, 0, -1, 1, 0.919202569368855, 0.899089703755029, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.48585219098528, 0.216626246094995, -2.36049767464188, 0.0567770265307171, -1, 1.43448496787839, 2, 0.816025675654423, -0.342669800549126, 0, -1, 1, 0];
        actual = matrixUtilities.multiply([-1, 1, 0.485852190985276, 0.304187628116546, -1, 0.247410601585829, 1, 0.816025675654423, -1, 0, -1, 0, -1], [1, 0.783373753905005, 0.616368876591497, 1, 0, 1, 0, 1, -1, -1, 0, 0.526644124894703, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.63307348062893, 2.20400060583092, 0.0388552695693706, 0, -0.484455836696763, -0.961144730430629, -1.04909201760268, 1.53354785429945, 1.01023674803331, 0, 0, 1, 0.332802109109611];
        actual = matrixUtilities.multiply([1, 1, -1, 0, 0, -1, 1, 0.049092017602684, 1, -1, 1, 0, 1], [0.366926519371069, 0.688456442527686, 0, -1, 1, 0, -1, 1, 1, 0, 0.484455836696763, 0.961144730430629, 0.332802109109611]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.582696696083386, 1.50628820038693, -3, 0, 0, -1, 0, 1, 1, -0.252933605226192, -0.791551673795104, -1.93187093871267, 0.364487247245613];
        actual = matrixUtilities.multiply([1, 0, 1, 0, 0, 1, 0, 1, 0, 0.252933605226192, -1, 0.678937333486479, 1], [0.417303303916614, 0.682165498231615, -1, -1, 0.824122702155319, -1, 0, 1, 1, 0, 0, -1, 0.364487247245613]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0504328464392726, 2.81282800753267, -2, 0, 0, 0, 0.63115197263246, 1.31880779512355, -1.36884802736754, 1, -0.864333740372366, 1, 0];
        actual = matrixUtilities.multiply([-1, 1, 1, 0, 0, 0, -1, 0.36884802736754, 0, 0, -1, 0, 0], [1, 1, -1, -1, -1, 1, -1, 0.864333740372366, -1, 0.0504328464392726, 0.948494267160303, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.144825186647859, 0.434846626331493, 0.0746740582746798, 1.2689097938096, 1.31445008624087, -0.606496749728218, -0.144825186647859, 0, 0.606496749728218, 0.144825186647859, -0.434846626331493, -1.28766755773112, 0];
        actual = matrixUtilities.multiply([-1, 1, -1, -1, 0, 0.314450086240866, 1, 0, 1, -1, -1, -1, 0], [1, -1, -1, -1, -1, 0.606496749728218, 0, 0.434846626331493, 0.681170808002898, 0.855174813352141, 1, 0, 0.670241365986989]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 0.318461091871588, 0.617854799431681, 0, -1.09117991388365, -0.0771300723204064, 0.232134568613085, 0.859045345270562, -0.0294835950262749, 1, -1.22728117798794, -1.45927527288873, 0];
        actual = matrixUtilities.multiply([0, 1, 0, 1, -1, -1, -1, 1, 0.767865431386915, -1, 0, -1, 0], [0, 0, 0.0280851116534719, 0, 0.227281177987941, 1, 1, 0.318461091871588, 0.617854799431681, -1, 1, 0.459275272888725, 0.719801491461602]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -1, 0, -0.0903782453808832, -0.275958536828797, 0.167417016916433, 0.838631318341303, 0.988436118228564, 0.38779917936204, -0.628557953810579, -0.791267087570275, -0.641057057309486, -1];
        actual = matrixUtilities.multiply([0, 0, 0, 0.0408583451252702, 0.411958972183968, 0.280722381677815, 0.838631318341303, -1, -1, -1, 0.424736645736143, 0.796178691925564, 1], [0, -1, 0, 1, 0, 1, -1, 0.0115638817714359, 0, 1, -1, 0.450832138979264, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.20770699554092, -0.803555835412608, -0.658177661329696, -1, 0.316917145772333, 0, -2.05720641233828, 2.15311682081525, 1.40039509041253, 1, -1, -0.400395090412532, 0.0347113807774079];
        actual = matrixUtilities.multiply([0.746625892234326, 0.220902386224318, -1, 0, 0, 1, -1, 1, 0.483144641613189, 0, -1, 0, 0.0390848163697332], [0, 1, 0, 0.574061770725093, -1, -1, -1, 1, 0.400395090412532, -1, 0.316917145772333, 0, 0.88810397493099]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -0.377097565390681, 0, -0.518468300776398, -1.84741375727924, -0.152586242720758, 0.47866775794431, 0.996862433383643, 0.480022443681966, -1, -1, -1, 0.905070180029175];
        actual = matrixUtilities.multiply([1, 0, 0.837157278245854, -1, 0.847413757279242, 1, 0.476884877065609, 0.0031375666163571, -1, -1, 0, 1, 1], [0, 0.460059712855173, -1, 1, 0, 1, 0.568236820664367, -1, 1, 0, -1, 0, 0.905070180029175]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, -0.817266378456219, -1.94548320819076, 0.0675535132491745, -0.097839715004824, 1.06755351324917, 0, -0.128013911250985, -0.402465366945819, 0.822538163895969, 0.529131024390986, 1.42007279695015, 0];
        actual = matrixUtilities.multiply([0.135457100875423, 1, -1, 0, -1, 0.0675535132491745, -1, 0, 0, -1, -1, 0.822538163895969, 1], [-1, 0, 0, 0, 0.128013911250985, 0.402465366945819, 0, 0.165393228253998, -1, 1, 1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.34450139680156, 1.34450139680156, 1, -1, 1, 0, -2.13070379809044, 1.76960376499668, 0.638899966906244, 1, -1, 0, 0];
        actual = matrixUtilities.multiply([-1, 0.344501396801556, 0, 0, 1, 0, -1, 0.769603764996679, 0.361100033093756, 0, -1, 0, 0], [-1, 1, 1, 1, -1, -1, -1, 1, 0, -1, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.377550223552412, 0.423438986494876, -0.103111834992635, 0.623882022045498, -1.74718502198681, -0.900300145568466, 0.326227605494777, 0.438760193269122, -0.321528851860546, 1, 0.0945627818734088, -0.786579429431602, 0];
        actual = matrixUtilities.multiply([0.677686210105981, 0.377550223552412, 1, -1, 0.623882022045498, -1, 0.764987798763899, 0.326227605494777, 0, 1, 1, 0.766913878157229, 0], [1, -1, -1, 0, 1, 0.00614225957828679, 1, -1, -1, 0, 0.123302999941308, 0.270275863944681, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.16365198379553, -1.96679098574025, -1.81407036903038, -0.00588510884246096, -2, -1.97772235282591, -2, 0, -0.0222776471740928, 1, 2, 1.97772235282591, 0];
        actual = matrixUtilities.multiply([-1, -1, 0, -1, -1, 0.994114891157539, -1, 1, -1, 1, 1, 0, 0.163651983795526], [-1, 0.202924605553469, 1, 1, 1, 1, 0, 1, 0.977722352825907, 1, 0, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.0956759481205027, -0.645584640393772, -1.02679266642164, 1, 1, 1, 0.594381898918367, -1.23970573406653, 1.27061466000537, -0.793259968824595, -1.03142939649123, -0.387226494095018, 0];
        actual = matrixUtilities.multiply([-1, -1, 0, 0, 1, 0, -1, 0.342547351653943, 1, 1, -1, 0.613682482211703, 0.936668445326699], [1, 1, 0, 0.0323443934472019, 0.582253085720471, 0.026792666421641, 1, 1, 1, 0.284178940711626, -1, 0.95485997477307, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0.584899505407037, -1, 0, -0.095520822841451, 0, -1.82110463214158, 1.91311123614323, -0.243273589407687, -1, 0.904479177158549, -0.243273589407687, -1];
        actual = matrixUtilities.multiply([0, 0, 0, 0, 0, -1, -1, 0.821104632141583, 0.963209918683027, -1, 0, -1, 1], [0, 0.584899505407037, -1, 1, -1, 0.243273589407687, -1, 1, 0, 0, 0.095520822841451, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.15901836201503, -0.962687212956458, 1.49502137792065, -2, 0, -2, 0, 2, 0, 0, -1, 0, 1];
        actual = matrixUtilities.multiply([0.962687212956458, 1, 1, 0, -1, -1, 0, -1, 1, 1, 0, 0, -1], [0.840981637984971, 0, 0.504978622079351, 0, -1, 0, 1, -1, 1, 1, 1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.885071347879745, -0.441723190453706, -2, 0.0559937970319523, 1.17511371185872, 0.500996757045772, -0.114928652120255, -1.95950468115485, -1.34168238674369, -0.114928652120255, 0.416848057399993, -0.764553163072253, 1];
        actual = matrixUtilities.multiply([0, 0.293124669833633, -1, 0.04036469200643, 1, 0.487204852740841, -1, -1, -1, 0.689080988843497, 0.27120932017975, -1, -1], [-1, 0.429629992893725, 1, 0, 0.654286813761241, 0.341682386743688, 0, 1, 0, 0.114928652120255, 0.305217867393614, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -1.69868230526274, -1.61124337958696, 0.0494315135522893, 1.25188618118497, 0.581028694185156, 2, 0.16953562252777, 0.631407137322895, 2, 0, 0.388756620413045, 0];
        actual = matrixUtilities.multiply([0, -1, -1, -1, -1, 0.950568486447711, -1, 0.24265051690985, -1, -1, 0, -1, 0], [0.642446591817982, 1, 1, -1, -1, -1, 0, 0.698682305262742, 1, -1, 1, 0.611243379586955, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [3, 2.86202724271548, -2, -1, -1.86202724271548, 1, 1.22164193178604, 1.22164193178604, -1, -2, -2.86202724271548, 1, 0];
        actual = matrixUtilities.multiply([-1, 1, 1, 1, -1, 0, -1, 0, 0.221641931786035, 1, -1, -1, 1], [1, 0, -1, -1, -1, 1, 0, 0.862027242715483, 0, 1, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0381912607877475, 1.24778966617202, -2.14942552063122, 1.08814098969481, 1, 0.0188772623008695, 0.961808739212253, 1, 0, 1.91857731617921, 0.880386055391462, -1.73096053476024, 1];
        actual = matrixUtilities.multiply([-1, 1, 1, 0.126332250482557, -1, 1, 0, -1, 1, 1, 1, 0.880386055391462, 1], [0, 0.247789666172019, 0, 1, 0, 0.149425520631217, 0.0381912607877475, 0, -1, 1, 1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.671304807845179, 0, -0.0494467718756977, 0.0447499808132416, 0, 0.349754268000719, 0.955250019186758, 0, 0.650245731999281, -0.626554827031938, 0, -0.600798960123583, 1];
        actual = matrixUtilities.multiply([0, 1, 1, 0, 1, 0, 1, -1, 0, 0, 0, -1, 1], [0, 0, -1, 1, 0, 1, 0.0447499808132416, 0, 0.349754268000719, 0.626554827031938, 0, 0.600798960123583, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0541947437131751, 0.769514123801847, -0.719515410560916, 0, 0, 0, 0, 0.964057841787142, -1, 0, 0.0257076403856452, 0, 0.0917193051854704];
        actual = matrixUtilities.multiply([0.725153826980458, 1, 0.733571965588989, 1, 0, 0, 1, -1, 1, 1, 0.715250326187932, 0, 0.0917193051854704], [0.590876082233561, 0, 0.153256231058974, 0, 0, 0, 0, 0.0359421582128583, 0, 0, 1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.198896040766917, -1.45664451385692, 1.58140131066619, -0.617494730100732, -1, 1, 0, 0, -1, 0, -0.017320106745381, 1, 0];
        actual = matrixUtilities.multiply([0.0380458245231052, -1, 1, 0, -1, 0, 0, 0, -1, 0.017320106745381, 0, 1, 0.418598689333815], [1, -1, -1, 0, -1, 0, 0.617494730100732, 1, -1, 0, 0, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, 0.22316983771658, 1.20967106577459, 1.08765299963637, 0.255788466700271, -0.0519566661920197, 0.664970532834982, 0.0223189843922477, 1, 0.335029467165018, -0.0223189843922477, -1];
        actual = matrixUtilities.multiply([1, 0, 0, -1, 1, 0.261627731966613, 0, 1, -1, -1, 0, 1, -1], [0, 0, 0.77683016228342, 0, 0, 1, 0.94804333380798, 1, 1, 1, 0.335029467165018, 0.977681015607752, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 0.0654886644638557, 1.79841253105477, 0.377200595278852, -0.934511335536144, 0.175613126333623, 0, -1.06548866446386, -1.79841253105477, 0.60507812891392, -0.934511335536144, 0.40349065996869, -1];
        actual = matrixUtilities.multiply([1, -1, -1, 1, 1, 0.622799404721148, -1, 1, 1, 1, 1, 0.394921871086081, -1], [1, 1, 0, 0, 0.0654886644638556, 0.798412531054771, 1, -1, 0, -1, 0, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.311161329183337, 1, 0, -0.0611939104067062, 1.20649756617096, -0.261127009643767, 0.670224905493407, -0.592908786420202, 0.485734619426417, 0.0786899308742111, -0.906340323810624, 2, 0];
        actual = matrixUtilities.multiply([-1, 0, 0, -1, 0.261127009643767, 0, 0.592908786420202, 0, 0.485734619426417, 0.115546730866445, -1, 1, 0], [0.849427244090208, 0.0625888486684248, 0, 0.311161329183337, -1, 0, 0.957263743484981, 0.79079359294418, -1, 1, 0, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.901021315204455, -0.183730693619573, -2, -0.717290621584882, 2, 1, -0.809688410633098, 1.1903115893669, -0.190311589366901, -1.28270937841512, 0, -1, 0];
        actual = matrixUtilities.multiply([0.183730693619573, 1, -1, -1, 0, 1, -1, 0.190311589366901, 0, -1, 0, -1, 0], [0, 0.53018649273095, 1, 1, -1, 0, 1, 1, -1, 0.282709378415118, 1, 1, 0.168170388866295]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.531362735694818, -0.319192685608707, -0.354617376836984, 2, 0.360814998094372, -1.59343609148331, -0.557331832231709, -0.788396326726487, 0.606600174604656, -1.20537318997335, 1.1284884025806, 0.22063275343768, 0];
        actual = matrixUtilities.multiply([0.295551831040323, 0.513521480147504, 0.538582918019305, -1, 0, 1, 1, 0.788396326726487, 0, 1, -1, 0.356106046753054, 0], [0, 0, -1, -1, 0, 0.593436091483308, 0.561479236726407, -1, 0.0166972912925749, 1, 0.360814998094372, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.501639465940214, 2.20728262061676, 0.230510186912777, 0.00686111863614926, 1.00898093171836, 1.00237692728421, 0.0025224811409239, -1.22830096456609, -0.667138538168342, 1.00441262054399, 1.08313342513662, 0.67995063699686, 0.334729355450128];
        actual = matrixUtilities.multiply([0.477472126240596, 0.174286549992061, 1, 0.0089809317183592, 0, 1, -1, 1, -1, 0.311434389702712, 1, 0, 1], [-1, 0.595313731858187, -1, 0.763965126482754, 1, 0.264663774177741, 0.766487607623678, 0.771699035433912, 0.597525236009399, 0, 1, 1, 0.334729355450128]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0380436182199249, 1, 0, -0.439526202827471, 0.116190729716882, 1.09922196255029, -0.439526202827471, 0, 3, -0.439526202827471, -0.460774834948021, -0.539225165051979, 0.196914823351854];
        actual = matrixUtilities.multiply([0, 0, 0, 0.00848438358329441, 0.107706346133587, -1, -1, 1, -1, 0.539225165051979, -1, -1, 1], [0.0380436182199249, 1, 0, 0, 1, -1, 0, 1, 1, 0.439526202827471, 0, -1, 0.196914823351854]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 1, -1, 0, 1.25980232044131, 1.00953056423935, 0, -0.165799650906492, -0.51448507351544, 0, -0.767526129618066, 1.21415034476875, 0];
        actual = matrixUtilities.multiply([1, 0, 0, 0, 0.417340546109407, 0.91165669118597, 0, 1, -1, -1, 0, 0.232473870381934, 0], [0.21819149433551, 1, -1, 0, 1, -1, 0, 0.834200349093508, 0.406695205442, 0, 1, 0.92118027895744, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, 2, -1.97626447583375, -2, -2, 1.97626447583375, -1.25680162955858, -1.33066708796223, 1.32281853130492, 2, 1, -1, 0];
        actual = matrixUtilities.multiply([-1, -1, 0, 1, 1, 0, 0.33066708796223, 1, 0.0738654584036514, 0, -1, 1, 0], [-1, 1, 0, -1, -1, 0.976264475833748, -1, -1, 1, 1, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0.654797415893384, 0.424762852031671, 0.381735750186134, -0.890304071004311, 0, -1, -0.287360900681168, 0, 0.394607508273147, -0.886605231007077, 0, -0.586350919951848];
        actual = matrixUtilities.multiply([0, 0.281309018973871, -1, 0.381735750186134, -1, 0, -1, 0, -1, 0.394607508273147, -1, 0.619446505149569, 0.586350919951848], [0, 0.636970769910594, 0.724417473526866, 1, 0.287360900681168, 0, 0, 1, 0, 0, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 1.06926140941264, 0.494966565861817, 0, -0.139931490709973, -1, 0, -1, 0, 0, 1.13993149070997, 0, 1];
        actual = matrixUtilities.multiply([0, 0, 0.494966565861817, 0, 0, -1, 1, 0, 0, -1, -1, 1, -1], [0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0.139931490709973, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.223744656325058, 0.00359367998484228, 2.99640632001516, 0.276846086936116, -1.48947427258337, 1.48947427258337, -0.531948279837122, 0, 2, -0.222633076469709, -0.586755142354758, 2.58675514235476, 1];
        actual = matrixUtilities.multiply([1, -1, 0.996406320015158, 0.594445240960664, 0, 0.895029031622703, 1, -1, 0, 0.586755142354758, -1, 1, 1], [0, 1, 0, 0, -1, 1, 0.531948279837122, -1, -1, 0.309315203367414, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.485862296766537, 0.537090508103572, 1.62809717423111, -1, -0.564393153676946, 0, -1, -0.143525170694816, -0.974742161098282, 0, 0, 0, -0.130234931190608];
        actual = matrixUtilities.multiply([0.64437263442407, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0.130234931190608], [-1, 0.0691056489334934, 0, 1, 0.143525170694816, 0.974742161098282, 0, -1, -1, 1, 0.564393153676946, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.00969521236126088, 0.151661885972909, 0.147657630058363, 1, 0, 0.936068165086241, 0.159806949160903, -0.70440564104561, 0.578673798040743, 1, 2, 1.58698626029631, 0];
        actual = matrixUtilities.multiply([0, 0.141966673611648, 0.00969521236126088, 1, 0, 1, 1, 0.135787409793487, 0.159806949160903, 0, 1, 1, 0], [0, -1, 0, 0, -1, 0.349081904789937, 0, 1, 1, 1, 1, 0.586986260296305, 0.882675469332689]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.57518495692647, 1.46207359750082, 0.424815043073527, -1, 0.803347848264197, -1, 0.701501735347091, -0.760202061380489, -1.29849826465291, 0.951725802827499, -0.951725802827499, -0.951725802827499, 0];
        actual = matrixUtilities.multiply([-1, -1, 0.575184956926473, 0, 0, 1, 1, 0.472591260202504, 0.298498264652909, 0.951725802827499, -1, 0, 0], [1, 1, 0, 1, -1, -1, 0, 0, 0, -1, 0.803347848264197, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.971247307944683, -1.44867361637236, 1.23856998013266, -0.988198696630168, 1.10808811341789, -1.99713021935761, 0.0116807032205302, 2.10698353689719, -1.98691099648686, -1.57739935050597, 0.518887459542084, -1.99713021935761, 0.758560239224956];
        actual = matrixUtilities.multiply([-1, 1, 0.340585502954473, 1, -1, 0, 0.989780777129243, -1, -1, 1, -1, 0.589200653875806, 0.758560239224956], [0.426642602042594, 0, -1, 0.0118013033698319, 0.10808811341789, -1, 1, -1, 0.997130219357614, -1, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.153136317689501, -1.62270381414259, -1.84447552629024, 1, 1.99265055777163, 0.926640128682666, -0.214989109064913, -0.992650557771628, -0.926640128682666, -0.231443185932675, -1.76120737183895, -0.926640128682666, 0.764852186148789];
        actual = matrixUtilities.multiply([-1, 0.929028284702929, -1, 1, -1, 1, 0.785010890935087, 0, -1, 0, 0.768556814067325, -1, 0.91783539760757], [1, 0.325739265571227, -1, 1, 0, 0, 1, -1, 0, 1, 0.992650557771628, 0.926640128682666, 0.833321735185255]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.07192934540656, 0.910280285827015, 0.0887173065397503, 0.584508944109319, -0.910280285827015, 0.91128269346025, 0, 0, 0, 1.07192934540656, -0.910280285827015, -0.0887173065397503, 0];
        actual = matrixUtilities.multiply([-1, 0, 1, 1, -1, -1, 0, 0, 0, 1, 0, -1, 0], [-1, 0.999870667234003, 1, 0.071929345406559, 0, 0.0493533485798879, 0.48742040129724, 0, -1, -1, 0.910280285827015, 0.138070655119638, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.933708254217034, -0.374950672420541, -0.813163425220718, 0.345394674383753, -0.782355091940804, 0.0365769794110716, 0.550079859583676, 0.310867794667258, 0.13860118523739, 1, -0.322739340049559, 0, 0];
        actual = matrixUtilities.multiply([-1, 0.10445700497574, 0.0662917457829657, 0.0449810927011916, 1, 0.300413581682562, 0.170446900264568, 0, 0.379632959319108, 0, 1, 1, 0], [-1, 0, 0, 1, 0.315390458943038, 0.813163425220718, 0, -1, 0, 1, 0.677260659950441, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.799954718351343, -1.97458926099488, 0.792330708258008, 0, -0.244035119770111, 0, 1.7121181768711, -0.337922818650456, -2.51976587833826, -1.16643163150476, 0, 2, 0];
        actual = matrixUtilities.multiply([-1, 1, 0.0336136501438979, 0, 1, 1, 0.968903969958846, 0.550861908379412, -1, -1, -1, 0, 0.75871705811411], [0, 0, 1, 0.166431631504759, 1, -1, 1, -1, -1, -1, 0.755964880229889, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, 0, 1.15411058248205, 0.0733713168061205, 0.196341947743828, -0.495944853171681, -0.877029369062292, -1, -0.32301754938579, 1.87702936906229, 2, 0];
        actual = matrixUtilities.multiply([0, 0, 0, 1, 0, 0.803658052256172, -1, 0, 0, 1, 0, -1, 0], [0, 0, 0, 0.495944853171681, 0.877029369062292, 1, -1, 0, -1, 0.818962402557471, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.35942611627254, 0.102669558069981, 0.155287390647124, 2, -2, 1, 0.249212217167584, -0.249212217167584, 0, 1, 1, 0, 0.948511548782006];
        actual = matrixUtilities.multiply([0.76895216282874, 0, 0.12837827910128, 1, 1, 0, 0.249212217167584, 0, 0, 0, 0, -1, 1], [-1, 1, 0.155287390647124, 1, -1, 0, 1, -1, 1, -1, -1, 0, 0.948511548782006]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.81210646071104, 1, 1.62497247924328, -0.274537900590588, -1, -1, 0.765423303360782, -0.618630501264068, -0.472026521592757, 0, 1, 0.375027520756716, 0];
        actual = matrixUtilities.multiply([0.812106460711037, 1, -1, 0.274537900590588, 0, 1, -1, 0.234576696639218, 0.618630501264068, 1, -1, -1, 0], [-1, -1, 0.137545834359501, -1, 0, 0, -1, 0, 0.624972479243284, 0, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.825473356445075, 1.13834158906473, -2.14821057174542, 0.494414262238151, 0.800545646030438, -0.78037671920861, 0, 0.0175015316426296, -2, 1.42683798420561, 1.18316381566893, 0.287199558823928, 0.944392092500065];
        actual = matrixUtilities.multiply([0.946102309015627, -1, 0.879371047429448, 1, -1, 0.494414262238151, 0, -1, 1, 1, 0, 0.426837984205614, 0.944392092500065], [0, 0.239838719479665, -1, 1, 1, 0.714037543029542, 1, 0.411616359563366, 1, 1, 0.429117891205995, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.886768775008046, -2.71816063193519, -0.659285271847288, 0, 1, -0.779852415798163, 0.113231224991955, 0, 1, 0.0889081332846888, -1.46406112167242, 1.78519095144476, -1];
        actual = matrixUtilities.multiply([1, 0.659285271847288, 0.718160631935187, 0, 0.779852415798163, -1, 1, 0, -1, 0.785190951444763, -1, 0.678870170227657, 1], [-1, -1, -1, 0.113231224991955, -1, 1, 0, 0, -1, 0, -1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.91902557570442, 1.91902557570442, 0.676365637069738, 2.74026658234199, 3, 1.67636563706974, -1, -1, 0.239825629740872, 0.498334470007739, 0.519435813426709, 1.13216917643265, 0];
        actual = matrixUtilities.multiply([0, 1, -1, 1, 1, -1, 0, 0, 1, 0.0812423122493747, 1, 0.561806498822666, 0.0809744242955811], [-1, -1, 0, 0.740266582341989, 1, 1, 1, 1, 0.916191266810611, -1, -1, 0.239825629740872, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.501363200900576, 0.589808788890861, 2.58980878889086, 0.251304057078112, 0, 1.34317705190888, 0, 1, -0.343177051908885, -0.115393597686381, 1, -0.343177051908885, -1];
        actual = matrixUtilities.multiply([0.858898608413943, 0.730910180476918, 0, 0, 1, 1, 0, 0, -1, -1, 1, -1, -1], [1, 1, -1, 0.366697654764493, 1, 1, 0.251304057078112, 1, 1, 0, -1, 0.343177051908885, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.637451569846576, 0.812131132377373, -0.187868867622627, 1.82273265618027, -1, -0.873127974976379, 0.822732656180268, 0, 1, -0.936960074089915, 0, 0.818086052123845, 0];
        actual = matrixUtilities.multiply([0, 0.62685004604368, -1, -1, -1, 1, 0, 0, 1, 0.936960074089915, 0, 0, 0.185281086333693], [1, 1, 1, -1, 0, 0.873127974976379, 0, 1, 1, 0.822732656180268, 0, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.18015662449419, 2.18015662449419, 0.180156624494193, -1.01426263992407, 1.01426263992407, 0.0142626399240748, -0.557626633233217, 0.557626633233217, 0, 3, -3, -2, 0];
        actual = matrixUtilities.multiply([0, 0.180156624494193, 1, 0.985737360075925, 1, 1, 1, 1, 0.557626633233217, 1, -1, -1, -1], [1, -1, 0, 1, -1, -1, -1, 1, 1, -1, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.409675795775687, 0.454039710785281, -2.54296922196772, 0.409675795775687, 0.545960289214719, 0.855603100199068, 0.176948556684445, 0.956772018083139, -0.820674478924216, -0.613621588093392, 0.29717762060302, -1.85560310019907, -0.551201442513243];
        actual = matrixUtilities.multiply([1, -1, 1, 0, 1, -1, 0.820674478924216, 0, 0.299748096754657, 1, -1, 0.654519006914701, -1], [0, 0, 0.687366121768656, 0, 1, -1, 1, 1, 0.855603100199068, 0.590324204224313, 0.454039710785281, 0, 0.551201442513243]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.633535350502252, 0.92396221492624, 1.24705207805004, 0.204290698590102, -0.287906472705261, 0.287906472705261, -0.709573135576012, 1, -1, 0.484282443769966, 0.230699962578109, 1.22473116369207, -0.936758826457317];
        actual = matrixUtilities.multiply([0, 0.92396221492624, 1, 0, 0, 0.287906472705261, 0, 0, -1, 1, 0, 0.682498278879793, -1], [1, -1, 0, 0, 0.913198241457901, 0.542232884812277, 1, 1, 0.267383312930997, 0.709573135576012, -1, 1, 0.936758826457317]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.484114500562738, 0.0623179725661492, -0.758686310033634, -0.123376694099687, 0, 0.758686310033634, -0.767667911683777, 0, 0.201075163756926, 0.0997989485505032, 0, 0, 0.0399550765766955];
        actual = matrixUtilities.multiply([-1, 0.530077495859041, 0.370962707498559, 1, 0, -1, 0.265030699905488, -1, -1, 0, -1, 0.0997989485505032, 0.0623179725661492], [0.345744525243409, 1, 0, 0.876623305900313, 0, 0.758686310033634, 0, 0, 0, 1, 0, 0, 0.641148531176685]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.94666879391087, -1.6626520446251, -1.12628324196035, -1, 1, 0, 1.58372121657418, 1, 2, -0.861840275258599, 0.605338346960646, -0.394661653039354, 0.305778881677323];
        actual = matrixUtilities.multiply([-1, 0.179495639716971, -1, 1, 0, 0, -1, 1, 1, 1, 0.605338346960646, -1, 0.305778881677323], [0, 0.516230273300889, -1, -1, 1, 0, 0.44967526171807, 1, 1, 0.134045954856112, 1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.980041075954233, 0, 1, 0.010029138778307, 0.621069616927332, 0, 0.371957191439326, -0.621069616927332, -0.391916115485093, -1, 0, 1, 0];
        actual = matrixUtilities.multiply([-1, 1, 0, 0, 0.502488949570101, 1, 0.391916115485093, -1, -1, -1, 0, 0, 0], [-1, 0.892995899959, 1, 1, 0, -1, 0.0199589240457671, 0, 0, 0, 0.621069616927332, 0, 0.0891080736597572]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0550585282291558, -0.375796262349839, 0.994980996849696, -0.290566675034616, 0.406889020189126, -0.817477529395689, -1, -1.69745569522374, 1.62816037173763, -1, -0.704155424534692, 0.203983499297865, 0];
        actual = matrixUtilities.multiply([1, 0, 0.603803822586222, 0, 1, 0.290566675034616, 0, -1, 1, 0, 0.424176872439765, 1, 0.228007560236383], [-1, 1, 0, 0.88686991105176, 0, 0.615695363197334, 0, 0.697455695223741, -1, -1, -1, 0.628160371737629, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-3.38827609335458, -0.647967925703548, -0.522638447826094, -0.637517038126932, 0.340171684203749, -0.78765150377135, 0.406889020189126, 0.557284306994306, 0.272526665717609, -1.59311097981087, 0, -0.727473334282391, 0];
        actual = matrixUtilities.multiply([0.795165113543703, -1, -1, 1, 0.189354657749345, 0.291898666551289, -1, 0, -1, 0, -1, -1, -1], [1, 1, -1, -1, 0.442715693005694, -1, 1, 1, 0, 0.593110979810874, -1, 0.727473334282391, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0568772343620289, 0, -0.983705532066459, 0.324444574920668, 1, -0.296191475957721, -0.18698010269174, -1.39109923243108, 0.296191475957721, 0.105988972404035, 1, 0.703808524042279, -0.725980177394105];
        actual = matrixUtilities.multiply([-1, -1, 1, 1, 0, 1, -1, 0.391099232431082, -1, 1, 0, 0, 0.725980177394105], [0.407577163263958, 0, 0.991904482241675, 0.105988972404035, 1, 0.703808524042279, 0.351482337038723, -1, 0, 0.218455602516632, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.56828935098289, 1, 2.04346805440423, 2, -1, -2.3907552880192, 0.240538770910603, -1, 0.150216517108593, 0, 0, -0.390755288019197, -0.865933991440541];
        actual = matrixUtilities.multiply([0.56828935098289, -1, -1, -1, -1, 1, 0.759461229089397, 1, 1, 0, -1, 0, 0.865933991440541], [0, 0, 1, -1, 0, 1, 0, 0, 0.390755288019197, 1, -1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, 0, -2.48289206879348, 1, 0.709905821694949, -1.9537001261272, 0, 0, -1.45770150304665, 1, 0, -1.24379430443225, 0];
        actual = matrixUtilities.multiply([1, -1, -1, 0.709905821694949, -1, -1, 1, 0, -1, 0, -1, -1, -1], [-1, 1, 0.23909776436123, 0, 1, -1, -1, -1, 0.786092801385602, 0, 1, 0.457701503046649, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 2, -1.46777013897326, 0, 1, -1.76840390161071, -0.182451041965955, 0, 0.0548509432433482, 1.13108392857531, -0.131083928575313, -0.89927459784427, -0.770282549676617];
        actual = matrixUtilities.multiply([1, 1, -1, 0, 1, -1, 0.182451041965955, 0, 0, 0, 1, 0.131083928575313, -1], [0, -1, 0, -1, 0, 0.300633762637448, 1, 0, -1, 1, -1, 0.768403901610712, 0.770282549676617]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.546008005281352, -0.0805223230991918, -1.76694455918248, 0.467584905898325, -0.0972186010783624, -1.90278139892164, 0.214673445310212, 1.97494028740327, 0.0250597125967311, 0.242621295478108, -0.716366830149836, -0.283633169850164, 0];
        actual = matrixUtilities.multiply([0.76694455918248, 1, -1, 0.902781398921638, 1, -1, 0.974940287403269, -1, 1, 0.283633169850164, 1, 0, 0.26369059098125], [0.484577622955934, 0.578454912443857, 0, 0.363343703264065, 1, -1, 0.139564969176224, -1, 0, 0, 0, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0.534635991015074, -0.59705578284201, 0, -1, -1, 0, -2, -2, 1, 2, 2, 0.559721889035538];
        actual = matrixUtilities.multiply([-1, 1, -1, -1, 0, 0, -1, -1, 1, 1, 1, 0, 0.59705578284201], [0, 0.895454003426923, -1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0.937470007193028]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.889091037627818, 2.08145764613592, -0.0534092239352917, -1, 0.552050284367078, 1, -1, -1, 1, -1, -3, 1, -0.681428539418349];
        actual = matrixUtilities.multiply([0.0814576461359196, 0, -1, 0.552050284367078, -1, -1, -1, -1, -1, -1, -1, 1, -1], [0.889091037627818, -1, 0.0534092239352917, 0, 1, 0, 1, 1, -1, 0, -1, 0, 0.681428539418349]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -1.54055348343242, 0, -1.40675641801523, -0.342132844868357, 1.23208290535588, -1, -0.534320270891451, 1.61115315072758, -1.42858192111765, 1.67729763888673, -0.911706973833103, 0.647567590534486];
        actual = matrixUtilities.multiply([-1, 0, 0, 0.406756418015229, 1, 1, 0, 0.97231382735647, 1, 0.503003113206012, -1, 0.925578807911639, 1], [0, -1, -1, -1, 0.540553483432417, -1, 0, -1, 1, -1, 0.437993556465019, 0.638839323371108, 0.647567590534486]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -1.0811635335354, 2, 1, -0.0811635335353965, 1, -2, 0.0811635335353965, 0, -1.89436192665918, 0.0725895742271841, 0.105638073340821, 1];
        actual = matrixUtilities.multiply([1, -1, -1, 0, -1, -1, 1, -1, 1, 1, 0.588107251370376, 0.894361926659179, -1], [0, 1, 0, -1, 0, 1, 0, 0, 0, -1, 0.0811635335353965, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.47858381293648, 0.371158590247463, 1.27555719165531, 0.708662480911548, -1.41494251248191, -0.834527718091049, 0, 2.15025759681606, 0.403618305178181, -1, 1.02076972588947, 1.00261426664196, 0];
        actual = matrixUtilities.multiply([-1, -1, 0.478583812936481, -1, 0.986673698288702, 0.278011217377154, 1, -1, -1, 0.138227459573293, -1, 0, 0], [-1, 1, 0.255841970562861, 0, 0.150257596816056, 0.0189127880236659, 1, -1, -1, -1, -1, 0.615294482845484, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.663352402701672, -0.226165068906809, 1.04226041959704, -0.437498472834704, 1.1330089997642, -0.552523454442864, 0, 0, 0, 0, 1.58633604905863, -1, 1];
        actual = matrixUtilities.multiply([0, 1, 0.957739580402961, 0.990021927277568, 0.447476545557136, 1, 0, 0, 0, 1, 0, 1, -1], [0.621091983104633, 0.18390464930977, -1, -1, 0.586336049058631, 0, -1, -1, 1, 1, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, -1.38078170334025, -1, -0.423521143383102, -0.570895584566004, 2.01001288323198, -2.01271476224657, 1, -1, 1.73141160222302, -1, 0.268588397776982, -1];
        actual = matrixUtilities.multiply([0, 1, 1, 0.439117298665977, -1, 0.570895584566004, -1, -1, -1, 0, 0.731411602223018, 1, -1], [0, 0.380781703340254, 1, 0.012714762246569, 0, 1, 1, 0, -1, 1, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.121320364844074, 0.595222390068333, 0.213018030493063, 1.97830127411443, 0.573780379990945, 0, 1.16162766939175, 0.165212571697874, -0.834787428302126, 0.242329924504052, 0.247704803127658, 0.247704803127658, 0];
        actual = matrixUtilities.multiply([0.955984739566215, 0.169002770059278, 1, 0, 1, -1, 1, 0.165212571697874, 0, 0, 0.247704803127658, 0, 0], [0, -1, 0.169041549865641, 1, 0, -1, 0.978301274114429, 1, 1, -1, 0.426219620009055, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0.738992951688819, -0.047914583258291, 0, 0, -0.0401944318042111, 1, 0, -0.575654669467199, 1.98103062621366, 0, 0.424345330532801, 0];
        actual = matrixUtilities.multiply([1, 0, -1, 1, -1, 0.38415089872859, 0, 1, -1, 0.981030626213658, 1, 0, 1], [-1, 0.738992951688819, 0.952085416741709, 1, 0, 0, 1, 0, 0.424345330532801, 0, 0, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 1.00869363127681, 1, -1.40869560623946, 1.27376424609703, 0, -1.87093537574212, 1.71937418049411, -0.129064624257881, 0.106142016642793, 1.21874988763524, -1.66694089987638, 1];
        actual = matrixUtilities.multiply([0, 0, 1, 1, 0.408695606239464, 1, 1, 1, 0.870935375742119, 0.666940899876385, 0.893857983357207, -1, 1], [1, 0.94405914654213, 0, 0, 0.895368907551919, -1, -1, 0.767712813693896, 0, -1, 0.0646344847346817, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.654433579808923, -0.0449019246943769, -2.79252576073284, -0.331871690444732, -0.080452517723611, 0.530765469898826, 0.901072254358359, -1, 1, -1.70100971447095, 1.27224545048697, -0.530487347175594, 1];
        actual = matrixUtilities.multiply([-1, 0.207474239267164, 1, 0.426143576123819, 0.104621893775008, 0, 0, 1, 0, 1, -1, 0.530487347175594, -1], [0.909645411609507, 0.186995967844034, 1, -1, 0.0567165091897903, 1, 0.901072254358359, -1, 1, 0.377129710920681, 0.406284791606611, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.623165591682609, 1, -2.162705437356, -0.793323094394674, 0.793323094394674, 0.206676905605326, 0, 1, 0, -0.972515737625079, 0.46431551057115, -1.46431551057115, 0.972228700282159];
        actual = matrixUtilities.multiply([0.190476737073845, -1, 0, -1, 0, 0.793323094394674, -1, -1, 0, 1, 0.508200227053929, 0.972515737625079, 0.972228700282159], [0.640966052022281, 0, -1, 0, 0, -1, 0, -1, 1, -1, 1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.438926392991839, 0.630154451995733, 0.447229718374298, 0.107315926396901, -1, 1, -1.8926840736031, 0.164219038171796, -0.164219038171796, -0.24920096408711, 1, -1, 0.824789017822961];
        actual = matrixUtilities.multiply([0.404613973295602, 0, 0, -1, -1, -1, -1, 0.164219038171796, 1, 0.78063795472525, 1, 0.946064033520438, 0.824789017822961], [0.0942470636657658, 0.764018965309495, 0.542235297403408, 0.892684073603099, 0, 0, 0, 1, -1, -1, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.20357953813094, 1.87490277498723, -0.1238958207536, -0.796420461869063, 1, 1.1238958207536, -0.888119314044484, 0.549567441711932, 0.673463262465533, 0, 0.188511883927748, 0.1238958207536, 0];
        actual = matrixUtilities.multiply([-1, 1, 1, 1, 1, 0, 1, 0.549567441711932, 0, 1, 0, 1, 1], [0, 0.686390891059484, -1, -1, 0, 0.1238958207536, 0.203579538130937, 1, 1, 1, 0.188511883927748, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.976605888910874, 0.189682363999399, 1.04949933767427, -1, 0, 1, 1.02516375902349, -0.295311439454235, -1.97355424704661, 1.97483624097651, -0.295311439454235, -0.973554247046613, 0];
        actual = matrixUtilities.multiply([0.976605888910874, 0, 0, 0, 1, 0, -1, -1, -1, -1, 0, 1, 0.098720526834354], [0, -1, 1, -1, 0.295311439454235, 0.973554247046613, -1, 0, 1, 0.974836240976507, 0, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 1, 1.06671651316188, -2, -1, 0, -2, -2, -1, -2, -1.51728543570139, -0.517285435701388, -1];
        actual = matrixUtilities.multiply([0, 1, 0, -1, 1, 1, -1, 0, 1, -1, 0.482714564298612, 1, 1], [1, 0, 0.0667165131618811, 1, 1, 0, 0, 1, 1, -1, -1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.66696336803351, -0.567151994242869, 0.555126318500902, 0, 1, 0.555126318500902, -1.76993939409495, -0.769939394094953, 0.547620131963795, 0.772143244637243, 1.20446737306401, 0.233323345588704, 0];
        actual = matrixUtilities.multiply([0, 1, 1, -1, 1, 1, 1, 0.769939394094953, 1, -1, 0.227856755362757, 0.432324128426762, -1], [0.666963368033508, 0.567151994242869, 0, -1, -1, 0, -1, -1, 0.0326269962976812, 0, 1, 0.52249932220322, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.106226194473842, 0.130625170159134, 0.165296650868355, 1, 1, 0, 1.49716323234032, 0.307081793599466, 0.388589671981299, 1.24950687597026, 1.07614736469264, 0.320157091839421, 0];
        actual = matrixUtilities.multiply([0.269786334256542, 0, 0, 0, 1, 0, 0.634230533910091, 1, 1, 0.522539372333577, 1, 0.176855792839479, 0], [0.660704761119888, -1, 0, 0.393741939400203, 0.484180084655145, 0.612694676785122, 1, 1, 0, 0.247440071891733, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.36196308180781, -1, 1, 0.0171727882778145, -1.98282721172219, 0.982827211722185, 0, 2, -1, 1, -1, 0, -1];
        actual = matrixUtilities.multiply([0.361963081807812, -1, 1, 0, 1, 0.982827211722185, 0, -1, -1, 0, 1, 0, -1], [-1, 1, 0, -1, 0, 0, 1, -1, 0, -1, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.06960564323208, 1.77280244453475, -0.623417459780121, -0.879283832329923, -1, 1.10806464502032, -1.87928383232992, -2, 0.512705293722779, -0.566651207193104, -0.566651207193104, 0.883118391554599, 1];
        actual = matrixUtilities.multiply([0, 0.77280244453475, 0, 1, -1, 1, 1, -1, 0, 0.765018543119085, 0, 0.198367335925981, 1], [0.390092948167628, 1, -1, -1, -1, 1, 0.879283832329923, 1, 0.487294706277221, 1, 1, 0.595359351297542, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.02945109036038, 1.7945026959267, 1.89192371531014, 1.13566585577662, 0.823713160969183, 1.82371316096918, 1.69545803391163, -1, 1, 0.395464153678838, 0, 0.535305757790481, 1];
        actual = matrixUtilities.multiply([0.194312608891312, 0.302388893581177, 1, 0, -1, 0.823713160969183, 1, -1, -1, 1, 0.464694242209519, 0, 1], [1, 0.794502695926699, 1, 0.860158395888358, 0, 1, -1, 0, -1, 0.164700361976726, 1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 0, 0, -1.03254768859248, -2.03254768859248, 1, 0, 1, -1, 0.0488693812158282, 0.589900220087683, -0.541030838871855, -1];
        actual = matrixUtilities.multiply([-1, 0, -1, -1, 0.0325476885924803, 1, 1, 0, 0, 0.541030838871855, 0.951130618784172, -1, -1], [0, 0, 1, 0, 1, -1, -1, -1, 0, -1, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, 0, -0.152945211228423, 0.46958926008142, 0.152945211228423, 2, 0.907863871151518, -2, -0.215499816097086, 0.389809971367662, 0.215499816097086, 0];
        actual = matrixUtilities.multiply([-1, -1, 0, 0, 0.67019154628282, 0.517246335054397, 1, 0, 1, 0, 0.644870323894951, 0.429370507797865, 0], [1, 1, 0, 1, 0, -1, -1, 0, 1, 1, 0.907863871151518, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.47958549987537, 1.14465902716086, 0.310868131497747, 1, -0.623122949443349, 0, -1, -0.526054641476858, 0.391814153358254, 1, 0.371882702862789, 0.605148355061132, 0.78700246279454];
        actual = matrixUtilities.multiply([1, 0, -1, 0, -1, -1, -1, 0, 1, 0.995005652306138, -1, -1, 0.78700246279454], [0.609382463902879, 0.786025984578778, 0.892859067252306, 0, 1, 0.608185846641746, 0, 0.149177590920207, -1, -1, 0.473945358523142, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.490119513352457, 0.056183802102612, 0.28634486433926, -1.2224380514689, 1.19143295232747, 0.222438051468897, -2.27708285547657, 1.8686676108921, 1.20156143235353, 1, -1, 0, 0.0964864073770523];
        actual = matrixUtilities.multiply([0, 0.393633105975405, 0, -1, 0, 0.222438051468897, -1, 0.277082855476571, 1, 1, 0, 0, 0.0964864073770523], [-1, 0.463695850439228, 0, 1, -1, 0, -1, 0.0290713743442071, 0.727441010404118, -1, 0.860612431476178, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.76219186790245, 1.36923642473725, 1.57425361785801, -0.200408229697686, -0.983641132379208, -0.799591770302314, 0.193650547039532, 0.0598738750424084, 0.432036142997461, -1.92714980753472, -1.60051876148233, -0.380683367783522, -0.452844172927013];
        actual = matrixUtilities.multiply([-1, 0, 0.822080597664267, 1, 0.200408229697686, 0, 1, 0.733499260495184, 1, 0.682146485281245, 1, -1, 0.452844172927013], [0, -1, 0, 0, -1, -1, -1, 0.0816277237989138, 1, 0.927149807534716, 1, 0.698536882502277, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.313911973179277, 0.638112798949094, -1.27278146925076, -2, -0.198248330596019, 0, 0.458899352447549, 1.0036499795732, -1.43272866794501, 0, 0.435809342393563, -2, 0];
        actual = matrixUtilities.multiply([0, 0.877454563918269, 0.563542590738992, 0, 1, -1, 0.945814010196279, 0.48691465774873, 0, 0, 1, 1, 0.355229050086452], [0, 1, 0.473541466739747, 1, 1, -1, -1, 0.118780505898772, -1, 1, 0.317028836494791, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0.871111531681899, 1, 0.0849921224103272, 1.02274760232978, 0.592022285141061, 2, -0.128888468318101, 1, 1, -1.8711115316819, 0, -1];
        actual = matrixUtilities.multiply([1, 0, 0, 0.592022285141061, 0, 0.507030162730734, 1, 0, -1, -1, -1, -1, 1], [-1, 0, 0, 1, 0.871111531681899, 1, -1, 0, -1, -1, 1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.332148253703379, 1.12060480663581, 1.40407915059667, -1.57859731585653, 0.578597315856534, -0.761102010715667, 0.865959812282355, 1.99938886100398, 0.882743678001102, 0.477935690942274, 1.10521850553584, 0.0198051108832226, 0.153478878621701];
        actual = matrixUtilities.multiply([0.12060480663581, 1, 1, 0, 0.578597315856534, -1, 0.999388861003979, 1, 1, 0.848198887355718, 0.257019618180124, 0, 1], [0.227645472263752, 0, 0.521335472595568, 0.866489357718494, 1, 0, -1, 1, 0.0770568061047498, 1, 0, 0.805686871896352, 0.153478878621701]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.12465114850767, 0.875348851492325, 0.306424613719072, -1, -1, -0.306424613719072, 0.0229126443261805, -0.0229126443261805, 0, 2.64314334683267, 1.11007302212998, -0.693575386280928, 0];
        actual = matrixUtilities.multiply([1, 0, 0.124651148507675, -1, 0, 0, 0, 0, 0.0229126443261805, 1, 1, 0.643143346832666, 0], [0.742618137850714, 0, 0, 1, 1, 0.306424613719072, 1, 0.753216368962646, -1, 1, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.242688620576024, -0.163991149591278, -2.16178868299433, -0.801939637307981, -0.00608891481817186, -2, 0.0120810982827475, 0.210141460974767, 1.78985853902523, 1.32895129770069, 1.41019458622215, -0.589805413777849, -0.220774957547325];
        actual = matrixUtilities.multiply([0, -1, -1, 1, 0, -1, 0, 0.789858539025233, 1, 0, -1, 0.410194586222151, -1], [0.440748983268043, 0.163991149591278, 0.161788682994334, 0, 0.993911085181828, -1, -1, -1, 1, 0.801939637307981, 1, 1, 0.220774957547325]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.69570359340669, 1, 0.680311392843868, 0.534233389949294, 0.0788113521779009, 0.205849320004517, -1.74870705266889, 1, 0.680311392843868, 1.16490933632707, 2, 2.05663371088758, 0.0530034592621976];
        actual = matrixUtilities.multiply([-1, 0, -1, 0, 0.0788113521779009, 0.462230046960632, -1, 0, -1, -1, 1, 1, 0.0530034592621976], [1, 0, 0, 0.748707052668886, -1, -1, 0.913616388995953, 1, 0.736945103731447, 1, 0, 0.319688607156132, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.169695898969516, -0.71795920362601, -2, 1.10866059461081, -1, -1, 1.09022409174599, 0, -0.531681038221196, 1, -1, 0, -1];
        actual = matrixUtilities.multiply([1, 0.28204079637399, 0, 1, -1, 0.938964695641289, 0.531681038221196, 0, 1, 0, -1, 1, -1], [0, 1, 1, 0.169695898969516, 0, -1, 0, 1, 0, 1, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.20797737324982, 0.151636179547514, 0.207977373249818, 1.55929211180624, 0.147327527938098, 0.250565919676128, -0.440707888193758, 0.147327527938098, 0.250565919676128, 0, 0, 0, -0.207977373249818];
        actual = matrixUtilities.multiply([0, 1, 0, 1, 1, 0, 1, -1, 0, 0, 0, 0, 0.207977373249818], [1, 0.729099407200282, 1, 0.559292111806242, 0.147327527938098, 0.250565919676128, 1, 0, 0, -1, 0, 0.458334102974429, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.0358939568722, -0.263172390527638, 0.697754518453849, -0.8812423706433, 0.456578464925559, -1, 0.1187576293567, 1, -1, 0.8812423706433, -1.56541787207379, 2, 0];
        actual = matrixUtilities.multiply([-1, 0, 0.302245481546151, 0, -1, 1, 0, 0, 1, -1, 0, -1, 0], [1, -1, -1, -1, 0.565417872073789, -1, 1, 0.543421535074441, 0, 0.1187576293567, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.723568887321078, 1.27643111267892, 0.112119728590712, 1, 1, 0.15495377227429, -1, -1, 0, 0.909386115572129, 0.909386115572129, 0.15495377227429, 0];
        actual = matrixUtilities.multiply([1, 0.723568887321078, -1, 1, 1, -1, -1, 0, 0, 0.909386115572129, 1, -1, 0], [0, 0.240029078088714, -1, 1, 1, 0, 1, -1, 0.15495377227429, 1, -1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.867636756846285, 1.38745243353185, 0.0923857759183207, 0.433044148405119, 0.392153503090215, 0.186588534480285, -0.934642900354336, 0.644928330855876, -0.0277606765054882, -1, 0, -0.19177181329195, 0];
        actual = matrixUtilities.multiply([0.387452433531849, -1, 1, 0, 0.391898784037632, 0.392153503090215, 0.0677446024807843, -1, 0.577183728375092, 0, -1, 0, 0], [-1, 0, 0.350781888864367, 0.0708258943962054, 1, 0, 1, 0, 0.19177181329195, 0.104921578012836, 1, 0.284157589210271, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.281862469055626, -0.0227160505124908, 1.38463716133714, 1.18082273710137, 1.3357381631321, -0.932724219541825, -0.649314664140956, -1, -0.200381689798265, 0.649314664140956, 2, -0.799618310201735, 0.680960555412323];
        actual = matrixUtilities.multiply([0.703676605924813, 0, -1, -1, 0.335738163132099, 1, 0, -1, 0, -1, 1, 0, 0.680960555412323], [1, 1, 1, 0, -1, 1, 0.649314664140956, 1, 0.200381689798265, 0.962823024467948, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.887428760476144, -0.79156518830923, -0.573914388261237, 2.07590778594646, -0.982171160351931, 0.0102746102042924, 1.28640492460057, -0.484638318176146, -0.5492526444, -1.76791295351829, 0.765125020763429, 1.09673057314788, 1];
        actual = matrixUtilities.multiply([0, 0.887428760476144, 0, 1, 0.0759077859464603, 1, 0.637135468254395, 0.649269456346179, 0, -1, -1, 0.23208704648171, -1], [0, 1, 0.694033615614303, 1, -1, -1, 1, 0.234874979236571, 0.135356473333834, 1, 0, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 0, 0.314494130403391, -0.310170894633127, 0, 0.173447469795797, 1.68982910536687, 0, 2.00431542337663, 0.310170894633127, 0, 0.271450900192941, -1];
        actual = matrixUtilities.multiply([0, 0.728090311273975, 0, 1, 1, 1, 1, 0.608439737282898, -1, -1, 0.02999121883418, -1, 1], [1, 0, 0, 0.689829105366873, 0, 0.741503622262508, 0, 0, 0.431943847533289, -1, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.290830660281158, -1.16706183001728, 1.14872255176261, -0.170896172149146, -0.460701520303591, 1, -0.513220473431619, -3, 1.8902246057476, 0.294065994146866, 0.264418668236778, 0.208543564409788, 0];
        actual = matrixUtilities.multiply([0.167061830017279, -1, 0, 0, -1, 0.539298479696409, 1, -1, -1, 0.880760417264309, 0.575531030807426, 0.569648054693662, 0], [1, 0.845675128905883, 0, 0, -1, 0.890224605747603, 0.290830660281158, 1, -1, 0.222389813150461, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.439137839916692, 1.21698240806208, 0.368416287642166, 0.100165185565206, 0.422445407799653, -0.458177042884479, 0.375022298675352, 1.0761709697679, 0.847528685482336, -2, -1, 0.169548727650916, 0];
        actual = matrixUtilities.multiply([1, 1, 1, 1, 0.544435654089058, 0.205462999737571, 0.35104675281376, 0.779135614065051, 1, 0, 1, -1, 0], [0.976429145306549, -1, 0.801627733652307, 0.439137839916692, 0.216982408062081, -1, -1, 0, 0.768982507646541, 1, 1, 0.599433779995625, 0.612735190248459]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.406537288989191, -0.243759137691818, -0.650296426681008, 0.774549230828206, 0.774549230828206, 1, 0.202588381805731, 0.202588381805731, -1, 0, 0, -0.645986357073293, -0.650296426681008];
        actual = matrixUtilities.multiply([0, 0.406537288989191, 0, 0, 0.774549230828206, -1, 0.108587263202568, 0.094001118603163, 1, 1, -1, 0.645986357073293, 0.650296426681008], [0, -1, -1, 1, 1, 0, 1, 1, 0, 0, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.33128838489358, 0.728375745452996, 0.331288384893578, -1, -0.569891856317358, -1.14878522239103, -1, -0.569891856317358, -2, -1, -0.569891856317358, 0, 0];
        actual = matrixUtilities.multiply([1, 1, 0.331288384893578, -1, 0.148785222391032, 0, -1, 1, 0, -1, -1, 0, 0], [1, 0.928885429133142, 0, 1, 0.569891856317358, 1, 0, 0, -1, 1, 0.478386494553828, 1, 0.658314232555364]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.62452406139324, 0.930008429535669, 1.93000842953567, 1.55453249092891, 1, 0, 0.0559718713133375, -1.72395402040517, -2.25778844266096, -1, 1, 1, 0];
        actual = matrixUtilities.multiply([0.0699915704643315, -1, -1, -1, 0, 1, 0.982005340504463, 0.741948679900704, 0.533834422255789, 0, -1, 0, 0], [1, 0.439926983527805, -1, -1, -1, -1, 1, -1, -1, 0.554532490928905, 0, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, 0, 0, 0, -0.227651556594135, 0, 0.66993384420403, 0.227651556594135, -1, -0.361211876553116, -1, 0];
        actual = matrixUtilities.multiply([0, 0, 0, 1, -1, -1, -1, 0.33006615579597, 1, 0, 0.361211876553116, -1, 0], [1, 0, -1, 1, -1, 0.772348443405865, 0, -1, 0, 1, 0, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0169464373108681, -0.961908297076311, 1.01694643731087, 1, 0.424305171437704, 0, 1.04801076559723, 0.428520503752674, 0.0480107655972292, 0, 1.10300819373843, -1.79562568515335, 0];
        actual = matrixUtilities.multiply([0, -1, 0.0169464373108681, 1, 0, 0, 1, 0, 0.0480107655972292, 1, 0.795625685153355, -1, 0], [-1, 0, 1, 1, 0.424305171437704, 0, 0, 0.963396189717295, -1, 1, 0.0877997312172315, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.596926316628826, 1.73011600306729, 1.12792274175581, 0.600456096511547, 0, -1.84656933036007, -0.600456096511547, 0.239566229395366, 0.0334037778257649, 0.375323097685636, 0, -0.625063347455609, -1];
        actual = matrixUtilities.multiply([0, 0.0115116764844915, 1, 0.846569330360074, 1, 0, 1, -1, 0.239566229395366, 0, 0.625063347455609, 0, 1], [0.590014060302644, 0.730116003067287, 1, 0, 0, -1, 0.600456096511547, 0, -1, 0, 1, 0.139434418240299, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.602694908903304, -0.37186029993026, 1.80792788139355, 1, 1.85774896333821, 0.379609153317106, 0.564175987878896, 1.15845963602501, -0.559442203477212, 0, 0, 0, 0];
        actual = matrixUtilities.multiply([0.602694908903304, 1, 0.73231181489877, 1, -1, 1, 0.564175987878896, -1, 0.184738942042337, 0, 0, 0, 0], [1, 0, 0.629218303891466, 1, 0, 0.284037353137525, 0, -1, 0.90442819982042, 0, 0.857748963338206, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.560189215727239, -0.560189215727239, -0.560189215727239, -2, 1.60261501260224, 2.20900816719466, -2, 3, 1.47404110919407, 0, -0.467192659837749, 0.245724133160936, 0];
        actual = matrixUtilities.multiply([1, 0.439810784272761, 0, -1, 1, 0.397384987397764, -1, 1, -1, -1, -1, 0.467192659837749, 0], [0.0329728671503127, -1, -1, 1, -1, -1, -1, 1, 1, 0, -1, 0.525958890805933, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 0, 0, 0, -1, 1, 0.603274230660533, -1.40067646717684, 1.40067646717684, 0, 1, -1, 0];
        actual = matrixUtilities.multiply([-1, 1, -1, 0, 1, 0, 0.603274230660533, 0.797402236516309, 0.814515491395498, 0, -1, -1, 0], [1, 1, 1, 1, -1, 1, 0, -1, 1, 0, 0, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, -1.24457120347981, -2, 0.943119724254645, -1.05688027574535, -1.94311972425465, 1.45403433845101, 1.89247979870647, -0.326742931421261, 1, -1, 2, 1];
        actual = matrixUtilities.multiply([-1, -1, 1, -1, -1, 0.943119724254645, 0.219222730127733, 0.673257068578739, 1, -1, 1, -1, -1], [-1, 0.244571203479809, 0, -1, 1, 0, 1, 1, 1, 1, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.398251326008817, 0.622146806503714, 1.60174867399118, -2, 1, 0, -0.980503715565663, 0.304907894369638, 0.370687926826388, 0.846672702974953, 0.153327297025047, -1.15332729702505, 0.611947740247449];
        actual = matrixUtilities.multiply([0.0101990662562657, 0, 1, 1, 1, 1, 0.304907894369638, 1, 0.675595821196025, 0.153327297025047, -1, -1, 0.611947740247449], [1, 1, 1, -1, 1, -1, 0, 0, 0, -1, 0, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.438612213096866, 1.43861221309687, 0, 1.32607704742163, 2, -0.673922952578367, 0.461453971202231, -0.66574521859444, 1.12719918979667, 1, 1, 0, 1];
        actual = matrixUtilities.multiply([-1, 0.561387786903134, 1, -1, -1, 0.326077047421633, 0.236411056591389, 0.429334162003051, 0.890788133205282, 0, -1, 0, 1], [0, 1, 0, 0, -1, 1, -1, -1, 0, 1, 0, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.17448670332063, -2, 1.48202856652533, 0.174486703320633, 1, -1, -0.174486703320633, -0.852076565312257, 1.07195513968379, 0, 0, 0, -1];
        actual = matrixUtilities.multiply([-1, -1, 1, 0, 1, 0.956177680267104, 0.147923434687743, -1, 0, 0, 0, 0, 1], [-1, 0, 0.968463591750927, 0, 1, 0.486435025225596, 0.174486703320633, 1, -1, 0, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0542708731067527, 0.00899227207839585, 1.62604278515985, 0.344378841519089, 0.495289077426137, 0.478058940016897, -1.13136671489634, -0.815730401228988, -0.22317052829227, -0.59722065068652, -0.31901704348578, 0.59722065068652, -0.851763923117781];
        actual = matrixUtilities.multiply([0, 0.0110235833614243, 0.805406906551405, 0, 0.607172512732061, 0.0915117399261853, 0, -1, 0.413464352215391, -1, 0, 0.59722065068652, 0.851763923117781], [1, 0, 0.955215240807838, 0, 0.31901704348578, 0, 0.717902362680949, 0.815730401228988, 0.63663488050766, -1, 0, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -0.373609377245237, -0.993487184917031, 0.946004135043362, 0.944965268925282, 0.500094879651486, 0, 0, 0, 0.646071869487133, 0.646382643503287, 0.779464428669276, 0];
        actual = matrixUtilities.multiply([0, -1, 0, 1, 0, -1, 0, 0, 0, 0.629919151137545, 0, 0.29914732105059, 0.116699668633146], [0, 0, 0.0558083425535859, 1, 1, 1, 1, 0.373609377245237, 1, 0.0539958649566378, 0.0550347310747182, 0.499905120348514, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.451819208416728, 0.109677329244873, -0.109677329244873, 0.4520802378897, -1, 0.843314762154275, -0.608765475735425, 1, -1, 1.00319407831499, 0.516583080178398, 1, 0];
        actual = matrixUtilities.multiply([0.890322670755127, 1, 1, 1, 0.156685237845725, 0, -1, 0, 0, 0, -1, 0.516583080178398, 0], [0.130014030789032, 0.823537073481612, 1, 0.608765475735425, -1, 1, -1, 0, -1, 0.00618308736299308, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.36881045967751, 0.631189540322493, 1.63118954032249, -1.14045725955649, -0.512470902182381, -0.859542740443509, -2, 1, 0, -1.49006339697636, 0.490063396976359, -0.509936603023641, 0];
        actual = matrixUtilities.multiply([1, 0.631189540322493, -1, -1, 0.140457259556492, 0.347071838261127, -1, 1, 1, -1, 0.490063396976359, 1, 1], [1, 0, 0, 1, 1, 1, -1, 1, 1, 0, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 0.737975236800576, 0.258637562980241, 1, -1, -1, -0.216403340090254, -0.344001777164639, -0.783596659909746, 0, -0.30529682259322, -0.744891705338327, 1];
        actual = matrixUtilities.multiply([0, 0.258637562980241, 0, -1, 0, 0, 0.216403340090254, -1, 0, 0, -1, 0.255108294661673, 1], [1, 0.593033422992115, 0, -1, 1, 1, 0, 0.560405117254893, 1, 0, 1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.836011513429816, -1, -0.583243003386652, 0.718833341132306, 1, 1, 0.281166658867694, 0.421609079661597, -0.450727449474264, -1, -1.4216090796616, -0.549272550525736, 0];
        actual = matrixUtilities.multiply([-1, 0, 0.583243003386652, 1, 0, -1, 0, 1, 1, -1, -1, 0, 0], [0.34494629425227, 0.173539231612133, 0, 1, 1, 0, 0, 0.421609079661597, 0.549272550525736, 0.281166658867694, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.125239959510621, -1.30239875721857, 1.94417190054997, -0.626965270203988, -0.302398757218569, 2, 0, -0.997409299448991, -0.376145305752822, 0, -1, -0.69681956465208, 0.752205229714608];
        actual = matrixUtilities.multiply([1, -1, -1, 1, -1, 0, 0.320674258899258, 0, -1, 0, 0, -1, 0.752205229714608], [1, 0, 0.852149705799366, 0, 0.00807891646776298, 1, 0.626965270203988, 0.310477673686332, -1, 0, 1, 0.69681956465208, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.30835452927231, 1.44203128760717, -1, -0.399017106752376, 0.198928121104337, 1, -0.745996666923984, -0.59553405251146, 0, 0.79001966621262, 1.219379022794, 1, 0];
        actual = matrixUtilities.multiply([1, -1, 1, -1, 1, 0.0682516349797378, -1, 0, 0.27378946136394, 0.252356020851227, 1, 0, 0.944638985183388], [0.972102428307804, 0.606271583869248, 0, 1, 0.8693235138754, 0, 0.537663645361394, 1, 1, 0.927732323262716, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.422789088181588, -0.067408909121253, 2.68879191516377, 0.958465213822313, -1, 0.722899413072923, -0.653970511729638, -0.391869946565418, 1.81006452551142, -0.746870551140453, 0, 1.76770732028769, 0.932591090878747];
        actual = matrixUtilities.multiply([1, -1, 1, 1, 0.965892502090844, 1, 0.391869946565418, -1, 0.5401476745215, 0, -1, 0.767707320287687, 0.932591090878747], [1, 1, 0, 0.237068548443293, -1, 0.688791915163767, 0.746870551140453, 0, -1, 0, 0, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.325345665367947, 0.189801360059859, -0.674654334632053, 0.0074570402795576, 0.00918226736093977, -0.00918226736093977, -0.477453567309982, 0.278538631637764, 1.47745356730998, -0.103923463561351, 0.296467878870804, 1.07385687347215, 0];
        actual = matrixUtilities.multiply([0.325345665367947, 1, 0, 0, 0, 0.00918226736093977, 0.477453567309982, -1, 0, 0.233881876447183, -1, 0.160025002975028, 0], [1, -1, 0, -1, 0.583383706204306, 1, 0, 0, -1, 0.812113172752835, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.766642518736396, 0.70871915189024, 0.612065484131543, -0.0101587902801851, 1, 1.57549520655325, -0.625309611556548, 1, 1.25062625606422, 0.95785162892466, -1, -0.338385815889754, 0];
        actual = matrixUtilities.multiply([0, 0.927097195259806, -1, 1, 1, -1, 1, 0.0610987590910395, -1, -1, 1, 0.454910038716584, 0.70871915189024], [-1, 1, -1, 0, 1, 0.229485491863212, 0.655181604276961, 0, 0.346009714690042, 0.665340394557147, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0104753476842965, 1.06890126740045, 0.233734180328313, 2.38427439210204, 0.783978878108024, -0.0196752408611007, 1.1180727673313, 0.118072767331299, 0.689525930066372, 0, 0.607770238354695, 2, 0];
        actual = matrixUtilities.multiply([0.979005001475571, 0, -1, 0.396572994252934, 0.987701397849108, 1, 0.118072767331299, 0, 1, 1, -1, 0, 0.173817658412185], [0.181053792210787, 0.517187187688978, -1, 1, 1, 1, 1, 0.392229761645305, -1, 1, 0, 0.571453162735073, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.599161566979793, 2.32112102970533, 2.59916156697979, 0, -2, -1, 3, -1, -2, -1.65059604572626, 0.349403954273743, 1, 1];
        actual = matrixUtilities.multiply([-1, -1, 0.599161566979793, 1, 0, -1, -1, 1, -1, 0.650596045726257, 0, 1, -1], [0, 0.278040537274461, -1, -1, -1, 0, 1, -1, -1, -1, 1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.32862575134664, 0.890676509538049, 0.221601935672388, 0.31373837884224, 2.10932349046195, 0.778398064327612, 0.607395450204683, -1.71681747665481, -0.841151859649498, -0.139438235265873, 1, -0.221601935672388, -1];
        actual = matrixUtilities.multiply([-1, 1, -1, 1, -1, -1, 0, 0.716817476654806, 1, 0, -1, 0, -1], [1, -1, 1, 0.960620300360313, 0.109323490461951, 0, 0.139438235265873, -1, 0.221601935672388, 0.507443686252201, -1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.227366679453927, -1.99995908932758, -0.541122086598129, 0.163834764232782, -0.836165235767218, -0.163834764232782, 0, -1, 1, 0.135791378158979, -1, 0.864208621841021, -0.855234065025688];
        actual = matrixUtilities.multiply([0.772592409873657, 0, 0.999959089327584, 1, 0, 0.836165235767218, 0, 1, 0, 0.135791378158979, 1, 0, -1], [0, 1, 0.768488766052057, 1, 0, -1, 0, -1, 1, -1, -1, 1, 0.855234065025688]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.19210922232502, 0.183687862094346, 0.528648248522067, 1, 0, -0.548383468086079, 1.02616647892885, -0.586460186441643, -0.537891265967483, 0.427851106239413, -1.75279085000641, 0.171559203495998, 0];
        actual = matrixUtilities.multiply([-1, 0.449009525798731, -1, -1, 0, 0, -1, 0.0611579087847648, 0.525302277656878, 0, 1, 0.752790850006412, -1], [-1, 0.367302612106922, -1, -1, 0, 0.548383468086079, 0.427851106239413, -1, 0.171559203495998, 0, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.11315548844317, 0.188775827011539, -0.612346959997048, 1.49795112223269, -1.30685059693961, -0.630120755466689, -0.50204887776731, -0.417928827189807, 0.223491957980903, 1.50204887776731, 0.111078230250198, -0.853612713447592, -1];
        actual = matrixUtilities.multiply([-1, 0.615204366210478, 0, 1, -1, 0, 1, 0, 1, -1, -1, -1, -1], [1, 1, 1, 0.49795112223269, -1, 0, -1, 0.30685059693961, 0.630120755466689, -1, 0.582071172810193, 0.223491957980903, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.577470014140694, -0.504218767166239, -0.421994077703913, 0.653318608018252, -0.411666814895192, -0.493891504357518, -1.65331860801825, 1.41166681489519, 1.49389150435752, 0.346681391981748, -0.588333185104808, -0.506108495642482, 0];
        actual = matrixUtilities.multiply([0.0758485938775579, -1, 0.159963011816127, 0, 1, -1, -1, -1, 1, 1, -1, 1, 0], [-1, -1, 1, 1, -1, -1, 0.653318608018252, 0.588333185104808, 0.506108495642482, 0, 1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.25176553905558, 0.82556827966525, -2.51006036228969, 1, 0, -1, -1.10007541025992, 1.0738289973966, -1.10007541025992, -0.245911111704032, 1.00418997678357, -2.24591111170403, 0];
        actual = matrixUtilities.multiply([1, 0.880912950672634, 0.629147411617053, 0, 0, 1, 1, 0.100075410259923, 0, 0.324248335475218, 0.921662776228815, 1, -1], [0, 0.82431084421664, 0, -1, 1, -1, -1, 0.73773364710516, -1, 1, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.86899018095294, -2.80327453501675, -0.734670379541195, 0.111018566482921, 0.6807000270549, 2.39474029065796, 0.0389510126475491, 0.238824515601013, -1.25002014508937, -0.759857462895893, 1.26328852838488, -0.291609599390817, -1];
        actual = matrixUtilities.multiply([-1, -1, 0, 0.847406456175915, -1, 1, 0.297313689392672, 1, -1, 0.538841374469382, 0.830450973860198, 0, -1], [-1, 1, 0.734670379541195, 0.131009819047064, 0.80327453501675, 1, -1, 1, -1, -1, 1, 0.547333834482047, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.668348252153186, 0.393283499122264, 1.39328349912226, 1.41383642629433, -1, 0, 0.818743561327585, 0.235934031771465, 1.1231000130638, 0.845650921969512, 0, -1, 0];
        actual = matrixUtilities.multiply([0.393283499122264, 1, 1, -1, 0.352204675018883, 1, 0.235934031771465, 1, 0.887165981292336, 0, 0.907282673244962, -1, 0], [0, 1, 0, -1, 1, 1, 1, 0, 0, 0.0616317512754499, 0, 1, 0.095780594319003]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -0.69579221806293, -1.20744827166547, 0.851382167009349, 2.22004347780889, -0.643933895343884, -1, 1.1810824769461, 1.12243897204694, -1, -2.30420778193707, 0.792551728334535, 0];
        actual = matrixUtilities.multiply([0, 1, -1, 0.961046397202204, 0.851382167009349, 1, 0.895075787275599, -1, 0.590214471607569, -1, -1, -1, 0], [0, 0.636438241524826, 0.94936452803638, 0, 1, 0, 1, 0.30420778193707, -1, 0, 1, 0.207448271665465, 0.744002334654332]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.151536007480969, 0.14460172091825, 0.841119958013818, 0.409785113216576, 0.430659403759362, 0.373964888848927, 0, -1.66520920240563, -1, -0.719753897618388, 3, 0.343161384734866, 0.0695141101761843];
        actual = matrixUtilities.multiply([0, 0.696518237095567, -1, 0.569340596240638, -1, 0, 0, 0.665209202405628, 1, -1, -1, -1, 0.158880041986182], [0.953776230082743, -1, -1, 0.719753897618388, -1, 0.656838615265134, 0, -1, 0, 0, -1, -1, 0.437525754066895]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.971824068210247, -1.94349230193016, -0.178556192749439, -0.0551463603298861, 0.889402277716157, 0.229610630417993, 0.0551463603298861, 0.110597722283843, 0, 0, 0.143889665670642, -0.893721261894441, 1];
        actual = matrixUtilities.multiply([-1, 0, 0.510930034569898, 1, 0, -1, 0, 0, 1, 0.462865059479543, -1, 0, 1], [-1, -1, 0.0510544376685538, 0, 1, 0.229610630417993, 0, 0.318975393808901, 1, 0.0551463603298861, 0.110597722283843, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.371191431299702, -2.77945690312398, 1.65673536325653, 0.476218030544099, -1, 0.766153618584459, 0.199122833646425, -1.27709519689767, 1.06479770910215, 0.183434248222237, -0.385189632598865, 0.385189632598865, 0];
        actual = matrixUtilities.multiply([0.779456903123975, 1, 0, 1, 1, -1, 1, 0, 0.277095196897674, 0.385189632598865, 0, 0, 1], [1, -1, 0.877278460132554, 0.476218030544099, -1, 1, -1, -1, 0, -1, -1, 0.233846381415541, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.168325361408445, -0.214481333836206, -1.89677518880776, 1.45993855803271, -0.785518666163794, 0.540061441967292, -1, -0.48233206313212, 2, 1.35903002664402, -0.303186603031674, -0.359030026644017, 1];
        actual = matrixUtilities.multiply([1, 1, 0, -1, 0.459938558032708, 0, -1, -1, 1, 0, 0.359030026644017, -1, 1], [0.168325361408445, -1, 0.103224811192241, -1, 0.785518666163794, -1, 1, 0, -1, -1, 0.303186603031674, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.13724139701833, -0.11195986769719, 1.04280075762934, 0.399966411717768, -1.25115360005347, 0.325519133671454, 0.00477596931381896, 0, 0.382286604206211, 0.00477596931381896, 0, 0.382286604206211, -1];
        actual = matrixUtilities.multiply([1, 0, 0.11195986769719, 0, 0.39964813245444, 0.851505467599028, 0, -1, 1, 0, -1, 1, -1], [0.173203316597828, -1, 0, -1, -1, 1, 0.316427693383967, -1, 0, 0.321203662697786, -1, 0.382286604206211, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0888737487089233, -0.456748688340536, -1.45799973255862, 1, -0.543251311659464, 1, 1.54687348126754, -1.54325131165946, 0, 0.546873481267539, 0.0512409806490135, 0.0512409806490135, -0.542000267441385];
        actual = matrixUtilities.multiply([-1, 1, 1, 0, 0, -1, -1, 1, -1, 0.0512409806490135, 1, 0, 0.542000267441385], [1, 0, 1, 0, 1, 1, 0.546873481267539, 0, 0, -1, 0.543251311659464, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.5518845163993, 1.30075010065956, -0.164183126838963, -0.0877386629990017, -0.0877386629990017, 1.912261337001, 1.65089970019222, 1.7997631650049, -0.333350564109007, 0.467236033392714, 1.02873746446741, 0.532956077965422, 1];
        actual = matrixUtilities.multiply([1, -1, 0, 0.912261337000998, 1, 0, 0.650899700192222, -1, 0.26511680393718, 0.470392665579167, 0.00315663218645222, 1, -1], [0.4481154836007, 0.699249899340444, 0.164183126838963, 1, 1, 1, -1, -1, 1, 0, 0.561501431074693, 0.0594067801998028, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.36580680048364, 1, -0.00919618644248521, 0.696307389855528, 0.00720458234663779, 1.88290584029373, -1, 0.0369858043440552, 0, 1, 0, 0.990803813557515, 0];
        actual = matrixUtilities.multiply([0, 1, 0, 0.194793177393634, 0.891100567249162, -1, 1, 0, 0, 0, 1, 0, 1], [0.365806800483636, 1, -1, -1, 0.0369858043440552, 0, 1, 0, 0.990803813557515, 0, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.197866646199425, 0.776867479447679, 1.57609934603981, -1, -1, -0.279982972554855, -0.797284849824982, -1.79728484982498, 0.242021622224048, -1, -0.0246339896808536, 0.671622721902458, 0];
        actual = matrixUtilities.multiply([1, 0.770839864281397, -1, 0, 1, -1, -1, 0.797284849824982, 1, 0.975366010319146, 1, -1, 1], [0.572973218081972, 0.547707343729077, 1, 0, 1, 0.975639590050857, -1, -1, 0.521719325576778, 0, 0, 0.801702298131633, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.367424424443126, -1.59760720776283, 1, 1.69182934975091, -0.730466767088727, -0.730466767088727, -1.32620299855536, 1.62090285337572, 0.379097146624279, -0.425806225475765, -1.42580622547576, 1.42580622547576, 0];
        actual = matrixUtilities.multiply([0, 1, -1, 0.730466767088727, -1, -1, -1, 0.379097146624279, 1, 0, 0.425806225475765, -1, 1], [0.632575575556874, 0.402392792237174, -1, 0.947105851931081, -1, -1, -1, -1, 1, 0, 1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, -0.939154136431941, -0.974852678354295, -0.974852678354295, 1.43977610178077, 1.96221494859188, 1.96221494859188, -0.964514012674767, -1, -1, 0.939154136431941, 0];
        actual = matrixUtilities.multiply([-1, 0, -1, 0.709442501752378, 0.773500241699396, 0.508090065097478, 0.0377850514081237, -1, 1, 1, 0, 0, 0], [0.831905604261861, -1, 1, -1, -1, 0.939154136431941, -1, -1, 1, 1, 1, 0, 0.138582824793916]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 1, 0, 0, 2, 1, 2.14312116342742, 1.48563269268984, 0.485632692689836, -1, 1, 1, 0];
        actual = matrixUtilities.multiply([0, 0, 1, 0, -1, 1, 1, 0.514367307310164, 1, 0, -1, 0, 0], [-1, 1, 1, 0.628753856117257, 1, 1, 1, -1, -1, 1, 1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -1.23328152170092, -1.68586602792417, -0.794120552853737, 0.00925366953446235, 0.0739273980352938, -0.134657110150278, 0, 0.271833599196071, 0, 1, 1, -0.341419637827864];
        actual = matrixUtilities.multiply([1, -1, 1, 0.205879447146263, 0.00925366953446235, -1, 0.865342889849722, 0, -1, 0, 1, 0, -1], [1, 0.233281521700919, 1, 1, 0, 0.31413397207583, 0, 1, 1, 1, 0, 0, 0.341419637827864]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.64454267064321, 0.71949158875248, 0.308998925289604, 1.34677783043439, 1.34677783043439, 0.519803839046417, 1, 1.71949158875248, -0.480196160953583, 1.08441583164242, 1.8039074203949, -0.956120326635975, 0];
        actual = matrixUtilities.multiply([1, 0, 1, 0, 0.346777830434394, 1, 1, 0, 1, 1, 1, 0.084415831642419, 1], [0.64454267064321, -1, 0.789195086243188, 0, 0.71949158875248, -1, 1, 1, 0, 1, 1, 0.519803839046417, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-3, -0.604025362806407, -2, 0.0724482938782935, -0.51835245150996, 0.280427978199042, -0.860233527077471, -0.604025362806407, 0.540998653294984, -1.67153574790411, -0.275561110710521, -0.671535747904114, -1];
        actual = matrixUtilities.multiply([1, 1, 0, 0, 0, 0.51835245150996, 1, 0, 1, 1, 0.671535747904114, 0, 1], [-1, 0, -1, -1, 0.395974637193593, 0, -1, -1, -1, 0.139766472922529, -1, 0.540998653294984, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0940551869205935, 0.468108225015375, -0.659499309332808, 0.278424653927429, 0.45081225291398, -1.17540709961923, 0.57519681716995, -0.881358530431185, 1.56921114892196, -0.417976020451926, 1.10974853072023, -2.3984984645613, 0];
        actual = matrixUtilities.multiply([0.967871869899273, 0.191519823945835, 0.201551324316092, 1, 0, 0.175407099619232, 0.430788851078036, -1, -1, 0.3984984645613, 1, 1, 1], [0, 0, 0.701443708828391, 0.189585435292491, 0.275405153294748, -1, -1, 0, -1, 0.506474474680831, 1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0531550888219638, -1.40882868851015, -0.266428161070881, -0.672906771149908, 1.12178000927875, -0.369208377492245, -0.202593806759731, 0.0626826452854813, -0.202593806759731, 0, 0, 0, 1];
        actual = matrixUtilities.multiply([0, -1, -1, 1, 0.369208377492245, 1, 0, 0.202593806759731, 0, 0, 0, 0, -1], [0.250543304835699, 1, 0.266428161070881, -1, 0.908118626991342, -1, -1, 0.309400599593949, -1, 0.696301606342337, 0.0994280889161993, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.274117741395774, -0.725882258604226, -1.72588225860423, -0.0397183690405071, 1.98037627059053, 1.96028163095949, 1, -1, 1, 1, 1, 1, 0];
        actual = matrixUtilities.multiply([-1, 0, 0.725882258604226, 0.960281630959493, 0.980376270590525, -1, 1, -1, 0, 1, 1, 0, 0], [0, -1, 0.298414817684523, 1, 0, 1, 0, 1, 0, 1, -1, -1, 0.805746646041864]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, 0, 1.13830113277691, -0.776334728941477, 0.965124691820296, -0.188789962878819, -0.975427146989585, 0.182620499368115, -1.18262049936811, 1.62695831777463, 0.105641068939884, -0.462888486433257, -1];
        actual = matrixUtilities.multiply([0, -1, 1, 0, 0.965124691820296, 0.776334728941477, -1, 0.182620499368115, 0, 0.642752582506627, 0.105641068939884, -1, -1], [1, -1, 0.861698867223085, 0.975427146989585, 0, 1, 0, 1, -1, -1, 0, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.58126457073217, 1, 0.892338096114033, -1, -0.657126199760067, 0.342873800239933, 1.62962571933382, -1, -1.94954752966275, 0, 0, 0, -1];
        actual = matrixUtilities.multiply([0.107661903885967, 0, 0.457408471711636, -1, 0.657126199760067, 0, 0.949547529662749, 1, 1, 0, 0, 0, -1], [1, -1, -1, 1, 0, -1, 0, -1, -1, 0.680078189671076, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.28023925966877, 1.5025785358169, 0.653323459796767, 1.54552542375518, 1.61271627229299, -0.381813297691668, 2.89033937635382, 3, -0.769097025398676, -0.890339376353817, -1, 1.23090297460132, 0.172261806102723];
        actual = matrixUtilities.multiply([-1, 0, 1, 0, 0.612716272292992, 1, -1, 1, 1, 1, -1, 1, 0.497421464183098], [0.563383930625107, -1, 0.849220461141886, -1, -1, 0, 0.890339376353817, 1, -1, 1, 1, 0.230902974601324, 0.346309555390063]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.18265672548798, -0.31593907592629, 1.1139025681212, 0.945612316460168, 0.945612316460168, 1.05438768353983, 0.197670347614992, 1.3309526980533, 0.197670347614992, -1, 0.133282350438313, 1, 0.106950914493109];
        actual = matrixUtilities.multiply([1, -1, 1, 0.0543876835398319, 0, 1, -1, 1, 0.197670347614992, 0, 1, 0, 0.182656725487978], [1, -1, 0.623588142275618, -1, -1, 1, -1, 0.133282350438313, 1, 1, 1, 1, 0.585529573068735]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.286552299413156, 0.0461640167265032, 0.690934419022377, -2, -1, 2, -0.912303039297603, -0.421452897797084, -0.490850141500519, 0, -1.30733097126117, -1.69266902873883, 1];
        actual = matrixUtilities.multiply([0, 0.309065580977623, 0.0225132815644673, -1, -1, 1, 0.490850141500519, 0, 0.912303039297603, 0.692669028738825, 1, 1, 1], [0, 0.377742879268594, 1, 0, 1, -1, 1, -1, -1, -1, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.225800437492226, 0.890320110549368, -1.00262177875388, -1, -3, 0, 0.691806583987459, 0.702611239954183, -1.68100192802074, 1, 1, 0, 0];
        actual = matrixUtilities.multiply([0, 0.00262177875387565, 0, 1, -1, -1, 0.989195344033276, 0.691806583987459, 1, -1, 1, -1, 1], [0.22317865873835, 0.887698331795492, -1, 0, -1, -1, 1, 1, -1, 0, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.555570477828556, -0.700229616696122, 0.652451485699253, -0.0924052098264943, 0.995442857548158, -1.93925197978469, -0.0924052098264943, 1.00667227385876, -2, -0.857816241149705, -0.778337728960352, 0.439578905440671, 0];
        actual = matrixUtilities.multiply([0, -1, 1, -1, 1, 0.939251979784692, -1, 1, 1, 0.0497785490238008, -1, 0.560421094559329, 0.652451485699253], [0.5395409774685, 0, 1, 1, 0.0632621092085084, 0, 0.907594790173506, 0.885081999881697, -1, 0, 0.184852383185575, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.730128906541564, -1.68982061744055, -1.36360274877567, -0.240491550686009, 1.97861124434444, 0.285479597563886, 1, -1, -1.11727714823432, -0.267191335967699, 1.42580084196562, 0.215144044258724, 0.298215151852146];
        actual = matrixUtilities.multiply([-1, 0.570727173039097, -1, 0.978611244344437, 0, 1, 0, 0.884808902109419, -1, 0.652330385824819, 0, 0.773470456140801, 0.506237349708675], [1, 0.612715325603595, -1, 0.776108443167111, 1, 0.0541699799029948, 0, 0, -1, -1, 1, 0.232468246124903, 0.589081686730069]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 0, -0.419862139699916, 0.123708258440582, 0.876291741559418, 0.876291741559418, -1, 1, 1, 0.273733617865356, 0.726266382134644, 0.726266382134644, 1];
        actual = matrixUtilities.multiply([0, 0, 0, 0.876291741559418, 1, 1, 1, 0, 1, 0.726266382134644, 1, 0, -1], [1, 0, 0.419862139699916, -1, 1, 1, 1, 0, 0, 0, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [3, -1, 0, -0.160755130537206, 0.160755130537206, 0, -0.661289971164097, 0.661289971164097, 0, 1, 1, 2, -0.06058747836416];
        actual = matrixUtilities.multiply([-1, 0, -1, 0.160755130537206, 0, 0, 0.661289971164097, 0, 0, -1, -1, 1, -1], [-1, -1, -1, -1, 1, 0, -1, -1, -1, -1, 1, 1, 0.06058747836416]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.209563526889713, 0.772512661652878, -0.292909094241742, 1, 0.810681885485855, 1, 0.216606122005717, 0.252306359923353, 0.0495143316934371, 0.890825052694802, 0.810681885485855, 0.0778841073987466, 1];
        actual = matrixUtilities.multiply([1, 0.766813489965542, 0, 0, 0, 1, 0.242542007119647, 0.303662179644994, 0.0120446169804989, 0, -1, 1, -1], [1, 0.227487338347122, 0, 0.706719650750384, 1, -1, 0.109174947305198, 0, 0.922115892601253, 1, 0.810681885485855, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.978678153352196, -1.19178741247942, -1, 1.61169511899897, 0.493312076615803, 1.63301696564677, 1.9786781533522, -0.191787412479421, 2, 1.18962677200686, -0.806241948532985, 1.19375805146702, 0];
        actual = matrixUtilities.multiply([-1, -1, 0, 1, 0.658693084334346, 0.63301696564677, 1, -1, 1, 0.193758051467015, 0, 1, 0], [0, -1, 0.559627671055322, 0.978678153352196, 1, 1, 0, 0.191787412479421, 0, 1, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.394342954454172, 1.02117227717357, -0.454439191824961, -0.188886601565819, -0.489116660547031, 0, 0.721640074752569, -0.889690733929021, 0.889690733929021, 0.367413960970168, -0.452974838881276, 0.452974838881276, -1];
        actual = matrixUtilities.multiply([0.58322955601999, -1, -1, 0, 1, 1, 0, 0.889690733929021, 0, 0, 0.452974838881276, 0, 1], [0, 0.532055616626542, 0.128790364195029, -1, 0, -1, 0.811113398434181, -1, 1, -1, 0.510883339452969, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.22386561484256, -1.74562777241023, -1.39906989149706, 1.00914563633442, -0.295225470464316, 2.04085324287454, 0.904975468248583, -0.325225157523907, 1.90497546824858, -1, -1.74562777241023, 0, -1];
        actual = matrixUtilities.multiply([-1, 1, -1, 0.0408532428745428, 1, 1, 0, 1, 0.904975468248583, 0, 1, -1, -1], [1, 1, 0.39906989149706, 0.223865614842561, -1, 1, 0, -1, 1, 1, 0.745627772410227, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.44973588942072, 2.00990643161937, -0.440127025097668, 0.0621078587426375, -1, 2, 0.0621078587426375, -2, 1.92828327693431, 0.465082805831214, 0.788039163121972, -0.439365320740156, 0.426908732275373];
        actual = matrixUtilities.multiply([-1, 1, -1, -1, 0, 1, -1, -1, 1, 0.495880907166694, 0.788039163121972, 0, 0.511843748163359], [-1, 0.0193544058219317, -1, 0.937892141257363, 0, -1, 0, 1, 0.0717167230656914, 1, -1, 1, 0.834060655829525]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.198985965083812, 1.42135637785371, 1, 0, 0, 0, 0.72360664871246, 0.903363258532883, 0.903363258532883, 0, 0, 0, 0];
        actual = matrixUtilities.multiply([1, 1, 0.217970186014646, 0, 0, -1, 0.903363258532883, 0, -1, 0, 0, -1, 0], [0, 0.447922853030228, -1, 0.801014034916188, 1, 1, -1, 0.421356377853712, 0, 0, 0, 0, 0.197655611763548]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.312358366936612, 0.301629373012869, -1.95202311219276, -0.618146817953394, -1, 0, -1.60859274799404, -1.61275182599796, 0.279767645653229, 1.05077280043384, 1.32808358796317, 0.720232354346771, 1];
        actual = matrixUtilities.multiply([0.914381199010825, -1, -1, 0, -1, 0, -1, 0, -1, 0, 0.715331761965217, 1, -1], [0, -1, 0.317409558835164, 1, 1, -1, 0.618146817953394, 1, 0, 0.608592747994043, 0.612751825997956, 0.720232354346771, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.292331441441705, -1, -2.0308077926891, 0.707668558558295, 0, 0.969192207310904, -1.36534213345253, -1.56478312451615, -1.29163738132951, 0, 0, 0, -0.0226738639281475];
        actual = matrixUtilities.multiply([1, 1, 1, 0, 1, 0, 0.564783124516151, 0.281828249470251, 1, 1, 0, -1, -1], [-1, -1, 1, -1, -1, -1, 0.707668558558295, 0, 0.969192207310904, -1, -1, -1, 0.0226738639281475]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.39025899972313, -0.820644865194636, 0, 1, -1, 0, -0.39025899972313, 0, 0, -0.566004094968671, -1.71177090737585, 0, 0];
        actual = matrixUtilities.multiply([1, 0.179355134805364, 1, -1, -1, 0, 1, 1, 1, 1, -1, 0.711770907375855, 0], [1, 1, 1, -1, 0, 0, 0, 1, 0, 0.60974100027687, -1, 0, 0.312580876197936]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.855201600052044, 0.0323191784872323, -0.855201600052044, -1.57794312461184, 0, 0, 1.00555185880771, 0, 1.00555185880771, 0.890935714771475, 0, -0.68700740984036, 0.126896680717863];
        actual = matrixUtilities.multiply([0.086241908411608, 0.941443508463653, 0, -1, 0, -1, 0.00555185880770528, -1, 0, 0.31299259015964, 0, 1, 0.276888506150287], [0, 0.116722716072911, 0, 1, 0, 1, -1, 0, -1, 0.577943124611836, 0, -1, 0.458295226776179]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.735076019027469, 1.07234384754792, -0.742778012086805, 0, 0, 0, 1.97984093147323, -0.882146075778709, 1, 1.0683758259138, -0.068375825913798, -0.695926411401446, 0];
        actual = matrixUtilities.multiply([0.3365448579828, 0.61384334909443, -1, 0, 0, 0, 0, 1, 1, -1, 0, 0.068375825913798, 0], [-1, 1, 0.344085728444199, -1, 0, 0.764302237315244, 0.979840931473226, 0.117853924221291, 0, 1, -1, 1, 0.627946681635429]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, -1, 0, -0.282875455581991, 0, 0, 0.0075850253960048, -1, 0, -2, 0, 0];
        actual = matrixUtilities.multiply([-1, -1, 1, 0.717124544418009, 0, -1, 0.0075850253960048, -1, 0, -1, 0, -1, 0], [0, 0, 0.193764320664929, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.49230623213092, -0.957304513527688, -1.20127226277861, 1, -2, 1, -0.857223411024187, 1.85722341102419, -1, 0.00930557808156984, 0.260474121319351, 0.0402956586063623, 1];
        actual = matrixUtilities.multiply([0.274805608333464, 0.521548423693305, -1, -1, 0, -1, 1, 0, 0.857223411024187, 0, 0.285804175904861, 0.260474121319351, -1], [-1, 0.232110121861151, 1, 0, 1, -1, 0.9439319721162, 0, 0.140990447318643, -1, 1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, 0.582086857213679, -3.27618025908069, 0, 0, 0, -1, -0.0888791503798585, 0, 0, 1, -1, 0];
        actual = matrixUtilities.multiply([-1, 1, 0.670966007593538, 0, 0, 0, 0, 1, -1, 0, 0, 1, 0.60521425148715], [0, 0, -1, 1, 1, 1, -1, 0.911120849620142, -1, 0, 1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -2, 1, 0.945073714454227, 3, -2, 0.621420767414289, -0.399489925428987, 0.399489925428987, -0.0549262855457731, 2, -2, 0];
        actual = matrixUtilities.multiply([0, 1, 1, 1, -1, -1, 0.114098936372483, 0, 0.51358886180147, 1, 0, -1, 0], [0.630402826997639, 0.618654835325971, -1, 0.945073714454227, 1, -1, -1, -1, 0, 1, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0.295418907680974, 0.52873803699796, -1.46317650585583, 0.499697278952085, 0, 0, -0.558724523316475, -1, 1.10699097534815, -0.11835871985749, 0.31675156406907, 0];
        actual = matrixUtilities.multiply([0, 0, 0.52873803699796, -1, -1, 0, 0, 0, -1, 0.556867071221055, 0.849063231073815, 0.0245554042163097, 0], [1, 0.894934026475499, 0.791909189332234, 0.463176505855832, -1, -1, 1, 0.500302721047915, 1, 0, 0.558724523316475, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.51403008890992, -0.884000956492499, 0, -0.844521670529862, 1.79848162308265, 0, -0.846993423756434, 1.12672942778505, 0, -0.916438673927735, 1.42914136971053, 0, -1];
        actual = matrixUtilities.multiply([-1, 1, 1, 1, 0, 1, 0.293236632502282, 0, 0.892585365517337, 0.537446770601648, 0, 1, -1], [1, 0.085519333409853, 0, 0.155478329470138, 0.798481623082646, 0, 0.641448240560223, -1, 0, -1, 1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.320332865255929, -0.671665907684558, -0.328334092315442, -1.89702370245802, -0.367898530963761, 0, 1.12663069226691, 0.537838404317311, 0.83006012664645, -1.88568905502823, 0.608622660747369, 0.0371440495537333, 0];
        actual = matrixUtilities.multiply([1, 0.328334092315442, 0, 0, -1, 1, -1, 0.16993987335355, -1, -1, -1, 0.962855950446267, 0], [-1, -1, 0.451927437191795, 0.0258094021239362, -1, 0, 0.897023702458024, 1, -1, -1, 0.632101469036239, -1, 0.969305650782448]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 0.346063636404492, 1, -0.953868182354545, -0.346063636404492, 0.973926217748749, 1.2424040829029, 0.0838872384086718, 0, -2, 0, -1, 0];
        actual = matrixUtilities.multiply([1, 1, 1, -1, 0.973926217748749, 0.927794400103295, 0.242404082902895, 0, -1, 0, -1, 1, 0], [-1, 0.0220889900913876, 0, 1, 0.346063636404492, 0, 1, 0, 1, -1, 0, 0, 0.510928513254471]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.263901700854256, 2.62481625453793, -0.189518163534588, -1, 0.437004098085685, -0.699412179039517, 0, 0, 0, -0.824099471710669, 0.191482163341746, -0.306461558819963, -1];
        actual = matrixUtilities.multiply([0.263901700854256, 1, 1, 1, 0.699412179039517, 0, 0, 0, 0, 0.824099471710669, 0.306461558819963, 0, 1], [1, 1, 0, -1, 0, 0, 0, 0.624816254537933, -1, -1, 1, 0.810481836465412, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.5709238208695, 1.0450127415358, 1.76295957330752, -1, 0, -1, 2, -0.82536372487683, 0, -0.407853604484281, 0.82536372487683, 1, 0.762959573307521];
        actual = matrixUtilities.multiply([0, 1, 0.192035752438025, 1, 0, 0, -1, -1, 0, 0, 1, 0.592146395515719, 0.762959573307521], [-1, 0.287890766881355, 1, -1, 0, -1, -1, 0.82536372487683, 1, 1, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, 0, -1.55997216913848, -1.75292754348038, 1.75292754348038, 0.852784146364909, -1, 1, 0.958173619824475, 1, -1, -0.559972169138478, -1];
        actual = matrixUtilities.multiply([-1, -1, 0, -1, 0.73594626539198, 0.752927543480381, 0, 0.665911505774554, 1, 1, -1, 0, -1], [1, 1, 1, 1, -1, 0, 0, 0, 0.559972169138478, -1, 1, 0.585281709481628, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.42737349934288, 2.42434829140209, 1.91730911437816, -1, -1, -0.738003292930314, 0, -1.74105597787586, -1.48753694374465, -1, 0.741055977875859, 0.225540236674966, 1];
        actual = matrixUtilities.multiply([0.57262650065712, 1, 0, 0, -1, 1, -1, -1, 0, 1, 0, -1, 1], [0, 1, 0.638132540340597, -1, 0.741055977875859, 0.487536943744652, 1, 1, 1, 0, 0, 0.261996707069686, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.354225964916044, -0.459868620829596, 0.226607767970584, -0.724871381552797, -0.943856370998365, 0.031724480700505, -1, -1, 0, -1.87125175719673, -1.40103359213147, -0.226607767970584, -0.255971596229808];
        actual = matrixUtilities.multiply([-1, 1, 1, 0, 0.139997322177513, -1, -1, 0, 0, -1, -1, 0, -1], [0.363870086783483, 0.860902212961066, 0, 1, 1, 0, 0.871251757196734, 0.40103359213147, 0.226607767970584, 0.846844294502793, 1, 0, 0.255971596229808]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.077115630301235, 1.0949870408955, 0, -0.201259236410847, 0.094987040895497, 0, 2, 0.0630295161614419, 1.66355910835022, -1.7517076114899, 0.020429959923951, -0.53662606214016, -1];
        actual = matrixUtilities.multiply([1, 1, 0.922884369698765, 1, 1, 0.798740763589153, 0.663559108350221, -1, 1, 0.215081549349745, 0.751707611489905, -1, -1], [0, -1, 0, 0, 0.094987040895497, 1, -1, 0, -1, 1, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 1, 1, 1, 1.80902686939064, 1, -0.246654064509391, -0.408045554723612, -0.515551529133484, 0, 0.0774312888800079, 0, -1];
        actual = matrixUtilities.multiply([0, 0, 0, -1, 0, 1, 0.515551529133484, 1, 0, 0, 0, 0.0957091683967547, -1], [-1, -1, -1, -1, -1, -1, 0.268897464624093, 0.107505974409872, 0, 0, 0.809026869390638, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.65561859992129, -1.26123857370635, 0.344381400078713, -1, 0.570194931966343, 1, -1, 1, 1, -1, 0.17581490575141, -1, 0];
        actual = matrixUtilities.multiply([-1, 0.655618599921287, 0, 0, 0, 1, 0, -1, 0, 1, 1, 1, 0], [0.194866365843856, 0, -1, -1, 0.605619973785067, -1, 1, -1, -1, -1, 0.570194931966343, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.76597267424966, -0.0647659697871497, 2.60622652354008, -1.31408529976107, 0.387121404701435, 2.49236413300613, 1.24975462839677, -0.387121404701435, -2.4178438961589, 0.685914700238926, 0, 0, -0.451887374488584];
        actual = matrixUtilities.multiply([1, -1, -1, 1, -1, -1, -1, 0.985144558821407, 0.94033520433136, 0, -1, 1, 0.451887374488584], [-1, -1, 0.251970727579655, 0, 0.387121404701435, 0.492364133006131, 0.314085299761074, 0, -1, 1, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.945072045833815, 1.798229275643, 1.17034918878072, -1, 1, 1, 0.272229553327071, -1, 0.844271087015174, 1, 0, -1, 0];
        actual = matrixUtilities.multiply([-1, 0.201770724356999, 1, 0, 0, 1, 0, 1, 0, -1, 0, -1, 0], [0, 1, 0.166118841229993, 0, -1, 0, 0.272229553327071, -1, 0.844271087015174, -1, 1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.52031375259176, -1.20463151447691, 0.338999908575323, 0.68431776188515, 1, 0.837543699349064, -0.31568223811485, 0, -2.16245630065094, -0.31568223811485, 0, -2.16245630065094, -1];
        actual = matrixUtilities.multiply([-1, 0.851587652625324, 0.353043861851582, -1, -1, 0, -1, 1, -1, -1, 1, -1, -1], [1, 0, -1, 0.31568223811485, 0, 0.162456300650936, -1, -1, -1, -1, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.02539402527054, 1, 0, -0.390350885405369, 1.33646445718862, 1.39035088540537, 0.812652744265577, -1.04930112792612, -1.18734725573442, -0.95585495557443, 0.223826896037826, 0.361873023846128, -1];
        actual = matrixUtilities.multiply([-1, 0.97670756419036, 0, -1, -1, 0.390350885405369, 0.187347255734423, 0, -1, 0.638126976153872, 0.682272020579442, 1, 1], [0.0486864610801854, 0, -1, -1, -1, -1, 1, 0, 0, -1, 0.861953872191698, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.4140868552783, -0.326450301951938, -0.187821981118909, 0.419764970522733, 0.28631314959313, -0.580933070546451, 0.206634319949259, 0.674606616457275, 1, 0.369605832905325, 1, -2, -0.224779120751088];
        actual = matrixUtilities.multiply([1, 0.187821981118909, 0, 0, 0.144204592399394, 0.436728478147056, 1, 1, -1, -1, 1, 0, -1], [-1, 0.514272283070847, 1, 0.290167012387033, 0, 1, 0.659772845292358, 1, -1, 0.743305537730132, 0.325393383542725, -1, 0.224779120751088]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.43590691799107, 0.925340436102199, -0.730962844842875, 0, -2, -0.580463245315693, 0.31672930685651, 0.372853429695989, -0.770521021341216, -0.0279181185308462, 1.430775782294, 1, 0];
        actual = matrixUtilities.multiply([0, 0.918729188814168, 1, -1, -1, 0.580463245315693, 0.344791368276249, 0.0280620614197394, 0.770521021341216, 0.701428831881578, 0.729346950412424, -1, 0.517177729176906], [-1, 0.012783317832641, 0.52020251449207, 1, 1, 0, -1, 1, 0, 0, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 0, 0.68847043822557, 0, 0, 0.177336537827429, -1, -1, -1.84019561477015, 0, 0, -0.106351715562098, -0.209144435920354];
        actual = matrixUtilities.multiply([-1, 0.425139590830141, 0, 0.70970376707134, 1, 0, 0, -1, -1, 0.106351715562098, 0, 0, -1], [1, 0, 0.688645514048937, 0, 0, -1, 0, 0, 0.887040304898769, 1, 1, 0.953155309871377, 0.209144435920354]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.93007312292702, 1.87768088694554, -1, 1.84807507826391, 2, 1, 0.918001955336892, 1.12231911305446, 2, -1.71196952588482, -1.86389444762091, -1, 0];
        actual = matrixUtilities.multiply([-1, 0, 1, -1, 1, 0, -1, 1, -1, 0.863894447620909, -1, 0, 0], [0, -1, 1, -1, -1, 0, 0.848075078263914, 1, 1, 0.930073122927022, 0.877680886945539, -1, 0.306598439024109]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.981763639478834, -1.53652370351186, -0.120292543434929, -1.13961887645517, 0.890663044476259, 1.56662950039219, -0.14748719686706, 1.88151788752597, 0.566629500392186, 0.751170920308166, 1.68684608783071, -0.730600317043035, -1];
        actual = matrixUtilities.multiply([0.235494070330399, 0, 0.746269569148435, 1, 1, 1, 1, 0.990854843049708, 0, 0.475442388316357, 0.263387122779799, -1, 1], [0, -1, -1, -1, 0.890663044476259, 0.566629500392186, 0.860381123544826, 1, 0, -1, -1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 1, 0.694038092947583, 1.15612537112021, 0.289033470809941, -0.766569782259001, -0.480243639312798, -1, 1, 0.896179033860648, 0, -0.429321494619046, -0.9625020376232];
        actual = matrixUtilities.multiply([0, 0, -1, 1, 0.0600700625498174, 0.650896466640242, -1, 0, 0, 1, 1, 0, -1], [0, 0, -1, 0.480243639312798, 1, -1, 0.41593539454785, -1, 0.570678505380954, 1, -1, 0.305961907052417, 0.9625020376232]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -0.804268076459071, -0.580613377308759, 1.31053513209826, 0.0111561520203017, 1.13620954829821, 1.76388415636676, -0.83174414645496, -0.156683810903231, -2, 0.83174414645496, -0.0339252660208965, 0];
        actual = matrixUtilities.multiply([-1, 1, -1, 0, 0.406031576639987, 0.904503555458274, -1, 0, 0.763884156366756, 1, 0, -1, 0], [0.359942944422338, 0.369420848027533, 0, -1, 0.83174414645496, 0.773344055643931, 1, 0.0274760699958895, 1, 1, 0, 0.807269321664828, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.63575348483214, 1, 0.105369399121386, 0, 1, 0, -1.91423489941016, 0, -1.15152474080749, -0.914234899410156, 0, -0.151524740807491, 0];
        actual = matrixUtilities.multiply([-1, 0.695394023179726, 0, -1, 0, 0, -1, -1, -1, 0, -1, 0, 0], [-1, 1, 0, 0, -1, 0, 0.914234899410156, 0, 0.151524740807491, 1, 1, 1, 0.107994801415128]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 2, -1, -3, -2, 0, -2.84350461132988, -1.84350461132988, -0.156495388670124, 0, -1, 1, 0.744735766549006];
        actual = matrixUtilities.multiply([-1, -1, -1, 1, 1, -1, 1, 0.843504611329876, -1, 1, 0, 1, 1], [0, 0, 1, -1, -1, 0, -1, -1, 1, 1, 0, 1, 0.744735766549006]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.623411822423065, -0.376588177576935, -1.90404503368961, 0, 0, 0, -0.0632717912379986, 1, -1.936728208762, 2, 0, 1, -0.519005317482634];
        actual = matrixUtilities.multiply([0, 1, 0.623411822423065, 0, 0, 0, 0, 0.936728208762001, 1, -1, 0, -1, -1], [1, 1, 0.280633211266544, -1, -1, 0, 1, 0, -1, -1, 1, -1, 0.519005317482634]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, 0.419383800318178, 0.920130864679874, -0.920130864679874, -0.875331571733268, -2, 2, 1.47042565573063, -1.80420306781503, 1.80420306781503, 1.37503042568561, 0];
        actual = matrixUtilities.multiply([1, -1, 0, 0, 1, 0.920130864679874, 1, 0.139345111390271, -1, 0.804203067815026, 0.0386827099317139, -1, -1], [-1, 1, 0, -1, 1, 0.464183093264784, 0, 0, 0.0447992929466065, 1, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.995954629497581, 0, 0, -1.99595462949758, 0, -0.984728374977004, 1.32167088208798, 0, 0.225446610000674, -0.718284254202727, 0, -0.880519816764019, 0];
        actual = matrixUtilities.multiply([0, -1, 0, -1, -1, -1, -1, 1, 0.325716252590397, 0.449712592852168, 0.282860019375971, -1, 0], [0, -1, 0.531580528026251, 0, 0, 0.0718822190872776, 0.995954629497581, 0, 0, 1, 0, 0.912846155889726, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.616454470724079, 1.38354552927592, -1, 1.11942630872104, -0.424794970743728, -0.758840542174336, -2, -2, -1, 1.48148176282713, 0, -1, 0.146515093812028];
        actual = matrixUtilities.multiply([0.383545529275921, 0, -1, 0.334045571430607, 0.758840542174336, 0.785380737290429, -1, 1, -1, 1, 1, 0.481481762827133, 1], [0, 1, -1, 1, 1, 0, 0, -1, -1, 1, 0, 0, 0.146515093812028]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.388135021267522, 3, 0, 0.372874692697243, -0.0393170616772571, -1.96068293832274, -1, 0, 1, -0.611864978732478, 2, 1, -1];
        actual = matrixUtilities.multiply([1, -1, -1, 0.960682938322743, 0, 1, 0, 1, 0, 1, 1, -1, 1], [-1, 1, 1, 0.388135021267522, 1, -1, -1, 0, 1, 0, -1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.975994015199874, 0.857963874404302, 0.857963874404302, -1.12914353102871, -1.48947993735293, 0.0660273935953283, 0.870856468971286, 0.555507330948258, -1, -1.12914353102871, -0.555507330948258, 1, -1];
        actual = matrixUtilities.multiply([0.185886080463364, 0, 0.142036125595698, -1, -1, 0.933972606404672, -1, 1, 0, -1, -1, 0, 1], [-1, 1, 1, 0.129143531028714, 0, 0, 1, 0.555507330948258, -1, 0, -1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.503780468601631, 1.94612913622806, -1.16372876854787, 0.197890815417231, -1.61663165484398, 0.0126854908252128, 0.496219531398369, 0, -0.163728768547871, 1.49621953139837, 1, 0.163728768547871, 1];
        actual = matrixUtilities.multiply([-1, 1, -1, 0.0774786919716181, -1, 0.6941103468156, -1, 1, 0, 1, 1, 1, 1], [0, 0.946129136228063, -1, 0, 1, 0.163728768547871, 0.496219531398369, 1, 0, 1, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -0.921998801139183, -0.770135471243421, -2, -1, 2, 1, 0, -1, 0, -1, 0, 0];
        actual = matrixUtilities.multiply([1, 0, -1, 0, 1, 1, 0, 0, -1, 0, 1, -1, 0.921998801139183], [0, -1, 0.24931109289141, 0, 0, 0, -1, -1, 1, -1, 0, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, -0.777958382283318, 3, -1, 1.77795838228332, 0, 0.718835860359872, -0.937569859590387, -1, 2, -1.22204161771668, 1, -0.824432559695296];
        actual = matrixUtilities.multiply([1, 1, 1, -1, 1, -1, 0, -1, 0.281164139640128, 1, 0, -1, -1], [1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 0.222041617716682, 0, 0.824432559695296]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.440862704739376, 1.11183765256397, 2, 1.39712619054929, 0.26056785893653, 2, 0.65549702421641, 0.148730206372556, -0.217773615018359, 0.358314559339839, 0.178009448141119, 0.566683399754895, 1];
        actual = matrixUtilities.multiply([-1, 0, 1, 0, 1, 1, 1, 0.782226384981641, 0, 0.0741512617441599, 0, 0.640834661499054, 1], [-1, 1, 0, 0, 0.148730206372556, -1, 0.837988895288663, 0, 1, 0.559137295260624, 0.26056785893653, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.977973517020221, 0.848480454850904, 2.54271075294479, 0.714746950992731, 0, -0.911321184350138, -2, -0.511550764325797, -0.689122286480443, 1, 0.511550764325797, 1.68912228648044, -0.87561494944413];
        actual = matrixUtilities.multiply([1, -1, 0.977973517020221, -1, 0.285253049007269, 0, 0, 1, -1, 1, -1, 1, 0.87561494944413], [0, 0.397660358528448, 1, -1, 0, 1, -1, 0, 0.310877713519557, 1, 0.511550764325797, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.07962320888397, 0, 1.21765866606387, -0.0796232088839743, 1, -0.3849529094924, -1, -1, 0.167294243428528, -0.426789184299665, -0.373960868629609, 1.16729424342853, -1];
        actual = matrixUtilities.multiply([1, 0, -1, -1, 0, 0, 0, 0, 1, 0, 1, 1, -1], [-1, 0, -1, 0.0796232088839743, -1, 0.3849529094924, 0.573210815700335, 0.626039131370391, 1, -1, -1, 0.167294243428528, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.68453319169792, -1.56716772094071, 1.90613166976105, -1, -0.256398201530811, 0.979696732004963, -0.762237962224632, -0.708489651021947, 0.725837529759952, -0.16107636511376, -1.43280126267709, 0.111584180260229, 0];
        actual = matrixUtilities.multiply([0.68453319169792, 0.431927555441823, -1, 1, 0.810362106566486, 0.523406238073207, 0.762237962224632, 0.197804145607075, 0, 0.16107636511376, -1, -1, 0], [1, -1, 0, -1, -1, 0.692740863511684, 0, 0.271724897563329, 1, 0, 1, -1, 0.607123098153213]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.169808585900718, -1.31051401389321, 1.31051401389321, -1.22091645990541, 1.99813190381887, -1.99813190381887, -1.22091645990541, 1, -1, 0.546862873503409, -2, 2, 0];
        actual = matrixUtilities.multiply([-1, 0, 0.31051401389321, 0.99813190381887, -1, -1, 0, -1, -1, -1, 0, 1, 0], [-1, 0.437963930162584, -1, 0, 1, -1, 0.674053586402002, 0, 0, 0.546862873503409, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.942445840194098, -0.682460098845167, 0.882711150628846, -0.0930248364308033, -2, -1.11728884937115, 0.0900924889326207, 1.1082276427691, 0.253341489565429, 1.00248808656259, 0.0267464760815475, 0.00313706340433781, -1];
        actual = matrixUtilities.multiply([-1, 1, 0, -1, -1, 0, 0.968477800008132, 0.139749842760968, 0, 0.0267464760815475, 0, -1, -1], [0.849421003763294, 0.682460098845167, 0, 0.0930248364308033, 1, 0.117288849371154, 0, 1, 1, -1, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.448197793424222, 0.363519754347846, 0.370421785988905, 1.04975901173882, 1.77071189481963, 0.91898866420499, -1, 0.811069933143943, 0.826469454833525, -2.64730711032045, -0.188930066856057, 0.387268169150406, 1];
        actual = matrixUtilities.multiply([0.448197793424222, 0, 0, 0.950240988261179, 1, -1, 1, 0, 0, 1, -1, 0.647307110320454, 1], [0, 0, 0, -1, 0.811069933143943, 0.826469454833525, 1, 1, 1, -1, 0, 0.866356487323696, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.995067891662506, 2, 0.0110273943334014, 1.87139016570122, 1, -1.9889726056666, 0.681534974328699, 0, 0.0535972146566944, 0.315240994786961, 1.21539549306752, 0.0110273943334014, 0];
        actual = matrixUtilities.multiply([1, -1, -1, 0, 1, -1, 1, 0.935375391009904, 1, 0.21539549306752, -1, -1, 0], [0, 1, 1, 0.866458057363731, 1, 0, 0.871390165701225, 0, -1, -1, -1, 0.988972605666599, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.733518820585663, 0.625997355359418, 0.063016341612331, 0.770922150356193, -0.0157722798249555, 0.435172265132504, -1.85650835506395, -0.746028789696513, -1.85131903229388, -2.77092215035619, -1.6550050511281, -2.20792494397979, 0.182901306628669];
        actual = matrixUtilities.multiply([0.763768717070934, 0, 0.000328883063201272, 1, -1, 1, 0.109026463287429, -1, -1, -1, -1, -1, 0.182901306628669], [0.565690147488234, 0, -1, 0.824519365012888, 0.819616385651574, 0.321548604556149, 1, 0.835388665476529, 0.886376339423645, 0.946402785343306, 0, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.116648333700607, -1.30610228763246, 1.77228381287879, 0.738072412432205, -0.466181525246325, -2, 0.423097358570745, 0.493844886074702, -0.493844886074702, 1.27524367794936, 1.67912158057723, -1.19058512625777, 1];
        actual = matrixUtilities.multiply([0, 0.227716187121214, -1, -1, 0, 1, 0, 0.493844886074702, 0, 0.376435496553981, 1, 0.567020622811755, 1], [0.659626861410042, -1, 1, 0, 1, 1, 0.856741398971873, 1, -1, 0.738072412432205, 0.533818474753675, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.930844666404111, 0.118836526296004, 1.06915533359589, 1.56223240520909, -0.580437470844941, 0.437767594790909, 0, -1, 2, -2, 0.153172752425621, 0, -1];
        actual = matrixUtilities.multiply([1, 0.140331486305376, 0.790513180098735, 1, 0.495452325556172, 0.0667800796529185, 1, 0, -1, -1, -1, 0, 1], [-1, 1, 1, 1, -1, 1, 1, 0.846827247574379, -1, 1, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.479287770799961, 0.985687715926062, 1, -0.0311712110560253, -0.6376783757646, 0, 0, 1.62336609169066, 0, -0.992710482526262, -0.474242348811178, 1, 1];
        actual = matrixUtilities.multiply([1, 1, -1, 0, 0, -1, 1, 1, 0, -1, 0, 0.233854163081317, -1], [0.448116559743935, 0, -1, 1, 0.623366091690662, -1, -1, 1, 1, 0.0311712110560253, 0.6376783757646, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, 1, 0, 0, -0.891727490300186, 0, 0, -0.530707425684998, 0, -0.281346366406114, 1.06205180332695, 0];
        actual = matrixUtilities.multiply([0, 0, -1, 0, 0, 0.891727490300186, 0, 0, 0.530707425684998, -1, 0.200778401550268, -1, 0], [-1, 1, 1, 0, 0.080567964855846, 0, 0, -1, 0.309056167634696, 0, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -0.626783884887949, 1, 0, 0.626783884887949, 0, -0.706818907850803, 0, -0.706818907850803, -0.0405555879886056, 0.505931654963078, 0.00671073654979037, 0];
        actual = matrixUtilities.multiply([0, -1, 0, 0, 1, -1, 0, 0, 0.706818907850803, 1, 0.807186762712517, 0, 0], [-1, 0.518262873645063, 0, 0.766631174723912, 0, 0.813897499262308, -1, 0.626783884887949, -1, -1, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0711487764823944, 0, 0.594902746656399, -0.935081508905288, 0.103728754494213, -0.896271245505787, -1, 0, -1, -0.374151445168141, 1, 0, 0];
        actual = matrixUtilities.multiply([1, 1, 0.554699778349465, 1, 0.103728754494213, 1, 1, 0, 1, 1, 1, 1, 1], [0, -1, 0.149602525005863, 0, 0, 0, 0.625848554831859, 1, 1, -1, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.839629095904356, 1.72251804160071, -0.250876026810555, 2, 0.277481958399286, -1.25087602681055, -1.33222582672361, -0.139854091382426, 0.846187637139082, 3, 1.27748195839929, -0.250876026810555, 1];
        actual = matrixUtilities.multiply([1, 0, -1, -1, 0, -1, 0.692225977635116, 0.00527547067276923, 0.634724378415721, -1, -1, -1, 1], [0.839629095904356, 0, -1, -1, 0.722518041600714, 1, -1, -1, -1, -1, -1, 0.250876026810555, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.978929044668995, 1.10631362761602, 0, -0.931836556611507, 1.04176893125508, -1, -2.86247380071435, -0.750302332337155, 0.137526199285652, -1, -0.612776133051503, 0, 0.504750352122239];
        actual = matrixUtilities.multiply([0, 0, 0.978929044668995, 0, 1, 0.0681634433884935, -1, 0.862473800714348, -1, 0, 0, -1, 1], [0, 0.50644927309195, 0, 1, 1, -1, -1, 1, -1, 1, 0.612776133051503, 0, 0.504750352122239]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.217120559521541, 1, 0.0199959012772869, 0.217120559521541, 1, 0.0199959012772869, -0.217120559521541, -1, -0.0199959012772869, -1.50873985677433, 0, 0.0460362895606254, 0];
        actual = matrixUtilities.multiply([0, 0, 1, 0, 0, 1, 0, 0, -1, -1, -1, 0, 0], [1, 1, 0.103140578187602, 1, 1, 0.953963710439375, 0.508739856774332, -1, -1, 0.217120559521541, 1, 0.0199959012772869, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.900645140977877, 0.916207142315718, -0.301002315496816, 1, 0.215364292829933, 0.8500228928635, 0.9444329235444, 0.129718595402396, 0.511987267124207, 1.08561281351634, 0.538981531476982, -0.171225103437324, 0];
        actual = matrixUtilities.multiply([1, 0.900645140977877, 0, 0, 1, 0, 0, 0.602321739123353, 0.342111184421047, 0.591355302646456, 0.494257510869884, 0, -1], [1, 0.0091915270356422, 0.0665713036742859, 1, 0.731431865473945, -1, 1, 0.215364292829933, 0.8500228928635, 1, 0, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.875960724836197, 0.193275897853671, 0.441354448181276, 0.183847818609256, -0.629197761709428, -0.757410810681717, 0.136269496817267, 1.94931507713595, -0.562706504744807, 0.739628236153921, 1.55267381647261, -0.166065244081461, 0.317315173017474];
        actual = matrixUtilities.multiply([0.875960724836197, 0, 1, 0.320117315426524, -1, 0, 0, 1, -1, 0.603358739336654, 1, 0, 0.317315173017474], [0, 1, 1, 1, 1, -1, 0.136269496817267, 0.949315077135952, 0.437293495255193, 0, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [3.3255006090391, -0.814765344753287, 2.26290268183821, 0.0111480574909115, 0.915631071625106, 1.66486078345443, -0.998256846330248, -2, 0.273845547187524, 0.942867167400052, 0.0897553801023193, 2.1957453605707, 0];
        actual = matrixUtilities.multiply([0.879976854138065, 1, -1, 0.981708841389841, 0.0660777697647353, 1, -1, 1, 0.443780601231279, 1, 0.910244619897681, 0.462668433535224, -1], [-1, 0.694742198891352, -1, 1, 1, 1, 0.445523754901031, -1, 1, -1, 0, 0.617074172299856, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.38884642720394, 0.215502421006329, 0.0253749382800306, -0.886580893717045, 1, 1, 0, -1, -1, 0.386038230952633, 0.0838691327180104, -0.361145741008756, 1];
        actual = matrixUtilities.multiply([0.974625061719969, 0, 0.843274624479597, 0, 1, -1, 0, -1, 0, 0.445014873726766, 0.0838691327180104, 0, 1], [0.79575467379566, 0.215502421006329, 1, 0.867472648093231, 0, -1, 0, 1, 1, 0.886580893717045, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.447792971418131, 0.862751774425968, 0.930695286202385, 0.814944101010438, 0.509874156913661, 0.497450768103323, -0.434480716211014, 0.993052834176017, 0.893141494144339, 0.572466449612969, 2, 0.65880617343765, 0];
        actual = matrixUtilities.multiply([0.9705876945381, 0, 0.107835920112131, 0.509874156913661, 0.523058252652668, 0, 1, -1, 0.00694716582398264, 1, -1, -1, 0], [0.616876045063546, -1, 1, 0.572466449612969, 1, 0.933042803282404, 1, 0, 0.041518043746016, -1, -1, 0.232718586098737, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -1, -1.09724338170944, -0.577374314543237, -0.267332327210965, 0.545792778742403, 1.11080634550002, -0.80790512720491, 0.19209487279509, 0.307177963809659, -0.307177963809659, 0, 0];
        actual = matrixUtilities.multiply([0, 0, -1, 0, 0.732667672789035, -1, 1, 0.19209487279509, 0, 0.307177963809659, 0, 0, -1], [0, 0, 0.910368487662807, 1, -1, 0, 0.576831353631258, 1, 1, 1, 1, 0.186874894046632, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.860507302152259, 1.87530030676876, 1.64650674373704, -0.529677300494945, -1, -2.55926006453077, -0.470322699505055, 2, 1.55926006453077, 0.470322699505055, -2, -1.55926006453077, -0.963779242692412];
        actual = matrixUtilities.multiply([0.531797387419174, 0.663403323229124, 0.743694370958812, -1, -1, -1, 0, 1, 1, 0, -1, -1, -1], [1, -1, 0, 1, -1, 1, 0.529677300494945, 1, 0.559260064530773, -1, 1, 1, 0.963779242692412]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.836257546598212, 1.6180108597586, -1.99772517802088, 0.469996295622548, -1.53000370437745, -0.469996295622548, 2, 0, -2, -1, -2, 1, -0.0261056530410916];
        actual = matrixUtilities.multiply([0, -1, 0.381989140241402, 1, 0.530003704377452, 1, 1, -1, 1, 0, 1, 1, -1], [0.163742453401788, -1, 0.997725178020878, 1, 0, -1, -1, -1, 1, 0, -1, 0, 0.0261056530410916]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.569823323083028, 1, -1.29425235711702, -1.7556518420729, -0.353698291980521, -2.56801814472676, 0.818299640816776, 1.35773931529, -0.611877036100196, 1.72571157185627, 1.27239937028611, 0.295534894939295, 0];
        actual = matrixUtilities.multiply([0, 1, 0, -1, 0.568018144726762, -1, 0.388122963899804, 1, 0, 0.295534894939295, 1, 1, -1], [1, 0, 0.294252357117018, 1, 0.921716436707283, 1, 0.430176676916972, 1, -1, 1, 0, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.71726385583974, 0.100462801431085, -0.807703044175963, -1, -0.124578679038481, 1, -1.20826249439654, 0.0967782011216583, -0.77684401430974, 0.714095256623856, 0, 0, 0];
        actual = matrixUtilities.multiply([-1, -1, 0.806420506353686, -1, 1, -1, 0.391721433210988, 0.823139913297789, 0.77684401430974, 1, 0.285904743376144, 0, -1], [0.910843349486051, 0, 0.00128253782227754, 1, 0, 0, -1, 0, 0, -1, 0.124578679038481, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.348938810335909, 1.65106118966409, 0.651061189664091, 0.19530745511656, 0.19530745511656, 0.19530745511656, 0, 0, 0, 0.516178434489378, 0.516178434489378, 0.516178434489378, -0.866000664823689];
        actual = matrixUtilities.multiply([0, -1, 0.651061189664091, 0.80469254488344, -1, 1, 0, 1, 0, 0.483821565510622, -1, 1, -1], [1, -1, 0, -1, -1, -1, 0, 0, 0, 1, 1, 1, 0.866000664823689]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -0.831594671975633, -1.79034535530505, 1, 1.16840532802437, 0, 0.376303794037692, 0.820072131147642, -0.179927868852358, -0.55623166289005, -0.997108211241258, -0.0171715989788862, 1];
        actual = matrixUtilities.multiply([0, 0, 1, 1, 0, 1, 0.820072131147642, -1, 0, -1, 1, 0.0171715989788862, -1], [1, 1, 0.79034535530505, 1, 1, 1, 0.44376833710995, 0, 1, 0, 0.168405328024368, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.094082001044076, -0.784772169813134, -0.288235602103283, 0.978438358278218, 0.938635185797995, 0.0215616417217821, 0.293761827654094, 1.028110519786, -1.70623817234591, 0.398863459191687, 0.398863459191687, -0.398863459191687, 0];
        actual = matrixUtilities.multiply([0.201210342441318, 0.0870252596619657, 0.76113335451164, 0.978438358278218, -1, 1, 1, 0.706238172345906, 0, 0.398863459191687, 0, 0, 0.989446393674913], [0.558763237930258, -1, 0, 1, 1, -1, -1, 0.0398031724802233, -1, -1, 0, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, 0.433830584135759, 1, 0, 0.216393060617332, -1, -2, -1.65022364475309, 1, -1, -1, -0.668474740660039];
        actual = matrixUtilities.multiply([0, 0, 1, 0, 1, 0, 1, -1, -1, 1, 0, 0, -1], [1, 1, 0, 1, -1, -1, 1, 0, 0.216393060617332, 1, 1, 0.433830584135759, 0.668474740660039]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -1, 0.024624519061588, -0.420109710386074, 1, 1.97537548093841, 0.324817141427228, -0.773172181925351, 0.202203299013061, 1.42010971038607, 0, 0, -1];
        actual = matrixUtilities.multiply([1, 0, 1, -1, -1, -1, -1, 0.773172181925351, -1, -1, 1, 0, 1], [-1, -1, 1, -1, -1, -1, 0.420109710386074, -1, -1, 1, 1, 0.024624519061588, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.57064088069015, 0.513067719609684, 0.91662272294826, 1.46841422164273, 0.559737072586891, 1, 2.46841422164273, 0.559737072586891, 1, -0.0548136923717399, -0.559737072586891, -1, 0];
        actual = matrixUtilities.multiply([1, 0.91662272294826, 0, 0, 1, -1, -1, 1, -1, -1, -1, 0.586399470729008, 0], [0, 0, 0.52851435752982, -1, 0, 0, 0.468414221642732, 0.559737072586891, 1, -1, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0826743767050441, 3.44036492744393, -0.816756294489259, 0, 0.323934571968361, 0.323934571968361, -0.917325623294956, -0.539163187862916, 0, 0.0779069299028289, 0.76033538342246, -0.61530498071355, 0];
        actual = matrixUtilities.multiply([0.816756294489259, -1, 1, 0, 0, 0.323934571968361, -1, -1, -1, 0.948936865175579, 0.0849283263482751, 0.333631884462029, 1], [1, 1, -1, 0, 0.539163187862916, -1, 0.917325623294956, -1, 0, 0, 1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.735651157673286, 1, 0.0808672840152249, -1, 0, -0.0808672840152249, 0.203306837102075, -0.229685721094574, -0.291978944667802, 1, 0, 0, 1];
        actual = matrixUtilities.multiply([-1, -1, 0, 1, 1, -1, 0.770314278905426, 1, 0.432992558196649, 0, 0, 1, -1], [0.735651157673286, -1, 0, 1, 1, 0.919132715984775, -1, -1, -1, 1, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.339741354966416, 1.61129752481882, -1, 0.660258645033584, -2.58161752884352, -2, -0.660258645033584, 0.0321373269111558, -1, 0.184386845283863, 0.0461760837082875, 0.530245339279177, 1];
        actual = matrixUtilities.multiply([-1, 1, -1, -1, -1, 1, -1, 0, -1, 0, 0.530245339279177, 0.279264568015591, 1], [1, 0.965405342152997, -1, 0, 0.967862673088844, 1, 0, 0.613754855754671, 1, 0.660258645033584, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.40303941043235, 1.35967723911418, 0.478685645031144, -1, 1, 0.793694185928299, -0.264784730162837, 0.222220139780514, 0.0314991905441782, -1, 1, 0.793694185928299, -1];
        actual = matrixUtilities.multiply([0.403039410432353, 0, 1, 0, -1, 1, 0.264784730162837, 0.0140769523634002, 0, 0, -1, 1, -1], [1, -1, 0.564839997126181, -1, 0.892412081310717, 0.107993513861668, 0, -1, 0.206305814071701, -1, 0, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.0729932608422792, -0.336805801529813, 2, 1.1616507477121, 0.873001365687116, -0.800810952442948, -0.200216150133796, -0.615774704363793, 0.579284794334185, 1.65099649021914, 0.336805801529813, -0.163201872801036, 1];
        actual = matrixUtilities.multiply([-1, 0, 1, 0.329681147509106, 0.238037157448957, -1, 0.0209627244719131, 0.266849126791046, 0.355985944790759, 1, 1, -1, -1], [-1, -1, -1, 0.0729932608422792, 0.336805801529813, 0, 0.578003229376861, -1, 0.836798127198964, -1, -1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.07099045670922, 1.96804177806156, 0.691992150010537, -1.74630590702701, -2, 1.3399660719279, 1.02041387394017, 0.871449356838804, 1.41633052918084, 0.822902560617264, 1, -0.339966071927904, 0];
        actual = matrixUtilities.multiply([0.968041778061558, 1, 1, -1, -1, 1, 0, 0.871449356838804, 0.841144387070622, 0, 1, -1, 0], [-1, -1, -1, 0.923403346409743, 1, -1, 1, 1, 0.660033928072096, 0.177097439382736, 0, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -0.312715240434145, 0, -0.974260425183112, 0.974260425183112, -0.974260425183112, 1, -1, 1, 0.424397293675876, -0.424397293675876, -0.424397293675876, 0];
        actual = matrixUtilities.multiply([0, 0.785866591048365, 1, 0.974260425183112, 0.534474873698538, 0, -1, 0, 0, 0, 1, 0.424397293675876, 1], [0, 0.687284759565855, 1, -1, 1, -1, 0, 0, 0, 1, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.251384924748626, -1.77046931291487, -1.94951438715193, -1.06659430023431, -0.130176683948458, -0.14444017277306, 1.31655163905274, 1.94010551731449, 1.98410941878613, -0.100492455112046, -0.86477132159351, -0.985343883600793, 0];
        actual = matrixUtilities.multiply([1, -1, -1, -1, -1, 0.906045440075009, 0.585702162043053, 0.954539886188945, 1, 0.290302832280427, -1, 0, 0], [-1, -1, 1, 1, 0.1328764055543, 0.0504856128480684, 0.390795287392472, 0.903345718469166, 1, 0.357819787858901, 1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, 0, 0, -1, -0.286322534217649, 0, -0.203769592197505, 0.799006392474535, 0, -0.934505867275645, 0.533628721347112, 0];
        actual = matrixUtilities.multiply([0, 0, 0, -1, 0, 0, 0.796230407802495, 1, -1, 0, 0.934505867275645, -1, 0], [0.596720098330043, 0.602114344296099, 0.913181005471005, 0, 1, 0.286322534217649, 0, -1, 0.571027684291372, 0, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.670430841236576, 0.870785315654308, 0.258729627806519, -0.620704358266995, 0.290319327560387, 0.435516967030538, 0.370793587700833, 0, 0, -0.433467366934506, 0.0293141319219821, 0.0439750323654881, -1];
        actual = matrixUtilities.multiply([0, 0.368744778618563, 0.301686062618013, 0, 0.620704358266995, 0, -1, 0, -1, 1, 0.0626737792336726, 1, 1], [0, 1, 0, 0.629206412299167, 1, 0, -1, 0.467725614769257, 0.701649603760638, -1, -1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.304996549759524, -0.4661996287602, -1.24851216292192, -1.24559212720282, 0.131954893065595, -0.962429624967576, -0.879051112513547, -1.25659813278196, 0.134476134662611, 0.360938991122385, 1, -0.792039752375353, 1];
        actual = matrixUtilities.multiply([0.256006586018953, 0.0489899637405714, 1, 1, 0.24559212720282, 1, 0, 0.879051112513547, -1, 0.639061008877615, -1, 0, -1], [0, 0.794756685288044, 1, -1, 0, -1, -1, -1, 0.152978743497738, 0, 0.377547020268416, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.04225266980544, -0.845068335460996, -0.839998244233429, 0.122169278618958, 2, 3, 0.576963894777149, -0.657260996595612, -0.914033628494494, 1.14121802809705, -0.736612693283992, -0.736612693283992, -0.299665742693313];
        actual = matrixUtilities.multiply([0.445643017741685, 0.583620990432622, 0.522460274175955, -1, 1, -1, 0.256772631898882, 0, 0.657260996595612, 0, 0.263387306716008, 1, -1], [-1, 0.906229051717664, 0.455515942748411, 0, 0, -1, 1, 1, 1, 0.877830721381042, -1, -1, 0.299665742693313]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 0.807789957526973, 3, 1, 1.19221004247303, 2, -0.640036199539917, 0.832246242012943, -0.359963800460083, -2.30337225240812, 0.111162209935096, -0.696627747591877, 0];
        actual = matrixUtilities.multiply([1, -1, 1, 1, 1, 1, -1, 1, 0.640036199539917, -1, -1, 0.303372252408123, 1], [0, 0, 1, 1, 0, 1, 1, 0.192210042473027, 0, -1, 1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.70909373821183, -1.67160483118189, -0.240988595057739, 2, 1.34203535893095, 3, 0, 0.765420341289332, 0, 1, 0.300658781648517, 1.61494292813118, -0.267327550923139];
        actual = matrixUtilities.multiply([0, 0.72344782563087, 0.48245923057313, 1, -1, 1, -1, -1, 0, 1, 0, 0.614942928131178, -1], [0.985645912580959, 1, 0, 1, 0.234579658710668, 1, -1, -1, -1, 0, 0.107455700220287, 1, 0.267327550923139]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.624880738381706, -1.35542317123871, -2.80204071895059, 0, 1.82418538808086, 1.42230212661545, 0, 1.62638869291911, 1.18231158805187, 0, 0, 0, 1];
        actual = matrixUtilities.multiply([-1, 1, 0.468762216842157, 1, 0, 1, 0.760009461436425, 0, 1, 0, 0, 0, 1], [0.508069149920749, 0, -1, 0, 0.824185388080862, 1, 0.116811588460957, -1, -1, 0, 1, 0.422302126615449, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.21634629192592, 0.0256595527872721, 2.31806002604912, 0.830324653922731, 1, 0.0250409506377955, -1.74362442630512, -1, -1.59606349728818, -0.58683273157826, 0, -0.472335876210388, 0];
        actual = matrixUtilities.multiply([1, 1, 0.664353036165402, 0, -1, 1, -1, 0, -1, -1, 0.924068807588922, 0, 0.63869348337813], [1, -1, 0.549623402091499, 0.743624426305119, 0, 1, 0.169675346077269, 0, 0.571022546650387, 1, 1, 0.596063497288182, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.80765599104887, 1.84279142033439, -1.84279142033439, 0, 0, 0, 0.872183520619031, 0, -0.88280267682057, 1.94796782683021, 0.0416928190000787, -2.95830718099992, 0.964477284329234];
        actual = matrixUtilities.multiply([0, 0, 0.878314136005153, 0, 0, 0, 0.88280267682057, 0, 0, 1, 0.958307180999921, 1, 0.964477284329234], [1, 1, -1, 0.987971087446423, 0, -1, 0, -1, -1, 0.959996739383785, 1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.978170477309344, 0, -2, -1.63327250659153, 0, 2.34156341559887, -0.157969578428434, 0.860821749484549, -0.339432102786113, -0.0218295226906564, 0, -1.47861035330156, 0];
        actual = matrixUtilities.multiply([0, 1, 1, 0.655102029282182, -1, -1, 1, 0.860821749484549, 0, 1, 1, 1, 0], [0.922805937436785, 0.425154148798973, 0, -1, 0, 0.521389646698437, 0.978170477309344, 1, -1, 0, -1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.151476399112249, 1.74582337017442, -0.471200625631586, 0.810123018862761, 0.319614555369883, -1.31961455536988, 0.57223322595108, 0, -1, 0.666485054547017, 1.01709692274085, -0.89544961876024, -0.80308250514934];
        actual = matrixUtilities.multiply([-1, 1, 0, 1, 0.319614555369883, 1, 1, 0, 1, 0, 0.89544961876024, 0.121647303980611, -1], [0.0205925004652666, 0.254176629825577, 0.471200625631586, 0.57223322595108, -1, -1, 0.744302125528595, 1, -1, 0, 1, 0, 0.80308250514934]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 2.5396975672523, -3.05596520055829, -1, -1.42590959483101, 0.944034799441711, -0.497139508601809, 1.07695089656718, -1.55882569195648, 0, -0.491369546619882, 0.973244342009185, 0.650446678349025];
        actual = matrixUtilities.multiply([1, 1, -1, -1, 0, -1, 1, 0.502860491398191, -1, 0.0827208585491035, -1, 1, 1], [1, 0.965607162083316, -1, 0, 1, -1, 1, 1, -1, 1, 0.425909594831015, 0.0559652005582886, 0.650446678349025]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.011934983083948, -1.44144786961444, 0.617231655687667, 0.553292670739176, 1, 0.1967778210587, 0, -0.0236361748648976, 0.000943421621708967, 0.988065016916052, 0, 0.422682654775066, -0.707190710914876];
        actual = matrixUtilities.multiply([-1, 0.791884654104656, 1, 0.55997597452252, 1, -1, 0, 0, 0.0236361748648976, 1, 0.343253722108553, 0, -1], [-1, 0.441447869614441, -1, 0.988065016916052, 0, 0.422682654775066, 0, 0, 0, 0, -1, 0.0399143104627329, 0.707190710914876]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -0.325946585427013, 1.98372186440216, 1, -1.52393672919084, -0.163951201219832, 0.47117118699065, 0.47117118699065, 0.47117118699065, 0.720615925602902, 0.902978797053043, 0.938485761610086, 0];
        actual = matrixUtilities.multiply([1, 0, 1, -1, 0, 0.849883314617855, 0, 0.47117118699065, 0, 0.108934918003592, 0.829550843606494, 0, 0], [0.867397677557262, 0.41441993946881, 0.161606052034351, -1, 0.674053414572987, 1, 1, 1, 1, 0, -1, 0.983721864402165, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.751938481699647, 0.526613650157402, 1.21125151518926, 0.188664760211055, 0.00600927821576649, 0.0379639266978542, 1.27964266216366, -0.526613650157402, -0.79287093449052, 1.42369055628017, 0.473386349842598, 0.20712906550948, 0];
        actual = matrixUtilities.multiply([1, -1, 0.243341246267474, 0, 0.0126942363626762, 0.183286332145001, -1, 1, 1, 0, 1, 1, 0.78823989759583], [1, 0, 0.204060300348355, 0.144047894116513, 1, 1, 0.423690556280171, 0.473386349842598, 0, 1, 0, 0.20712906550948, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -2, -1, 0, -0.419763453034574, -1, 0, 0, 0, 0.484124714437487, 0.663299519877555, -0.663299519877555, 0];
        actual = matrixUtilities.multiply([1, 0, -1, 1, 0, 0.580236546965426, 0, 0, 0, 0, 0.663299519877555, 0, 0], [0, 0, 1, 0, -1, -1, 0.729873458263405, 1, -1, 0, 1, 0, 0.109302880293365]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.89787264163507, 1.14746743459414, 0.935745290450633, -0.102127358364932, 0.093563110611198, 2.41708385265297, 0.0247746002975733, 1.08790061684239, 1.35794424659849, -1.24202113982384, 0.0321996040027139, -1.85646121849069, 0.122869442888474];
        actual = matrixUtilities.multiply([-1, 0, 1, 1, -1, 1, 0.873098041337495, 0.00621084822631015, 1, 0.344148498188773, 1, -1, 0.352829143103598], [0, 0.683136724719376, 1, -1, 0.0935631106111981, 0.417083852652965, 0, 1, -1, 0.897872641635068, 1, 1, 0.348240629466363]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.78862722301326, 0.0355307497249594, -1.98283200940601, 0.603366737069267, -0.667840870873929, -1.46147945251053, -0.935525866195339, 1, 1.62197437166328, 0.0644741338046613, 0, 0.105161209174041, 0];
        actual = matrixUtilities.multiply([-1, 0.0355307497249594, 0, -1, 0.332159129126072, -1, 1, 0, 1, -1, 1, 1, 1], [0.82415797273822, 1, -1, -1, 1, 1, -1, 1, 0.483186837510758, 0.0644741338046613, 0, 0.621974371663283, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, -3, 2.03987191339949, -0.979329986022473, -0.829361367891245, 0.829361367891245, 1.07840766202584, -1.3187251953961, 1.3187251953961, 0.862341891910109, -0.862341891910109, 0.862341891910109, 0.541376701808244];
        actual = matrixUtilities.multiply([1, 0, 1, 0.808691353913718, -1, 0.0206700139775267, 0.687106518394829, 0.446788985024574, 0.631618677001269, 0, 0, 0.862341891910109, 1], [1, -1, 0.0398719133994877, 0, -1, 1, 1, 0, 0, 1, -1, 1, 0.541376701808244]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -1, 0.923255841212001, -1, 0.752985018656116, 0, 1, -0.752985018656116, -0.658864893326007, -1.80554381469523, 1.58140613447921, 0.398558288465991, -1];
        actual = matrixUtilities.multiply([0, 0, 0, 0, 0, 1, 1, -1, -1, 0.758274672440381, 0.139884177194854, 0.907384965059992, 1], [1, -1, 0.923255841212001, -1, 1, 0.341135106673993, -1, 1, 1, -1, 0.752985018656116, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.360931954049008, -0.214715640160588, 0, -0.593870661621118, 0.274120173516368, 1.50391612970453, -0.244427492490237, 0.755704761027478, 1.76723957081214, -0.360931954049008, 0.699165612220582, 1.86841363360566, 0.570684770387916];
        actual = matrixUtilities.multiply([0, 0, -1, 0, 1, 0.635502496098868, 0.652910619346849, 0.883495538441229, 1, 0.539102130820557, 1, 1, 1], [1, 0.216628335982854, 1, 0, 0.496792019110542, 0, -1, 0, 0.868413633605658, 0.639068045950992, 0.431343976143442, 1, 0.570684770387916]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.660448738950393, 0.573536177898541, -1.26194857005625, -0.0667817648811181, 2, 1.45215156229779, -0.496201624859218, -0.111620278615328, -0.607821903474546, 0.88517388742658, -0.484146776834571, -0.0800395622290855, 1];
        actual = matrixUtilities.multiply([1, 0.36384979233325, 0.426463822101459, 1, 1, -1, 0.496201624859218, 0, 0.607821903474546, 0.0480443476923017, 1, 0.532191124526873, -1], [0, 0, 1, -1, 1, 0, 0.933218235118882, 0, 0.452151562297787, 0, -1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.382749069043092, 0.229903814667996, 0.778802413258411, 1, -0.958804003875146, 0, 1, -0.958804003875146, -0.999409605748677, 0.179630714086644, -1.7791732897885, 0.447633539334356, 0.560396702644616];
        actual = matrixUtilities.multiply([0.359097453932789, 0.543362105052621, 0.0178745589302269, 1, 0, -1, 0.000590394251323489, 0, -1, 1, 0.820369285913356, -1, 0.756127721050814], [0.236054822446804, 1, 0.139322368027327, 0, 0, 1, -1, -1, 0.545648827937268, -1, 0.958804003875146, 1, 0.741140269088159]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.93605854918065, 0.460463587874762, 0.240469548097539, 2, 0.460463587874763, -0.545058433685945, 0.289677247074282, 0.10353658068362, -0.289677247074282, -2, -0.460463587874763, 0.545058433685945, 0.649802631535475];
        actual = matrixUtilities.multiply([1, 0.528572383582859, 1, 0, 1, 1, 0.0298492438298879, 0, 0.289677247074282, 0, -1, -1, 1], [0.407486165597796, 1, 1, 0, -1, 0, 1, 0, 0.454941566314055, 1, 0.460463587874763, -1, 0.649802631535475]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.65070270451284, -1, 0.441888105531784, 0.444696885740709, -0.36429108603126, -1, 0.322439543121699, 1, 0, 0.7542831471131, -2, -0.954193484948107, 0];
        actual = matrixUtilities.multiply([0, 1, 0, 0, 0.36429108603126, 1, 1, 0, 0, -1, 1, 0.954193484948107, 0.650702704512841], [1, 0, 0.679093697424556, 0.322439543121699, 1, 0, 1, -1, 0, 0.0804057997094494, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 0.215375312238641, 2.17798391225654, 0, -0.397037053665629, 2.23718103696942, 0, 1.20403476674298, -1.58841380242306, 0, 0, -1.51350982231717, 0];
        actual = matrixUtilities.multiply([-1, 1, 0.215375312238641, -1, 0.602962946334371, -1, 0.993029692672672, 0.436822497954975, 0.767212268788001, 0.120150597821991, -1, 1, 1], [-1, -1, 1, 0, 0, -1, 0, 1, 0.39335922449518, 0, 1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.07544010881122, -1.44420970950472, -0.0114535549708892, 2.16994741686772, -0.937209296010998, 1.18749960605068, 0.494258109244638, 0.281086432378556, 1.09480950552687, 0.114519321494546, 0.369827105848671, 1.33940140274013, -0.0118626593667374];
        actual = matrixUtilities.multiply([1, 0.521006308738611, 1, 0.381419005515715, -1, -1, 0, -1, 0.505741890755362, 0.162574671750225, -1, 0.957918457201644, -1], [0, 1, 0.66099448625976, 0.445566199927389, -1, 0.983081049743612, -1, 0, -1, -1, 0.555790290495283, 0.187466190283869, 0.0118626593667374]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.398337955772103, -0.472740743529396, -0.438635804296062, -0.398337955772103, 0.549565299204348, 0.387277173990047, -0.398337955772103, -1.45043470079565, 1.61049397504446, 0.398337955772103, 1.45043470079565, -1.61272282600995, 0];
        actual = matrixUtilities.multiply([0.923175444325048, 1, -1, -1, -1, -1, 1, -1, 0, -1, 1, -1, 0], [0.511281107324772, -1, 0, 0, -1, 0.610493975044458, 0.398337955772103, 0.450434700795652, -1, 0, 0, 0.00222885096549469, 0.855330828044252]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 0, 1.41918658903762, -0.638703838753842, -0.638703838753842, -0.884786188548797, 0.933668616662579, 0.933668616662579, 0.48876620962831, -2, -2, 0.476509972697361, 0.113986150414676];
        actual = matrixUtilities.multiply([1, 0.704462211441464, 0, -1, -1, 0.361296161246158, 0.933668616662579, 0.409844689727689, 0, -1, -1, -1, 1], [0, -1, 0.895696561734982, 1, 1, 0.523490027302639, 0, 0, 0, 1, 1, -1, 0.113986150414676]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.86061394356488, 2.15189580473618, -1.35182095910504, 1, 0, 0.668159199258387, 0.323174641618121, 1.67682535838188, -0.654032311706819, -0.189469309146269, 1.5027321821557, -0.831134114670423, 0.0134790080129429];
        actual = matrixUtilities.multiply([-1, 0.134062362897239, 1, -1, 0, -1, 0, 1, 0.676825358381879, 0, 0.656631436504718, 0.846100745650987, 0.0230358480583112], [0.231104733995676, 0.774160421348252, -1, 0, -1, 0.331840800741613, 1, 1, 0.0227930466750604, -1, 1, -1, 0.58513183360227]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.09030463690418, 0.368017248049386, -0.297082882047204, 1.01497660801466, 1.14269103954671, 1.14269103954671, -2.10495829354271, -2, -2, -0.895041706457288, 1, 1, 0];
        actual = matrixUtilities.multiply([0.492345812494096, -1, 0.702917117952796, 0, 0.142691039546715, 1, -1, -1, -1, -1, 1, 0, 0.66510013009659], [0, 1, 0, 1, 0, 0, 0.104958293542712, 1, 1, 1, 1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.871654241286057, -1, 0, 0.548930529294969, 0.548930529294969, -0.548930529294969, 0.9872925323375, 1.8676373408491, -0.9872925323375, 1, 0.83463362876076, 1, -1];
        actual = matrixUtilities.multiply([0, 0, -1, 0, 0.548930529294969, 0, 0.880344808511597, 0.9872925323375, 0, 0.83463362876076, 0, -1, -1], [0.128345758713943, 1, 1, 0, 1, 0, 1, 1, -1, -1, 0, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -0.102561652708129, -1, 0, 0.580457756566097, -1, -1, -0.191812479414023, -1.72305751535128, 0.430583566627737, 0.215620063131629, 0.135198245353623, 0];
        actual = matrixUtilities.multiply([0, 0, -1, 0, 1, 0, 0.529862284441414, 0.759075837563293, -1, 0, 0.295385321274114, 0.430583566627737, 0], [0, -1, -1, 0, -1, 0.06797676164097, 0, 0.580457756566097, -1, 1, 0.102561652708129, 1, 0.438623733091459]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, -0.937505645182685, 1.93750564518268, -0.699164854688181, 1, -0.319220446664477, -0.377547000710642, -1, 0.620055591976296, 1, 1, 0.379944408023704, 0.125203854878524];
        actual = matrixUtilities.multiply([-1, 0, -1, 0.699164854688181, 1, 1, -1, -1, 0.377547000710642, 0, 1, 0, 0.937505645182685], [0, -1, 1, -1, 0, -1, 1, 1, 0.379944408023704, -1, 0, 0, 0.133549974362156]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -1, 0.718067536930585, -0.00804016646372163, -0.991959833536278, -0.680779553335523, 2, -1, 0.680779553335523, 1.89813260263676, -0.898132602636764, 0.680779553335523, 0];
        actual = matrixUtilities.multiply([0.718067536930585, 1, 0, -1, 0.991959833536278, 1, 1, 1, -1, 1, 0.898132602636764, -1, 0], [0.345405033484756, -1, -1, 0, 0, 1, 1, -1, 0, -1, 0, 0.319220446664477, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.65850800725562, 0.566093273724473, 0, -0.658508007255619, 0.754350443721912, -1, 0.658508007255619, 0, 1, 0, 0.0696727582577955, 1, -1];
        actual = matrixUtilities.multiply([-1, -1, -1, 0.245649556278088, 0, -1, -1, 0, 1, -1, -1, 0, -1], [1, 0.503579484533323, 0, 0, -1, 0, 0, 0.930327241742204, -1, 0.658508007255619, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.082751264834195, 1, 1.01438154420554, 0.338901895256202, -1.3389018952562, -0.338901895256202, 1, 2, 3, -0.960652694553441, -0.474918475595731, -0.960652694553441, 0.548566404519866];
        actual = matrixUtilities.multiply([-1, 0, 0.534184860314329, 1, 0.338901895256202, -1, -1, -1, -1, 0.474918475595731, 0, 0.48573421895771, 0.548566404519866], [-1, 0, 1, -1, -1, -1, 1, -1, -1, -1, 0, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.545849429697659, 0.705400300485978, -0.931192758926746, -1.03594834126343, 1.71829103995489, 1.59008938846648, -1.65553957421574, 1.8918320064937, 1.90220320220208, 1.3817991611463, 0.261025248216943, 1, 0];
        actual = matrixUtilities.multiply([0.0688072410732541, 0, 1, 0.590089388466482, 1, 0.827658113943254, 1, 0.902203202202079, 1, 0, 1, -1, 1], [0.522957811375595, 0, -1, -1, 0.361884916835411, 1, 0.381799161146301, 0.941525245989452, 1, -1, 0.680499997772509, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.334225040084787, 1.58217589444582, -1.13914375783989, 0, 0.449517464008889, 1.01745930898975, -0.505592383679744, 1, -0.22170320442957, 0, 1, -0.961159887239877, 0.171367343594957];
        actual = matrixUtilities.multiply([0.582175894445822, -1, -1, 0.449517464008889, 1, 0, 0, 0, -1, 1, -1, 0, 0.171367343594957], [1, 0, 0.349819679441778, 0, 1, 0.0388401127601229, 0, 0, 1, 0.505592383679744, -1, 0.22170320442957, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, -0.16619151419317, -0.567701145339618, -0.981319354838375, -0.981319354838375, 0, 0.885373713860928, -1.52471470065634, -0.567701145339618, -2.49426576145658, -0.0841773469393036, 0.567701145339618, 1];
        actual = matrixUtilities.multiply([0, -1, 0, 0, 0, 0.981319354838375, 1, -1, 1, -1, 1, 0.608892047595648, 1], [1, 0.521163088977878, 0, 0.885373713860928, 0.162639902514704, 0, -1, 0.687354603171048, 0.567701145339618, -1, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.64642578074286, 0.491759000853093, 1.56535549179182, 1.89105220785879, 2.41361820949876, 0.999624301679257, -0.918899803384626, 0.776429779257826, -0.999624301679257, -1.89105220785879, -2.41361820949876, -0.999624301679257, -1];
        actual = matrixUtilities.multiply([1, 0.742170212204647, 0.565567974730194, 1, -1, 1, 0.190047988756582, -1, -1, -1, 1, -1, -1], [0, 0, -1, 1, 1, 0, 0.108947792141208, -1, 0, 1, 0.413618209498757, 0.999624301679257, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.84395305991357, 2, 1, 1.84395305991357, 0, -1, -0.156046940086431, -0.0469309287364273, 2.95306907126357, -0.156046940086431, 0, 3, 0];
        actual = matrixUtilities.multiply([1, 1, 1, 1, -1, 1, 1, 0.953069071263573, -1, 1, 1, -1, 0], [1, 0, 0, 0.843953059913569, 0, 1, 0, 1, 1, 1, 1, -1, 0.784835105661692]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [3.05438335684939, 0.243664301661901, 1.24676114191879, -0.0576000758714974, -0.103240146349762, -0.588087276363786, -0.908053116364429, -1, -0.0390827362607618, 0.942399924128503, 0.105541264687451, 0, 1];
        actual = matrixUtilities.multiply([0.353142150842185, 0.841668244377555, 1, -1, 1, 0, 0, 0, -1, 0, 1, 0, -1], [-1, 0.91889594584652, -1, 1, 0.208781411037213, 0.588087276363786, 0.942399924128503, 0.105541264687451, 0, 0.908053116364429, 1, 0.0390827362607618, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.0514682866872607, -0.290754472972245, 0.369420358467569, 0, 0, 0, 0, 1, -0.568511933353037, -0.0587369674158921, -0.689884351422025, -0.403669542675984, -0.318108622598512];
        actual = matrixUtilities.multiply([-1, 0, 0.290754472972245, 0, 0, 0, 0, -1, -1, -1, 0.406398559178411, 0.689884351422025, -1], [0, 0, -1, 0.342222759659506, 0, 0.795877029092925, -1, 0, 0, 1, -1, 0.568511933353037, 0.318108622598512]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.188164732972237, 1.48790794371109, -0.359237702939092, -2, 1.01989643975156, 1.94418413468831, -1, -0.494609636484929, 1, 0.0392196653593423, 1.43511150612881, 0.468458396600773, 1];
        actual = matrixUtilities.multiply([1, 1, 0.454825527246495, -1, 1, 1, -1, 0, 0, 0.475725738087541, 0.436506072728199, 1, 1], [0.188164732972237, 0, 0.21132325018352, 1, 0.494609636484929, -1, -1, 0.558467605876954, 0, 0, 0.956038470359537, 0.944184134688314, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.71941479142728, 0.551504676952727, 1, -0.163527898566578, -0.86920286171078, -0.836472101433422, 0, 1.79984601670869, 2, 0.160425369236816, -1.79984601670869, -2, 1];
        actual = matrixUtilities.multiply([0.812126811971947, 1, 0, 1, 0.163527898566578, -1, 0, 1, 1, 0.160425369236816, -1, -1, -1], [0.531541603399227, 0.248341339755962, 0, 1, 0, 0, -1, 0.79984601670869, 1, 1, 1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.93535305291312, -1.59797178931834, -0.23477661433034, -1.47558441314641, -1.47558441314641, -0.787233339567424, -1, -1, 0.447379381138542, -2, -0.721587838009739, -0.772703247970298, 0];
        actual = matrixUtilities.multiply([1, 1, 1, 0, 1, 0.475584413146407, 0, 0, 1, 1, 1, 0, 0.14391165838759], [0.449212717101543, 0.858971747504068, 0.629186359992803, -1, 0.278412161990261, 0.227296752029702, -1, -1, -1, -1, -1, 0.447379381138542, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.967458923797802, 0.797208494302288, -2.9674589237978, 2.47487412601471, -0.650851033465402, -0.474874126014707, 0, 0, 2, 0, 0, 2, 0];
        actual = matrixUtilities.multiply([1, 0.967458923797803, 1, 0.474874126014707, 1, -1, -1, 0, -1, -1, 0, -1, 0], [1, 0.49593088147041, 0.617312802754954, 1, -1, -1, 1, 0.824023092549305, -1, -1, 1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.140589500729386, 0.202097133174009, 0.811085690656251, 1.18215242595512, -0.391833919748587, 0, 1.07954302107894, -0.280105784665842, 1, -0.877477342671471, 0.200929597848787, -1, 0];
        actual = matrixUtilities.multiply([0.435857410279968, 0.284498191571095, 0.811085690656251, 1, -1, 0, 0, -1, 1, 0, 0.797934321592531, -1, 0], [0, 0.56719073679633, -1, 0.182152425955121, 0, 0, -1, 0.391833919748587, 0, 0.07954302107894, 0.111728135082744, 1, 0.286566055513251]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.968384667431522, -2.39903746144801, 0.549465440003884, 0.183342749338291, 1.1364932186052, -0.855791783108988, 1.10274842463257, 2.47150029217429, 0.402163051721716, 0.799142531491417, 0.0697048279293969, 1.09214945250627, 0];
        actual = matrixUtilities.multiply([-1, -1, -1, 0.149814232322301, 1, 0, 1, 0.560417169500337, 1, 0.0957317119910064, -1, 0.982485280829708, 0.512045661225936], [0.419802564857436, 1, 1, 0, 0.911083122673949, 0.962580221222052, 0.183342749338291, 1, -1, 1, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.812765988899752, 0.475281949842014, 0.822078281483374, -1, -0.311458707000808, -0.611884640429469, -0.91139657568473, -0.473222913906548, -0.679722670350869, 0, 0, 0, 0];
        actual = matrixUtilities.multiply([0.524718050157986, -1, 1, 0.311458707000808, 0, -1, 0, 0.473222913906548, -1, 0, 0, 0, 0], [0, 1, -1, 0, -1, 0.375482932839302, 0.187234011100248, -1, 0.103776460096136, 1, 0, 0.728832069192469, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.0761577152070392, 1.89082937616156, -0.992548782840627, -1.91639106763359, -0.816643570464404, -2, -1.35425127640099, -0.0193290686850381, 0.38504154811848, 0.916391067633587, 1.51510649384969, 0.721275490113197, 0];
        actual = matrixUtilities.multiply([1, 0, 0.992548782840627, -1, -1, 1, -1, 0.822901756885881, 0.437860208767401, 1, 0.721275490113197, 0, 0], [0.897202051662468, 0.452440888365936, 1, 0.916391067633587, 1, 0, 0, 0.714160540473722, 1, -1, 0.897516970009318, -1, 0.0109797427481877]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.510084429511258, 1.50442620017772, 2.49837924004457, -0.0413933298743299, -0.0392435412105376, -0.404931027165116, 0.514887138514123, 0.504426200177719, 1.53335805401828, -0.713905509893738, 0.719154667444133, -0.280845332555867, 0.000692308880711118];
        actual = matrixUtilities.multiply([1, 0.628265553912272, 1, 0.465182658967181, 0, -1, 0, 0.663244367885983, 1, 0.719154667444133, -1, 0, 1], [-1, 0, 0, 0, 1, 1, 0.713905509893738, 0, 1, 0.0413933298743299, 0.504426200177719, 0.870113686132298, 0.000692308880711118]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 0, -0.530622077421575, -1, -1, -0.530622077421575, 1.78780960747404, 0, 0.530622077421575, 1.61464102814339, 0.637991466390896, 0.530622077421575, 0];
        actual = matrixUtilities.multiply([-1, -1, 0, -1, -1, 0, 1, 0, 1, 1, 0.637991466390896, 0.780189810218378, 1], [0, 1, 0, 1, 0, 0.530622077421575, 0, 1, 0, 0.787809607474045, 0, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, 2, 0, 0, -2, 0.880356139447706, 0.757416577896763, 1.1054072557508, 0.415004572558685, -0.584995427441316, -0.415004572558685, 0];
        actual = matrixUtilities.multiply([1, 0, 1, -1, 0, -1, 0.992881697599255, 0.122939561550943, 0.235465119702492, 0, 1, 0.584995427441316, 0], [0.448071719821576, 1, 0, 1, 1, 1, 1, 0, -1, -1, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.628136219283629, -1.16356868490743, 0.185586006932699, 1.35682723562242, -0.404504329620164, -0.431926985472407, -0.915124746778491, -0.350820653303908, 1.18351952935083, 0.13246989349484, -1.91750680415474, 1.31008031885609, 0];
        actual = matrixUtilities.multiply([-1, 1, -1, 0, 0.568073014527593, 1, 0.0201116404589785, 0.167140327937501, -1, 1, 1, 0.50433367421121, 1], [0, -1, -1, -1, -1, 0.814413993067301, 0.628136219283629, -1, 1, 1, 0.163568684907429, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.79830824993472, 0, 1, 0.450419872277612, -0.450419872277612, 0.450419872277612, 0.79830824993472, 0, 1.86131852532798, 1, -1, 1.00721045690242, 0];
        actual = matrixUtilities.multiply([0, 1, 0, 0.450419872277612, 0, 0, 0, 1, 1, 1, 0, 0.00837141741456996, 0], [1, 0, -1, 1, -1, 1, 0.79830824993472, 0, 1, 0, 0, 0.861318525327984, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.74495882296234, -2.76855384640794, 0.922219519467195, -0.744958822962343, -0.76855384640794, -1.84301065832517, 0, 0, -1.84301065832517, 0.744958822962343, -1.23144615359206, 0.156989341674833, 0];
        actual = matrixUtilities.multiply([1, 0, -1, -1, -1, -1, -1, -1, 0, 1, -1, 1, -1], [1, 1, 0.0777804805328047, 0, -1, 1, 0, 1, 0.843010658325167, 0.744958822962343, 0.76855384640794, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.821534156376631, 0.0848411382571054, -0.134406358997527, -1.11975485324848, -0.212380727851941, -2.03105761671022, 0.792438105117734, 0.539697475982689, 1.70374086857948, -0.368865531575338, 0.368865531575338, 0.308072296623645, 0.885521828143635];
        actual = matrixUtilities.multiply([0.430665490418051, -1, 1, 0.327316748130748, -1, -1, 0, 1, 1, 0.368865531575338, 0.961913480405656, 0, 0.885521828143635], [0.519198428615554, -1, 0, -1, 1, -1, 0, 0, 0.703740868579476, 0.792438105117734, 0.539697475982689, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.0799910948053, 1.09392374339231, -1, 0.978387007945397, -0.978387007945397, 0.978387007945397, 0, 0, 1, -0.335008534904378, 1.10614795056791, 0.061144928476375, 0.0247868229750482];
        actual = matrixUtilities.multiply([0, -1, 1, 0.978387007945397, 0, 0, 1, 0, 1, 0.061144928476375, 0.767996024232356, 0.471429916318241, 1], [0.0180256273681417, 1, -1, 1, -1, 1, 0.0980167221734378, 0.906076256607695, 0, -1, 1, 0, 0.0247868229750482]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.34998110744636, -1, -0.225726918746874, -0.668379951598454, -0.498938125324872, 0.182274056971705, 0.664651650313591, -1, -0.215472904134296, 0, 0, 0.734117185206951, 1];
        actual = matrixUtilities.multiply([1, 0.969634715453552, 0.314670542867235, 0.498938125324872, 0.813347154675679, 1, 1, 1, 0, 0, 0.93574484434712, 0, 1], [1, 0, 0, 0.664651650313591, -1, -1, 0, 0, 0.784527095865704, -1, 0, 0.0431193011082333, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -0.296644915499093, -1, 1, -0.493873860451334, 1, 0.277377855161847, 1.27737785516185, 0.277377855161847, 0.789229506528578, 1.97548018504241, 0.789229506528578, 0.703355084500907];
        actual = matrixUtilities.multiply([0, -1, 0, 0, 0, -1, -1, 0.277377855161847, 0, -1, 0.913905815181279, 0.124676308652701, 0.703355084500907], [0, 1, 0, 0, -1, 0, 1, 1, 1, -1, 0.493873860451334, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, -1, 0.0113836401195189, 1.01578055831394, 0.547226831681834, -0.988616359880481, -1.22634592150634, -0.29601520034299, 1.24383922014724, 0, -1, 0.0113836401195189, -0.318055241051156];
        actual = matrixUtilities.multiply([-1, 0, 0, -1, 0, 0.777327624045931, 0.246646960380788, -1, 1, -1, -1, 0, -1], [-1, 1, -1, -1, 0, 0.988616359880481, 1, 1, -1, 0.0203010388744534, 0.70398479965701, 0, 0.318055241051156]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 1, -1.23692423907897, -0.419605038324187, 1, 0.46658149283564, -1, -1, 1.23692423907897, 1, 0, 0.317339059507958, 0];
        actual = matrixUtilities.multiply([-1, 1, -1, 0.419605038324187, 1, 0, 1, -1, 1, -1, 0, 0.947519699552804, 0], [0, 0, 0.804519406894464, -1, 0, 0.552967511840615, 0, 1, 0.234553538837728, 0, 0, 0.91851026607608, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.04678316789064, 0, -2, 0.0373464151561068, 2, 1, -0.319018823243221, -1.63419800886614, -0.634198008866142, -1.95321683210936, 0, 1, -0.149570950842263];
        actual = matrixUtilities.multiply([1, -1, 1, -1, -1, 0.798287436272151, 0.634198008866142, 1, 1, -1, 1, 1, -1], [0, 0, 1, 1, -1, -1, -1, -1, 0, 0.0467831678906377, 0, 0, 0.149570950842263]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, -1.38226785342315, 1, 1, -0.382267853423146, 1, 0.935549260552763, 0.02463744582003, 0.935549260552763, 0, 0.382267853423147, 0, 0];
        actual = matrixUtilities.multiply([-1, 0, -1, -1, 0, 0, 0.0644507394472373, -1, -1, 1, -1, -1, 0], [0, 0.655662685472361, 0.613235936785692, -1, 0.382267853423146, -1, 0, -1, -1, -1, 1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.955196984557061, 0.955196984557061, -0.500646418051568, 1.79517668802067, -0.153057075642542, 0.0536351031873539, 1.79517668802067, -0.153057075642542, 0.613109442225243, -0.316220198439537, 0.316220198439537, -0.611879540864391, 0];
        actual = matrixUtilities.multiply([0.955196984557061, 0.870203112191615, 0, -1, 0.559474339037889, 1, -1, 0, 1, 0.316220198439537, 0.734222149818308, 0, 0], [0, -1, -1, -1, 1, 0.386890557774757, 0, 0, -1, 0.795176688020666, 0.846942924357458, 1, 0.994392485820871]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.249300115857879, -0.635293078904642, 0.418334640291675, 0.2976772376791, 1.60425689239253, 1.60425689239253, -2.09259972632518, 1, -1, -0.416081807986828, 0.436010327858855, 2.43601032785886, -0.96080449873619];
        actual = matrixUtilities.multiply([0.418334640291675, 1, 0, 0.604256892392531, 0, 1, 1, -1, -1, 1, 1, 0.436010327858855, -1], [0.021631071819752, 0.0536277191963176, 1, -1, 1, 1, 0.190665596253549, -1, 1, 0.901934130071632, 1, 1, 0.96080449873619]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -1, 0.311694873176373, 1.74443071277087, 0.744430712770871, 1.05612558594724, -1, 0, -0.311694873176373, 0.385831452154476, 0, 0.120261685546745, -1];
        actual = matrixUtilities.multiply([0, 1, -1, 0, 1, 0.744430712770871, 0, -1, 0, 0, 0.385831452154476, 0, -1], [0, 0, -1, -1, 1, 1, 1, 0, 0.311694873176373, 1, 1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.210907375590311, -1.04242099121079, -0.712478567820582, 1.60988863696747, 0.293876098267205, 0.14986387213659, 1.44075194182742, 0.405491808254362, 0.173251501861581, -1.15707760916887, 0, -0.625507514749424, 0];
        actual = matrixUtilities.multiply([-1, 0.853055758798987, 0.929651605863893, 1, 0.9699568017246, 0.457530141555485, 1, 0.778179902480068, 0.318517303242589, -1, -1, 0, 0.274554940534083], [-1, 1, -1, 1, 1, 0.0225923094072343, 0.157077609168867, -1, 0.60291520534219, 1, 0.576645943139049, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.95115780036485, 0.0237326226307697, 1, 0.161500818545886, -0.557519483639635, 0.557519483639635, -0.786205763650827, -0.139916766500062, 0.116184143869292, -0.868329835528661, -2.02373262263077, 2, 1];
        actual = matrixUtilities.multiply([1, -1, 0, 0, 0.29145371275556, 0.848973196395195, -1, 0.883815856130708, 1, -1, -1, 1, 1], [0.994752333031386, 1, 0, 1, 0.0237326226307697, 0, 0.0435945326665391, 1, -1, 0.175264697137878, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.807632485315033, 0, -1.86995909776071, -1.22251288416912, 0, -1, -0.392752086460941, -1, -1.86995909776071, 0.671036187202169, -0.169131753113648, 1.70082734464706, 0];
        actual = matrixUtilities.multiply([-1, 0, -1, -1, -1, 0, -1, 1, -1, 0.830868246886352, 0, 1, 0], [-1, 0, -1, 0.807632485315033, 1, 1, 0.414880398854092, -1, 0, 0, -1, 0.86995909776071, 0.480565685536976]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.1102785468615, -2.1102785468615, 0.65076501363431, -1, -1, 0.781984380810514, 1.83326237547829, 1.83326237547829, 0.130386218069426, -0.391917277310005, -0.391917277310005, -0.391917277310005, 0];
        actual = matrixUtilities.multiply([0.68320209844187, 0.427076448419633, 1, 0, 1, 0, -1, 0.166737624521711, -1, 0.391917277310005, 0, 0, 0], [0.61794290580691, 0.881078790817912, 0, -1, -1, -1, -1, -1, 0.781984380810514, -1, -1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.85349396935361, -2, -0.12026941362781, -1.38522198733991, 0.679917191006205, -0.320082808993795, -0.144035473532991, 0, -1, 1.14403547353299, 0, 1, 0];
        actual = matrixUtilities.multiply([1, 1, 1, 0.320082808993795, -1, -1, 1, 0, -1, -1, 1, 1, 1], [0, 0, 0.87973058637219, 0.35472924791031, -1, -1, 1, 0, 0, 0.498764721443301, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -1, 2, 0, 1, -1, 0, -0.469712866688945, -0.195205350497367, 0, 1, -1.07113697569405, 0];
        actual = matrixUtilities.multiply([1, -1, 1, -1, 0, 0.570628024437757, 0.469712866688945, 0.664918217186312, -1, -1, 0.0711369756940459, 1, 0], [0.978305110232115, 1, 1, 0, -1, 1, 0, 0, -1, 0, 0, 0, 0.865637562175113]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 1, -1, -0.818489365652699, -0.263450821052981, -1.05061015023413, 1.39647641936153, -0.175757401704675, -0.61140192747647, -0.732530282134089, -0.271675249688176, -1.35488229075208, 0];
        actual = matrixUtilities.multiply([0, 1, 0, -1, 0, 0.0506101502341266, 1, 0.61140192747647, 1, -1, 0.148023855941381, 0.206858434810703, 0], [0.263283995568419, 0, -1, 0.846332244969128, 0.212840670818854, 1, 0, 1, -1, 0.550144174392402, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-3.16754603952521, 3.87414466118167, 1.46819234565751, 1.58244532606678, -2, 0, -0.885244094713239, 0.467689420780022, 0.250494702625307, -0.120396337062305, 0.120396337062305, 0.064484342192943, 0];
        actual = matrixUtilities.multiply([-1, 0.874144661181674, -1, 1, 0, 1, 1, 0.467689420780022, -1, 0, 0.120396337062305, 0, -1], [0.710956052276751, -1, -1, 0.582445326066783, -1, 0, -1, 1, 0.535600532095693, 1, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, -1, 2.11454399332535, 0, 0, 0.0448243106984832, 1, 1, -1.63474024903732, 0, 0, 0.559092217385346, -1];
        actual = matrixUtilities.multiply([0, 1, 0.940840503639002, 0, 0, 0.368177551947617, -1, -1, 0.378642824189105, 1, 0, -1, -1], [1, 0, -1, 0, 0, 0.680838669501636, -1, -1, 1, 0, 0, 0.121746452116289, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.00955628074043, 0.259916848624086, -0.875513602988704, 0.972191510709092, 1, -1, 0.0278084892909082, 0, 0.295196135665847, -0.739773469231981, -0.867288615027111, 0.66933821990335, -1];
        actual = matrixUtilities.multiply([0.643022016921557, 0.902938865545643, 1, 0, 1, 0, -1, -1, 0, 1, 0.132711384972889, 0.16935250403795, 1], [1, 0, -1, -1, -1, 0.704803864334153, 0.972191510709092, 1, -1, 0.774748797889216, 0, 0.574220860178685, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.787305879773249, -0.934096142153301, 1, -1.78730587977325, -0.159932223688779, -2, 0, -0.0659038578466995, -2, -0.351932763832241, 1.88800617426603, 1.84348669361485, 0];
        actual = matrixUtilities.multiply([-1, -1, 1, 1, -1, 0, 1, 0, -1, 0.07529496917282, 0.918781662787675, 1, 0], [0, 0, -1, -1, 0.840067776311221, -1, 0.787305879773249, 1, 1, -1, 0.90597163415792, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.0965464781488, -1.02028000914505, -0.875076516151788, 0, 0, 0, 1, 0.730359250554051, 0.649824522272602, 1.09642150909473, 1.07042234111972, -0.778999792525992, 1];
        actual = matrixUtilities.multiply([0.053409847921417, 0, 0.0965464781488043, 0, 0, 0, 1, 1, 0, 0.394447433945931, 0.0964215090947326, -1, -1], [1, 0.923733530996243, 1, 0, 0, 0.531306618606349, 1, 0.730359250554051, 0.118517903666253, -1, -1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.192020053133378, 1, 0.0499508371809269, -1.00144520914249, 1, 0.859375993190043, 2.37404878340264, -1, 0.244644212589962, 0.00144520914249369, -1, -1.85937599319004, 0.809425156009116];
        actual = matrixUtilities.multiply([1, 1, -1, 1, 1, -1, 0.929772156258008, -1, 0.445620342365289, -1, -1, 0, 0.809425156009116], [1, 0, -1, 0.998554790857506, 0, 0.859375993190043, -1, 1, 1, 1, 0, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.413415647770006, -0.0856862762410595, -1.09475258416252, -0.499101924011065, 3, -0.944519549582395, -1.50089807598893, -1, 0.944519549582395, 0, 2, -0.0502407299588624, 1];
        actual = matrixUtilities.multiply([0.0856862762410595, -1, 0, -1, -1, -1, -1, 1, 1, -1, 0, -1, -1], [0, 1, 0.200473764538986, 1, -1, 0, 0.499101924011066, -1, 0.894278819623533, -1, -1, 0.0502407299588624, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.55562425658286, 0.726603834296858, 1.1582635287553, 1.86483593232224, 0, 0, 1.33359053192937, -1.53072704492636, -0.551161074962324, 1.44706773171227, -0.483060641904855, -0.483060641904855, 1];
        actual = matrixUtilities.multiply([0.773689716948983, 0.403848506698314, 0.904142057944155, 1, 0, 1, 1, 0.916454001290935, 0.385726956364572, 1, 0, 0.516939358095145, 1], [0, 1, 1, 1, -1, -1, 0, -1, 0.0688653970457918, 0.864835932322236, 1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.231736223221533, -0.417834268611779, 0.752078675014738, -1.16080787133463, 0.95950519291661, -1.65726001125633, -0.0894253123710961, -0.0404948070833901, -0.637305825604742, 1.05986626216204, -1, 1.01673493535106, 0];
        actual = matrixUtilities.multiply([0.377339461528389, -1, 0.912121204618421, -1, -1, -1, 0, -1, 0.192367059268228, 1, 0, 1, -1], [0.562739362736577, 0, -1, 1, -1, 1, 0.100941609172589, 0.0404948070833901, 0.64052507590527, 0.059866262162042, 0, 0.0167349353510583, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.51915354864632, 1.70043284199221, 1.48862230334832, -0.566438820942509, -1.70043284199221, -0.53590757564451, -0.08642325135247, -1, -0.53590757564451, 0.519984430409961, -0.700432841992207, 0.53590757564451, 0.952714727703815];
        actual = matrixUtilities.multiply([-1, 1, 1, 1, -1, -1, 1, -1, 0, 0, 1, -1, 0.952714727703815], [1, 0, 1, 0.91357674864753, -1, 0, 1, 0, 0.53590757564451, 0.480015569590039, 0.700432841992207, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0.858260095984796, 0, 0, 0.520404029148908, 0, 1, 0.141739904015204, 0.38937345724058, 0.373819584201006, 1.2320796801858, 0.145555423884582, 0];
        actual = matrixUtilities.multiply([0, 0, 1, 0, 0, 0.606347692947065, 0.67913905981888, 1, -1, -1, 0.373819584201006, 1, 0], [-1, 0, 0.746472967670519, 0, 0, 0, 1, 1, 0.38937345724058, 0, 0.858260095984796, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.273647576697938, -1.40237230640015, 2, 0, 0.402372306400152, -1, 0.273647576697938, 1.40237230640015, -2, 0.0641533054346252, -0.167934617571502, 0.76556231117135, 0];
        actual = matrixUtilities.multiply([-1, 0, -1, 0, 1, 1, 1, 0, 1, 0.23443768882865, 1, -1, 0], [0.836481756920219, 0, 1, 0.273647576697938, 1, -1, 0, 0, 0, 0, 0.402372306400152, -1, 0.498148874611663]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.570604295269868, -1, 2, 0.0330954194263407, 0.199656235147108, 0.102261607891915, 0.250535072649687, -0.270427704449011, -1.38623934815928, 0.212300902768524, 1.0815607072234, 0.392273175712802, 0];
        actual = matrixUtilities.multiply([0, -1, -1, 0.199656235147108, 0, 0, -1, 0.14447865129657, 0.729572295550989, 1, 0.0383545183755246, 0.0815607072233971, 0], [0.777177784022492, -1, 0, 0.165762012901605, 1, 0.512188401311724, 0, 0, -1, 0.570604295269868, 1, -1, 0.0375444679695854]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -1.00827943301214, -1.26189500664449, 0, -1, -1, -0.0853095176095653, 0, 0, 0, -0.863095706144042, -0.812589981643011, 0];
        actual = matrixUtilities.multiply([0.320811599176755, -1, 0, 1, 0, 0, 1, 0, -1, 1, 0.19914283566137, 0, 0], [0, 1, 0, 0, -1, -1, 0, 0.687467833835384, 0.941083407467736, 0.0853095176095653, -1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.282921283320575, 1.5260105218522, 0, 0.0461729862170018, 0.16818775462693, 0, 1.16417592771546, -0.357513198795502, -0.813088781578973, -1.12150570523064, -1.97674980246311, -0.14664375230048, -1];
        actual = matrixUtilities.multiply([0.538531485264437, 0, 0, 0.172191234851345, 0, 0, -1, 0.619236603667604, 0.813088781578973, -1, -1, 0.14664375230048, 1], [0.138514357683488, 1, 0, 0.268149457531119, 0.976749802463106, 0, 1, 1, 0, 1, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.3602377824291, -0.912440039817898, -1.43916950860953, 0.311174505069467, 0.734533016064042, 1.06949101319344, -0.372560940856375, -0.0496517424702886, 0.159865093026247, 1.16255414074406, 1.31099433606071, 1.46757396611738, -0.389911120939027];
        actual = matrixUtilities.multiply([0, 0.138128209457792, -1, 0.14862036432541, 1, 0, -1, 0, 0.627439059143625, 1, 1, 0, -1], [0.382691094830023, 0, 0.577297718067326, 1, 0.677090801613913, 0.467573966117377, 0.162554140744058, 0.633903534446798, 1, 1, 1, 1, 0.389911120939027]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, -1, -0.230033710706063, 0, -1, -0.413378210955721, 2, -1, 0.454217205035601, -2, 1, 0.230033710706063, 0];
        actual = matrixUtilities.multiply([1, 0, -1, -1, 0.562760270928387, -1, 1, 1, -1, -1, 0, 1, 0], [1, 1, 0.99291526619015, 1, 0, 0.284206865487717, 0, 0, 0.684250915741665, -1, 1, 0.51424057619378, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, 0, -1, 1, 1, 0, 0, -2, 1, 1, 1, 0, 0];
        actual = matrixUtilities.multiply([0, -1, -1, 0, 1, 0, 0, -1, 1, 0, 1, 0, 0], [0.403844897357675, 0.4467589177409, 1, 0, 1, -1, 1, 1, 0, 1, -1, 1, 0.864117158513571]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.4109019572474, -0.454622251193329, 0.112882902513778, 1.04375681515958, 1, -0.341189478682908, 0.0437568151595801, 0, 0.658810521317092, -0.257992604867552, -0.798033118153938, 1.33807363144032, 0];
        actual = matrixUtilities.multiply([-1, 0.999165359418451, 0.454622251193329, 0, 1, -1, 0, 1, 0, 0.540040513286386, 0, 0.798033118153938, 0], [0.134210083230496, 0, 0, 1, 0, 1, 0.0437568151595801, 0, 0.658810521317092, -1, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 0.714448163152881, 0.411753256531317, 0, -0.714448163152881, 0.52716886935675, 0, 1.70578350345873, 0.588246743468683, 0, 0, 0.588246743468683, 0.924117757903467];
        actual = matrixUtilities.multiply([1, -1, -1, -1, 0, 0.89616963495322, 1, 0.991335340305853, 1, 0, 0, 1, 1], [-1, 1, 1, 0, 0.714448163152881, 0, 0, 1, 0, 0, 0, 0.588246743468683, 0.924117757903467]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.889849605918792, -1.68026738064526, -0.501910370868803, -0.313926373288932, -0.712012417137149, -0.983467191003832, 0.546603386079242, 1.37752471190454, -0.331101832331243, 1, 0, 1, 1];
        actual = matrixUtilities.multiply([0.761699916218268, 1, 0.871850310299476, 0.686073626711068, 1, 1, 0.899378180456989, -1, 0.352774794377747, 0, 0, -1, 1], [1, -1, 0.351584709413156, 1, 0.419761920077615, 0.0240977183096566, 0, -1, 0, -1, 0, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, 0.251319186413344, 0.983219131353879, -1, -0.410656721988067, 0.983219131353879, 0, -0.563363474124746, -0.0167808686461211, -2.05349890471133, 0.658167538298191, 2.03671803606521, 0];
        actual = matrixUtilities.multiply([1, 0, 1, 1, -1, 1, 1, -1, 0, 1, 0.782844794347344, 0.270654110363989, 1], [0, 0, -1, -1, 0.0986124342766648, 0.983219131353879, -1, 0.661975908401411, 1, -1, 0.152706752136679, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.337407837313324, 1.12784334100379, 0.197293610079913, 2.33740783731332, 0.534386794331664, 0, 1.66259216268668, 2.53438679433166, 0, -0.337407837313324, 0.534386794331664, 0, -0.220871400190923];
        actual = matrixUtilities.multiply([-1, 0, 0, 1, -1, 1, -1, -1, 1, -1, 1, 1, 0.220871400190923], [0, 0.5788134674443, 0.893251049748273, 0.337407837313324, -1, 0, -1, -1, 0, 1, 0.534386794331664, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.51041575638131, -2, 2.61361360746578, -0.130452621323267, -1, -1, 0.607863077245589, 0.607863077245589, -0.795795149540433, 0.869547378676733, 0, -0.204204850459567, 0];
        actual = matrixUtilities.multiply([-1, -1, 0.771069800840258, -1, 1, 0, 0.607863077245589, 0, -1, 0, 1, 1, -1], [0.640868377704578, 1, -1, 1, 1, 0, 0.869547378676733, 0, -1, 0, 0, 0.795795149540433, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 1.04305235266663, -1, -1, 1.42669160404554, 2, -0.541266820179888, 0.541266820179888, 0.541266820179888, 0, 0, -0.0761820855905219, -0.521678755302764];
        actual = matrixUtilities.multiply([0, 1, 0.854818601559297, 1, -1, 0.426691604045542, 0.541266820179888, 0, 0, 0, 0.0761820855905219, 0, 0.521678755302764], [0, 0.360823110379662, 0, -1, 1, 1, 0, 0, -1, 0, 1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 2.0307045886436, 0.463010329792604, 0, -1.35313475707226, 2, 0, 1.34437819679472, -0.655621803205284, 0, 0.648344916342214, 0.381272156900387, -0.993709849656424];
        actual = matrixUtilities.multiply([1, 0.683859981914917, 0, -1, 0, 1, 0, 0.344378196794716, -1, 0.250229844008679, 0.595741031037523, 0.0357609698715438, 0.993709849656424], [0, 1, 0.784082343701312, 0, 0.353134757072262, -1, 0, 1, 1, 0, -1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.54445921329058, 0.661084852489217, 1.45554078670942, 2.04042230408658, 0.661084852489217, 0.959577695913416, 1.10305188228518, 0.276954092616241, -0.265174288891803, -2, -0.661084852489217, 0, -0.87109137972402];
        actual = matrixUtilities.multiply([1, 0.415550593014597, -1, 1, 0.0404223040865838, -1, 0.41893879669669, 0.684113085588493, 0, -1, -1, 0, 0.87109137972402], [-1, 0, 1, 1, 0.661084852489217, 1, 1, 0, -1, -1, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.34444665785155, 0, -0.797954868896843, -1, 1.86571384215062, 1.06455423625139, -1.34444665785155, 1, 0.501628943486898, -1.34444665785155, 1, 0.501628943486898, 0];
        actual = matrixUtilities.multiply([1, 0, -1, 0, 1, 0.865713842150622, -1, 1, 0, -1, 1, 0, 1], [1, 1, -1, 0.344446657851546, 0, 0.395472522543498, -1, 1, 0.897101466030395, 0, 1, 0.193427391440341, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.611727694799997, 0, -1, 0.307682953551465, -0.839876824915352, 0, 0.281130303215364, 0.150733253988779, -0.549836750863975, -0.671384002860349, -1.95356333346208, 1.49844505776314, 0];
        actual = matrixUtilities.multiply([0, 1, 1, 0, 0, 0.839876824915352, 0, 0.549836750863975, 0.399103496875196, 0.792342207763503, -1, 1, 0], [-1, 1, -1, -1, 0.0586068318498353, 0.629078008061777, 0.245384744948421, 1, -1, 0.366342949851576, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0535206957969445, 0.0535206957969445, -1.94647930420306, 0.84725892490114, 0.84725892490114, -1.15274107509886, -2.43856208326228, 0.438562083262281, -0.445824031925678, 0, -2, 0, 0];
        actual = matrixUtilities.multiply([1, 0.0535206957969445, -1, 1, 0.84725892490114, -1, 0.442193057593979, -1, 0.996369025668301, -1, -1, 0, 0], [0.1834938010124, 0, 0, -1, 1, -1, 1, 1, 1, -1, 1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.81466647834269, 1, -0.939109770552772, 0.0372065192140578, 0.59567204844005, 0.368946089250941, 1.50184422428806, -1, 0.939109770552772, 0.494779750003842, 0.632708982393476, 0.939109770552772, 0];
        actual = matrixUtilities.multiply([0, -1, 1, 1, 0.392867906202035, 0.59567204844005, -1, 1, -1, 1, 1, 0.632708982393476, 0], [1, 1, 1, 0.312822254054631, 0, 0, 0.814666478342687, 0, 0.939109770552772, -1, 1, 0, 0.834941431337475]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.870671546957768, 1, -0.588677375385853, 0, 0, -1, 0, -1, 0.588677375385853, 0, 0, 0.613853413431837, 0];
        actual = matrixUtilities.multiply([0, 1, -1, -1, 0, 0, 0, 0, 1, 0.613853413431837, 0, 0, 0], [0.0726544005203314, 1, 1, 0, 0, 1, 0.870671546957768, 0, 0, 0, -1, 0.588677375385853, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.50263468013268, -0.313139015023196, -1, 0.506923824026447, -0.3945584196572, -0.49647279619075, 1, 1, 0, 0.0391999115418642, 1.85497360669774, 1, 0];
        actual = matrixUtilities.multiply([0.686860984976804, 0, 1, 0.10191437653355, 0, 0.49647279619075, 1, 0, 0, 0.854973606697737, 0, -1, 0], [1, 1, 1, 1, 1, 0, 0, -1, -1, 0.815773695155873, -1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.809677499084332, 1.21757750571287, -0.846623587350651, 0.254823978177655, 1.74517602182234, 1.25482397817766, -1, 1.31945912415137, -1.37500838161214, 0, 0, 0, 0.846623587350651];
        actual = matrixUtilities.multiply([0, 0.490761291464214, 0, -1, 1, 0.254823978177655, 0.375008381612137, 0.694467505763503, -1, 0, 0, 0, 0.846623587350651], [0.956360667457972, 0.858488028337475, -1, 0, -1, -1, 0, 1, 0, 1, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.112710937444452, -0.124271650216728, -1.82502535823232, 1, -1.6446171922817, 2, 0, 0.644617192281697, -1, 0.24808299320195, -1.78877196823655, 0.24808299320195, 0.325012403691659];
        actual = matrixUtilities.multiply([0.112710937444452, 1, -1, 1, -1, 0, 0, 1, 0, 0.24808299320195, -1, -1, 0.325012403691659], [0, 0.73810683830553, 0.191573317251901, 1, -1, 1, 0, 0.644617192281697, -1, 0, 0.896071782752905, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.98832746175506, -2.01167253824494, 1.27177469770972, 0, 2, 0, -0.433107089815972, -1.56220558917253, 0.694477292101121, -0.981738863970031, -1, 2, 0.71413453189383];
        actual = matrixUtilities.multiply([1, 0.0116725382449443, 0, -1, -1, 0, 1, 0.562205589172526, 0.256682881273647, 1, 0, 1, 1], [-1, -1, 0.283447235954668, -1, -1, 1, 1, -1, -1, 0.0182611360299686, 0, 1, 0.71413453189383]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.255771207988457, 0, -1.88439924450796, -0.106654325084134, 0, -0.55663272764377, -0.841507720221536, 0, 0.377381532163071, -0.449871152848877, 0, 0.60836343262734, 0];
        actual = matrixUtilities.multiply([-1, 0.884399244507961, 1, 0.734853395137402, -1, 0.821779332506368, 0, -1, 0.622618467836929, 0.39163656737266, -1, 0, -1], [0, 0, 1, 1, 0, -1, 0.841507720221536, 0, -1, 0, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.17889318437264, 0.597397487888763, 0.600939479936352, 0, 0.413875786785, 0, -1, -1.50670028594635, 1, 1, 1.50670028594635, -1, 0.278269274034161];
        actual = matrixUtilities.multiply([0.600939479936352, 1, 1, 0, 0.598400573059172, 0, 1, 0, -1, -1, 0, 1, 0.577953704436288], [-1, 0, 0, -1, -1, 1, 0, 0.69163668187877, 0, 0, 0.506700285946345, 0, 0.481473294310958]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.196675982883515, 0.216003973676078, -0.857184209616467, -1.0625698375807, -0.855440610021092, -2, 1.4372442231687, 1, 2, 0.437244223168699, 0, 1, 0];
        actual = matrixUtilities.multiply([-1, 0, 0, -1, 1, 1, 1, 0, -1, 1, 0, 0, 0.240568240285184], [1, 0.89789065015404, 0.593660203085123, 0.437244223168699, 0, 1, 0.374674385587999, 0.144559389978908, 0, -1, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.50254694069854, 1.19542154259767, -1.93023071201995, -0.567222347281511, -2, 1, 1.40911615090867, -0.680135593600634, -2, 0.0779761333411639, 0.0178080146218611, 0.269435919946728, -1];
        actual = matrixUtilities.multiply([-1, 0.0697692879800542, -1, 1, 1, 0, 0.945326424178354, -1, -1, 0.180175969926722, 0, 0.269435919946728, -1], [1, -1, 1, 0.432777652718489, -1, 0, -1, -1, 1, 0, 0.734809169422281, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.72203799324205, 0, 0.881031810716275, 0.389124864172485, -0.601172977407078, 0.0715204605684257, -0.155358241012021, 1, -0.118968189283725, -0.854565369828867, 1, -0.118968189283725, -0.580003293035553];
        actual = matrixUtilities.multiply([0, 0.0058511626002617, -1, 0, 0, 0.601172977407078, 0, 0.491917798990345, -1, 0.207289329826501, 0, -1, -1], [0.0806131158399457, 1, -1, -1, 0, 0, 1, 0, 0, 0.647276040002366, -1, 0.118968189283725, 0.580003293035553]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.49887314308865, -0.83723175611218, -0.0916653246163777, 0, 0, 0.69239961388167, 1, 0.304392824556861, 1.00967822966838, 0.600477169081791, 0, 0.290539937582933, -0.861011605179408];
        actual = matrixUtilities.multiply([1, 1, 0.0237798490672278, 0, 1, 0, 1, 1, 0.304392824556861, 0.600477169081791, 0.370544313160025, 0, 0.861011605179408], [0.579403506396061, -1, -1, 1, 0, 0.0565803330655118, 0, 0, 0.69239961388167, 0, 1, 0.856453443344894, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.15094335337679, -3, -1.10631978563327, 0.849056646623209, 0, -1, -1, -1, -0.649606172763559, 0.150943353376791, 1, 0, -1];
        actual = matrixUtilities.multiply([-1, 1, 1, -1, -1, 0, 0, 1, 0.649606172763559, 1, 0, 1, 1], [-1, -1, 0.893680214366727, 0.150943353376791, 1, 1, -1, -1, 0, 0, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.41621252913783, -0.41621252913783, -1.41621252913783, -1.79114080676396, 1, 2, 1, 0, -1, -1.0439480883274, 0.380243221009263, -0.619756778990737, 1];
        actual = matrixUtilities.multiply([-1, 0.58378747086217, 1, 0.791140806763964, 1, -1, -1, 0, 1, 0.663704867318135, 0.380243221009263, 1, 1], [1, -1, -1, -1, 0, 0, -1, 1, 1, 0, 0, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.83635400693694, 1.35241336205621, 1, -1.83635400693694, 0.755925958396832, -2, 1.83635400693694, -1, 2, -0.163645993063061, 0.142121026824285, 0, 0];
        actual = matrixUtilities.multiply([1, 0.352413362056209, 1, -1, 0.755925958396832, -1, 1, -1, 1, -1, 0.142121026824285, 1, 1], [1, 1, -1, 1, 0, 1, 0, 1, 0, 0.836354006936939, 0, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.53296100717996, -0.206318545052692, 1.67310194423101, -1.68418032055915, -1.0858516754051, 0.67310194423101, 1, 0, -0.67310194423101, -0.804504101539265, 0.564291534742476, 0.0809901709149396, -1];
        actual = matrixUtilities.multiply([0.932733566934584, 0.617623525027942, 1, -1, -1, 1, 0, 0, -1, -1, 0.650143210147574, 0.120323780980112, -1], [0.171118958001546, 0.904018809508541, -1, 0.684180320559153, 0.085851675405098, 0, 0, 1, 0, -1, 0, 0.67310194423101, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.62408225533093, 1.00177338929629, -0.0771196023429121, 1.5975427630346, -0.99007586847702, -1.5975427630346, -0.670925886217005, 1.65941029482373, 1.670925886217, 0, -1.99492053361373, -1, 0.538284675934485];
        actual = matrixUtilities.multiply([0, 0.218730481908997, -1, -1, 0.5975427630346, 0, 0.670925886217005, -1, -1, -1, 0, 1, 0.538284675934485], [0.753043494537959, 0, 0.263078043825495, -1, 0.99492053361373, 1, 1, 0.0081076459065581, -1, -1, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.589435117128042, 2, -2, 0.509816469758529, -1.35566539939291, 1.35566539939291, 0.0852998723673168, 1, -1, 0.0852998723673168, 2, -2, 0];
        actual = matrixUtilities.multiply([-1, 0, -1, 0.490741585144187, 0, 0.864923814248724, 0, 1, -1, -1, 1, -1, 0], [0, 1, 0.752221799805864, 0, -1, 1, 0.674734989495359, 0, 0, 0.589435117128042, -1, 1, 0.518203046879826]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.541147282133413, -0.614261161612871, 1.30129874744513, -0.562060040825896, 0.545070820741854, 1.45492917925815, 0.0373447579505596, -0.85027902519809, -2, -1.73715830582062, 2.77450306377118, -0.225496936228823, 0];
        actual = matrixUtilities.multiply([1, 0.421507959916027, 0.151546310238329, 0.454929179258146, 1, 0, -1, -1, 0.85027902519809, -1, 0.774503063771177, -1, 0.120209212470897], [0, 0.963130747882245, -1, 0.96265524204944, -1, 1, -1, 1, 1, 0, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.60137951867719, 1, -1.97998663834897, -1.55554780483039, -1, 2, 0.300321100251287, 0, -0.31457432187841, -1, -1, 1, 0.0371865838050421];
        actual = matrixUtilities.multiply([1, 1, -1, -1, -1, 1, 0.31457432187841, 0.540585522325982, 0, 0, 0, 1, 0.0458317138468063], [1, 0, 0.436670592723727, 0, 0, -1, 0.555547804830385, 0, 0, -1, -1, 1, 0.811372315888932]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, 0, 0, 0, 0, -1.59162106765044, 0.40837893234956, -1, 0.426727089763958, 1.43256922738281, -1.43256922738281, 0];
        actual = matrixUtilities.multiply([0, 0, 0, 0, 0, 0, 0.59162106765044, 0, 1, 0, 1, 0.432569227382806, 0], [-1, 1, 0, -1, -1, 0, 0.859296317146763, 1, -1, -1, 1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.554613455456967, -0.596502513902496, 1.79043717253508, -0.554613455456967, -2.5965025139025, 0.790437172535079, -1.44538654454303, 0.596502513902496, 0.790437172535079, 1, -1, 0, -1];
        actual = matrixUtilities.multiply([1, 0, -1, 1, 1, -1, 1, -1, 1, 0, 1, 0, 1], [1, 1, 1, -1, -1, 0.790437172535079, 1, -1, 0, 0.554613455456967, 0.596502513902496, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.330105377980557, -0.260518272647114, -0.738916724200684, 0.116552354822193, 0.522863269742125, 0.80100649120333, -1.99251535759219, 0.593960535043525, -0.790236294253343, 1.65826886260055, -0.489945985073409, 0.757172048412021, 0];
        actual = matrixUtilities.multiply([-1, -1, 0.297451986604115, 0, 0.883447645177807, 1, 0.0110217384114031, 1, -1, 0.530651887194557, -1, 0.297913765207824, 0.948477338509856], [-1, 0.551779355179416, 0, 0.679080026074816, 0.192024394493561, 0.977177696291906, -1, 0.591844092398809, 0, 1, 0, 0.80100649120333, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.40913472716191, 0, 1, -2, 1, 0, 1.04989036305992, -0.141109779077168, 0.141109779077168, -0.367796073463557, 0.238155308290457, 0.761844691709543, 0];
        actual = matrixUtilities.multiply([-1, -1, 1, -1, -1, 0, 0, 0.96651349494537, 0.141109779077168, -1, 0.18205635490923, 0.761844691709543, 0], [-1, 0, -1, 1, -1, 0, 1, 0, 0, 0.590865272838094, -1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.872877690881899, 0.590212262510421, 0.0110279053463629, 1, 1, -0.0269112624353316, -1.53691004660768, -2, -0.973088737564668, 1.22338236485076, -0.389442982333453, -0.157863299785493, 0];
        actual = matrixUtilities.multiply([0, 0.409787737489579, 1, 0, -1, 0, 0, 1, -1, -1, 0.225510899548191, 0.836067917214738, 1], [-1, 0, -1, -1, 1, 1, -1, -1, 0.0269112624353316, 0.53691004660768, 1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 1.31606882825311, 2.15996162926776, 0.827600753785856, 1.14366958203896, 0.987562383053621, 0, -0.316068828253108, -1.15996162926776, 0, 0.155207086281658, -0.921450088790044, 0];
        actual = matrixUtilities.multiply([1, 1, -1, 0.827600753785856, 1, 0, 0, -1, 1, 0, 0.491054708366773, 1, 0], [1, -1, 0.387541289156089, 1, 1, 1, 0, 0.316068828253108, 0.159961629267764, 0, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.342298608898324, 2, -1.83062221474509, -0.181566677606463, 2, -2.68059272304205, 0.0503089073821337, -0.277082271071655, 1.0801211979611, 0, 0, 0.21509852004585, 0];
        actual = matrixUtilities.multiply([-1, 0, 0, -1, -1, -1, 0.277082271071655, 1, 0, 0, 0.253065862810736, 0, 1], [0.523865286504787, 1, -1, 0.181566677606463, -1, 0.830622214745089, 0, 0, 0.84997050829696, 0, -1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0191568946555056, -1.18571991435518, -1, -0.0191568946555056, 0.185719914355185, 1.63345267047801, 0.518583949405301, 1.05721739587132, -0.683865028751951, 0.840851840489009, -1, -1, 0];
        actual = matrixUtilities.multiply([-1, 0, 1, 1, 1, -1, 0.579527265662107, -1, 0.0504123582739441, 0, 0, 1, 0], [0, 1, -1, 0.821694945833504, 0.185719914355185, 0, 0, -1, 0.633452670478007, 0.840851840489009, -1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -1.65270921164909, 0, 1, -1, 0, 2, -0.401858817507447, -1, -1, 0.514941352608398, 1, 0];
        actual = matrixUtilities.multiply([-1, 0, 0.339773833909898, -1, 0, 0, -1, -1, 1, 0, 1, 0.860902689332563, 0.855941934443983], [0, -1, 0, -1, 1, 0, -1, 0, 1, 0, 0.598141182492553, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.42872454478812, 0.654907453178851, 0.595996948236598, 0.420773082730276, 0, -0.230770377862013, -0.976340812250575, 0, 0.291839261798972, 0.428724544788117, 0, -0.22967777737867, 0.654907453178851];
        actual = matrixUtilities.multiply([-1, 1, 0, 0.981453214763409, 1, -1, 0.0551850553858956, 0, 1, 1, 1, -1, 0.654907453178851], [0, 1, 1, 0.428724544788117, 0, 0.0589105049422525, -1, 0, 0, -1, 0, 0.288588282320922, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0291051287339559, 1.38985729328816, 0, 2.47328544383556, -0.557902094738153, -1, 0.131496173856545, 0.230245288103002, 1, 0.131496173856545, -1.18871713391911, 1, 0];
        actual = matrixUtilities.multiply([0, 0.970894871266044, 1, 1, -1, 0.604781617692104, -1, 0, 1, -1, -1, 0, 0], [0.197432460355308, 0.471765423413257, 0.945716006656045, 0.868503826143455, 0.188717133919111, -1, -1, 1, 0, 1, 0.418962422022113, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.420084456177468, 0.24507805153012, 0.420084456177468, -0.966054060181441, 1.70467689340221, -0.609456120808356, 0.0403783095913539, 0.45442456912921, -1.15699152655759, -0.885054914227247, 0, -0.314133014210562, 0.303000958066284];
        actual = matrixUtilities.multiply([0, 0, 0, 1, 0.295323106597794, 1, 0.805708047843402, 0.351283478714192, 0, 0, 1, 1, 0.420084456177468], [-1, 0.58340185628431, 1, 0, 1, -1, 0.114945085772753, -1, -1, -1, 1, 0.685866985789438, 0.721285811961296]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.609814014104108, 0.305502080966487, 1.24925659561961, 0.217108642317871, -0.782891357682129, -1.42517754688169, -2, -1, 0.357713810800441, 1, 1, 1, -1];
        actual = matrixUtilities.multiply([0.609814014104108, 1, 0, 0.217108642317871, -1, -1, 0, 1, -1, 1, 0, 0, -1], [-1, 0.304311933137622, 0.3605574184845, 1, 1, 1, -1, 0, 1, 1, 1, 0.642286189199559, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.794060710721678, -0.276973128419702, 0.365386712803658, -2, -0.0894564334719704, 0.460149592934246, -0.248253829892843, -0.165191924824542, 0.0200052500634568, -1.45646334693602, -0.548733780323001, 0.210041423282015, 0];
        actual = matrixUtilities.multiply([-1, 0, 0.794060710721678, 0, 1, 1, 0, 0.204778294174363, 0.0434755357184799, 0.03563645576855, 1, 0.456463346936024, 0], [1, 1, 1, 0, 1, 0, -1, -1, 0, -1, 0.91054356652803, 0.460149592934246, 0.658213374977099]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.705765272353666, 1, -0.825585563120239, -0.730835949411074, 0.221683702534849, 0.509152246876225, -1, 0, 0, 0, -1, 1, -1];
        actual = matrixUtilities.multiply([1, 0.174414436879761, -1, 0.221683702534849, 0, 0.730835949411074, 0, -1, 1, -1, 0, 0, -1], [0.294234727646334, 0, -1, 0, 1, -1, 0, 0, 1, -1, 0, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.114258159470865, 0, 0.78646580352749, -0.0360417674709599, -0.00398733327350922, 1.0374666624877, 1.08478144351086, 0.536204543185222, 0.321828062795954, 1.84407896354984, 0.210573672809561, 1, 1];
        actual = matrixUtilities.multiply([0, 1, 0, -1, 0.245484199489227, 0.791982462998471, 0.859322416530606, 0.321828062795954, 0, 0.844078963549844, 0, 1, -1], [0.814815547231033, 1, 0.21353419647251, 1, 0.249471532762736, 0, 0.700557387760169, 1, 1, 1, 0, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.50710725109424, -0.165714025574603, 0.588601190888389, 0, 0, 0, -0.777967256390474, 1.44721477313303, -1.86723059533269, 0.47128668682244, 0.11905673689742, 1.06925887105486, 0];
        actual = matrixUtilities.multiply([1, 1, 0.0509983469038263, 0, 0, 0, 1, -1, 0.222032743609526, 0.52871331317756, 1, 1, 0.558105597998065], [-1, 1, 1, -1, 0.225182029523506, -1, 0, -1, 1, 1, 1, 0.597972184232423, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.256709949232968, 0.00496355770386921, 1.00076435366681, 0.468837428590673, -1, 1.15841136880145, -0.212127479357704, 1.00496355770387, -0.231265619970516, 0, 0, 0, 0];
        actual = matrixUtilities.multiply([1, 1, 0, 0.926381395164123, 0, 1, 0, 1, -1, 0, 0, 0, 0], [0.624060559377102, 1, 0, 0, 0, 1, 0.256709949232968, 0.00496355770386921, 0.000764353666810484, 0.468837428590673, -1, 0.232029973637327, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.14762466594001, -0.556414722258418, 1.13664390653942, 1, 1, -0.0743829585026871, -3, 1, 0.0743829585026871, -1, 0, -0.925617041497313, 1];
        actual = matrixUtilities.multiply([0, 1, 0.147624665940006, 1, -1, 1, -1, -1, -1, 0, 0, -1, 1], [0, 0.443585277741582, 1, 1, 0, -1, 1, -1, 0, 1, 0, 0.925617041497313, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.3376567658678, -1, -0.662343234132204, -0.9135629580885, -0.0864370419115001, 0, 2, 0, 1, 1, 0.427914810100531, 0.427914810100531, 0.662343234132204];
        actual = matrixUtilities.multiply([0, -1, 1, 0, 1, 0.0864370419115001, 1, -1, 1, 0.427914810100531, -1, 0, 0.662343234132204], [-1, 0, -1, 0, 1, 1, -1, 0, 0, 1, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.693669616102087, 2.08625814648637, -0.419498702832817, -0.0409471052889466, -0.648358574904668, -1.72036346919852, 0.0231938564505257, 0.547011480261519, -0.234746112158251, -0.0409471052889466, -0.506654565696786, -0.917554157355247, 0.160817720712975];
        actual = matrixUtilities.multiply([1, -1, 1, -1, -1, 1, 0.566434581562148, -1, 0.5197340811229, -1, 0.581924089967238, 0.321458273251289, 0.734616721391034], [-1, 1, 0.0234778812264455, 0.0409471052889466, 1, 0.64180876111696, 0, 0.420981640192206, 0.0785547080815559, 0, 0.772623065287537, -1, 0.218913776436315]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.476800247317553, -1.4476289280912, 0.447628928091204, -0.142609153009303, -0.142609153009303, 0.142609153009303, 1, 2, -1, -0.705182236016347, 0.294817763983653, 0.705182236016347, -0.396180747261355];
        actual = matrixUtilities.multiply([1, 0, 0.447628928091204, 0, -1, 0.142609153009303, -1, -1, -1, -1, -1, 0.705182236016347, -1], [0.0291713192263485, 0, 0, 0, -1, 0, 0, 0, 0, -1, -1, 1, 0.396180747261355]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.61690306925071, -0.616903069250706, 1.72160926076288, -1.06294655569966, 0, 0.156314642926724, 0, 0, 0, 0.0629465556996626, 0, 1.28043361347189, -0.616903069250706];
        actual = matrixUtilities.multiply([0, -1, 0.373372472065209, -1, -1, 0.557403376119865, 0, 0, 0, 1, 0, 1, 0.616903069250706], [-1, -1, 1, 0.0629465556996626, 0, 1, 1, 0, -1, 0, 0, 0.280433613471889, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.342437830447423, -0.44546760872261, -0.413186946225156, -1, 0, -0.571302850996751, 1, -1, -0.403475143203267, -1, 0, 1, -0.342437830447423];
        actual = matrixUtilities.multiply([0, 0.825698430103109, 0.44546760872261, 1, 0.571302850996751, 0, -1, 1, 1, 1, -1, 0, 0.342437830447423], [-1, 0, 0.428629576893816, -1, 0, 0, 0, 0, -1, 0, -1, 0.596524856796733, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.200683869049272, -2, 1, 0.799316130950729, 1, -2, 0.0734699696076203, -1.34260846923227, 1, 0.992829271123199, 0, -2, 0];
        actual = matrixUtilities.multiply([1, 1, 0, -1, -1, -1, 0.342608469232269, 1, 0, 0, -1, -1, 0], [1, -1, 0.897575887803722, 0.193513140172471, -1, 0, 0.00717072887680062, -1, 1, -1, 1, 1, 0.252325841808843]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 1.929515656051, -0.320870593805271, 1.60845748363457, 1.21533526601736, 0.421458848017016, 1, 0.929515656051, 0.421458848017016, 1, 0.469744588001512, 0, 0];
        actual = matrixUtilities.multiply([0, 1, 1, 0.608457483634566, 1, 1, 0, 1, -1, 1, 0, -1, -1], [1, -1, 0.742329441822287, 1, 0.469744588001512, 0, 1, 0.929515656051, 0.421458848017016, 0, 0, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0.0333029506883132, 0.78407140624899, 0, 0, 0, 0, -0.49456417117946, -0.322810185757843, 0, 0.491686246613653, 0.320931716960821, 0.461261220491147];
        actual = matrixUtilities.multiply([1, 0.363857953512975, -1, 0, 0.450510822446323, -1, -1, -1, 0.724598910531308, 0.994180887469175, -1, 0.351122991811076, 0.461261220491147], [0, -1, 1, 0, 0.49456417117946, 0.322810185757843, 0, 0, 0, 0, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.316232749873881, -2.27804184298871, 1.28422000039565, -0.64368870930918, -1.5449919912708, 1.5449919912708, 3, 0, 0, -1.13976953045454, 1.07033585620594, -1.07033585620594, 1];
        actual = matrixUtilities.multiply([0.284220000395654, -1, -1, 0.544991991270795, 0.188680700579975, -1, 1, -1, 1, -1, 0.210105386660483, 0.0703358562059402, -1], [0.600452750269534, 0.993821842593058, 0, 1, -1, 1, -1, 0, 0, 1, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -1, 0, 0.417181597751184, 0.582818402248816, -1.41718159775118, -1, 1, 1, -2, 1, 2.87102467979818, 0.777535692219406];
        actual = matrixUtilities.multiply([0, 0, 0, 0.582818402248816, 1, -1, 1, 0, 0, 1, -1, 0.871024679798179, 1], [-1, -1, 0, -1, 1, 1, 1, 0, -1, 0, 0, 1, 0.777535692219406]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.798303009848252, 0.201696990151748, 1, 0, -1, -1, 0, 1, 1, 1, -0.856596878197322, 0.143403121802678, 0];
        actual = matrixUtilities.multiply([1, 1, 0.798303009848252, -1, 0.951347446977788, 0, 1, 0, 0, 0.143403121802678, 0, 1, 0], [0.693341340726866, 1, 0.781449462651019, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.447075580454932, -1.88975403778709, -1.11024596221291, 1.66317038175798, -2, -1, 1.1565700168485, -1.17423547486506, 0.0693429294365192, 0.412871846142035, -0.523532679082608, -0.133540374754714, 0.361953659151659];
        actual = matrixUtilities.multiply([0.889754037787092, 1, 1, 0, 1, -1, 0.121789202150791, 0.0524462727142713, -1, 0.194996152163947, 0.328536526918661, 0, 1], [-1, -1, -1, 1, -1, 1, 0.663170381757976, -1, -1, -1, 1, 0, 0.361953659151659]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.319100606403826, 0, 0, 1.18749272863764, -1.5875661934668, -1.5875661934668, 1.24458121446764, -1.44298434883495, -1.76647054113749, 0.25474021961729, -1.06471239545602, -0.29880285044145, 1];
        actual = matrixUtilities.multiply([-1, 0, 1, 1, 1, 0.587566193466804, 0.676513807697461, 1, 0.76647054113749, 1, 0.23409045498543, 0.06471239545602, 1], [0, 0, 1, 0, -1, 0, 1, 0, -1, 0.319100606403826, -1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.441825958174572, -0.0809662496116787, 1.49771158526833, 0.498955826041734, -0.966582867767002, 0.498955826041734, -1, -1.28548077646898, -1.74980852461877, 1, 2, 2, 0];
        actual = matrixUtilities.multiply([1, 0.441825958174572, -1, 0.966582867767002, 0.498955826041734, 0, 0.535672251850214, -1, 0.749808524618767, -1, 1, -1, 0.0809662496116787], [0, -1, 0.690233614151475, 0, -1, 0, 1, 0, 1, 0, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.01259719334797, -0.550250224060394, -1.38350683783988, -0.139894723957355, 0.687342556047879, -0.93941072134683, 1, 0, -0.20168450949792, 1.16052140023584, 0.687342556047879, -1.20168450949792, -1];
        actual = matrixUtilities.multiply([1, 0.654331340293554, 0.533920773553625, 1, 1, 0.300416124193192, 0, 0, -1, -1, 1, -1, -1], [0.583710602756455, 1, 0.836859046871243, 0, 0, 0, 0.160521400235836, 0.687342556047879, -1, -1, 0, 0.20168450949792, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.81046874182413, 0.192875132054498, -1.50646311533938, -1, 0.694962936777139, 0.760034880489127, -1.40627762973601, 0.694962936777139, 1.21234741677174, 1, 0, 1.12272045115136, 0];
        actual = matrixUtilities.multiply([-1, 0, 0, 1, 0, 0.141409833981381, 1, 0.406277629736009, 1, 0, -1, 0.122720451151356, 0.887838068831637], [0.912856488448035, 1, -1, -1, 0.694962936777139, 0.618625046507747, -1, 0, -1, 0, 0, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.8581038899059, -0.294280082124416, 0, -1.1418961100941, 1.5699645693274, 2, -0.339690689155688, -0.575895303326492, 1.21049945392203, 0.728912654672243, -0.265837103252223, 1, 0];
        actual = matrixUtilities.multiply([0, -1, -1, 0, -1, 1, -1, 0, 0.210499453922035, -1, -1, -1, -1], [-1, 0.724315512797011, 0, 0.129191235233653, 0.695872533924818, -1, 0.141896110094104, -1, -1, -1, 0.569964569327405, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0448591886297144, 0.91732536066199, 0.811401358763161, 1, 1.87246617203228, 1.21698395452322, 2, 2.87246617203228, 0.539759680414461, 1.83199143774435, 1.83199143774435, -0.496695481817532, 0.266859772859953];
        actual = matrixUtilities.multiply([0, 0.445322993884479, 1, 1, 0, 1, 1, -1, 1, 0.831991437744345, -1, 0, 0.490182182514194], [1, 1, -1, 1, 1, 0.216983954523217, -1, -1, 0.677224274108756, 0, 0.872466172032275, 1, 0.544409369372022]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.89695204370513, 2.08039962224681, 0.152404990375395, 1.97735166595194, 0, -0.375437966257072, -0.022648334048059, 2, 0.601687433943938, 1.85206386576106, 0.480627726521635, 1.09862314803336, 1];
        actual = matrixUtilities.multiply([0, 1, 0.0803996222468091, 0, 1, -1, 0, 1, 1, -1, 0.871808884605676, 0, 1], [1, 1, 0, -1, 0.391181158084041, -1, 0.977351665951941, 1, 0.113124733843433, -1, 1, 0.488562700100505, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.30985038580886, 0.100730485329745, 0.668097145700872, 1.72016526792206, 0, 0, 1, 0, 0, 1.645267976866, 1, 1, 0.567366660371128];
        actual = matrixUtilities.multiply([0.430248999237199, 0.331902854299128, 1, 1, 1, 1, 0, 1, 1, 0.895999856710434, 0, 1, 0.567366660371128], [0, -1, 0, 0.720165267922061, 0, 0, 0, -1, -1, 1, 1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.600417232886151, -0.636222208215027, 2.06392548143115, 0, 0, -2, 1, 0, -0.463508248545001, -1, 0, 1, -0.956766305471196];
        actual = matrixUtilities.multiply([1, -1, 0.600417232886151, -1, 0, -1, 0, 1, -1, 0, 0, 1, -1], [1, 0.636222208215027, -1, 1, 0, 1, 0, 0, 0.536491751455, -1, 0, 1, 0.956766305471196]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.202094177343927, 1.20168438330371, 0.68196101797836, 0.349268608663628, 0.0640662301034382, 0.216628926760204, 1.14978670289264, -1, 0, 0.0278773881944433, -1.20168438330371, -0.68196101797836, 0];
        actual = matrixUtilities.multiply([1, -1, 1, 0.264172613743773, 0, 0.317655879220765, 1, 1, 0, 0.0647064731757652, 1, -1, 0], [0, 1, 0, 0.215995273187754, 0, 0, 0.933791429704889, -1, 0, 0.919890333861062, 0.201684383303711, 0.68196101797836, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.06775896011373, -1.3179495983375, -0.297077405870463, -0.486078960116058, -1, 1.02087219246704, 0.482726493609476, 1.90295342863675, 1, 1.39162578871084, -0.542522186200378, 0.0208721924670377, 0];
        actual = matrixUtilities.multiply([0.3179495983375, 1, 0, -1, 1, -1, -1, 0, 0.902953428636749, 0, 1, 0.457477813799622, 0], [1, 0, 0.106825807647233, 0.420226935027273, -1, -1, 0.934147974911215, -1, 0.0208721924670377, 1, 1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.88253119116767, -2, 1.48953215474707, 0.368336472604277, -0.48762633022276, -0.0532400803888403, 0.882531191167669, -1, 0.489532154747067, 0.670777541765506, -0.628625266081013, -0.11815742082808, 0];
        actual = matrixUtilities.multiply([0, -1, 1, 0.0151992826793339, 0.527572952456573, 1, 0, 0, 1, 0.628625266081013, -1, -1, 0], [0.74502590473044, 0, 0.35065200615239, 0.880188504643826, -1, -1, -1, 1, -1, 0.882531191167669, -1, 0.489532154747067, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.124247526342165, -1, -0.795824809836142, 1.92007233617831, 0, 0.334923342026269, 0.920072336178307, -2, -1.33492334202627, 0.0799276638216934, 2, 0.334923342026269, -0.795824809836142];
        actual = matrixUtilities.multiply([1, 0, 0, 1, 1, 0, 1, -1, 1, -1, 1, 0, 0.795824809836142], [-1, 0, -1, 0.920072336178307, -1, 0, 1, 1, 0.334923342026269, 1, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.6597389502729, 1.49544299230699, -0.842536462863226, -0.00910006463951429, -0.0541893965817007, 0.157463537136774, 0.340261049727099, 0.504557007693014, -1.15746353713677, 0.668839014912415, 0.549632388888687, 0, 0];
        actual = matrixUtilities.multiply([1, 1, 0, 0, 1, -1, 1, -1, 0, 0, 0, 1, 0], [0, 0.83231977225855, 0.161190590430605, 1, 1, -1, 0.659738950272901, 0.495442992306986, 0.157463537136774, 0.668839014912415, 0.549632388888687, 0, 0.865214837186604]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.204160385073566, -1.96497073581674, -0.0803541840388137, 0.176107440065812, 1, 1.35465452881533, -0.463578646287126, -1.7972647905337, -1.22225146890723, 0.0219919427584788, -1, -0.955711456064392, 0];
        actual = matrixUtilities.multiply([0.976716614783144, 0.440400753375329, 0.988254121033593, 0, 0.37988686812105, -1, 1, -1, 0.797264790533699, 0, 0.0474395076965166, 1, 0], [0, 0, 0, 0, -1, 0.508592654256426, 0.463578646287126, 0, 0.933579332629954, 0, -1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -0.868644646307754, -1.78399749881774, -1, -0.868644646307754, 0.216002501182259, -1, 0, 0, -1, 0, -0.929648381159477, 0];
        actual = matrixUtilities.multiply([-1, -1, 0, -1, 1, 0, 0, 1, -1, 0, 0.0703516188405229, -1, 0], [-1, 0, -1, 1, 0.868644646307754, 0.783997498817741, 0, 0, 1, 1, 0, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.610487173130031, -0.193389967639646, -1.53494528193723, 0.230791964675669, 0.79715755851807, 0.57753597785604, -1.27338266059448, -0.79715755851807, 0.465054718062773, 0.726617339405519, -0.79715755851807, -1.53494528193723, -1];
        actual = matrixUtilities.multiply([-1, 0, 1, 1, 0.0425906959188127, -1, -1, 1, 0, -1, -1, 0.594996503831351, 1], [0.883869833724513, 0.603767590878423, -1, 0.273382660594481, 0.79715755851807, 0.534945281937227, -1, 0, 1, 0, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -1, 0, 1, -0.825222276535454, 0.815585699312196, -1, 0.557956631089541, -2, 0, 0.18495145774677, -0.815585699312196, -0.893818565129218];
        actual = matrixUtilities.multiply([0, 0, 0, 0, -1, -1, -1, 0, 1, -1, 1, 0, -1], [-1, 1, 0, 0, 0.0411570938495719, 1, 0, 0.226108551596342, 0.184414300687804, -1, 0.599113724939112, -1, 0.893818565129218]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [3, 0.457857960582645, 0, 1, 1, 0, -0.282497579363406, 0.259644460053949, 1, 1, 0.457857960582645, -1, 0];
        actual = matrixUtilities.multiply([1, 1, -1, 1, 0, 0, 0.717502420636594, -1, 0, 0, 1, 0, 0], [0, 0, 0.023751231852803, 1, 1, 0, 1, 0.457857960582645, -1, -1, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, 2, 1.17409632269949, 1, 0.38991001173384, 0.0678818992265785, 1, -1, 0, -1, 0, -0.174096322699495, -0.348910168441436];
        actual = matrixUtilities.multiply([1, 1, 0, 0.38991001173384, 0, 1, 0, -1, 0, -1, 1, 0, -1], [1, 0, -1, 0, 1, 0.174096322699495, -1, 1, 0, 1, 0, 0, 0.348910168441436]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.269273137799126, 1, 1, -1.54511675263993, -1, -0.947085498119707, -2, 0, -0.349254951974961, 0.704407829188, 0, 0.349254951974961, 0];
        actual = matrixUtilities.multiply([0.730726862200874, 0, -1, 0.696623557571612, 0.151506804931679, 1, 1, -1, 0, 0.295592170812, 1, 0, 0], [1, 0, 0.0678085713031742, -1, 0, 0, 1, 0, 0.349254951974961, -1, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0.878504151887495, -0.878504151887495, 1, -1.66352959380649, 0.256930083621726, 0, -2, 1.65771879891759, -1, 2.66352959380649, -1.25693008362173, 0];
        actual = matrixUtilities.multiply([0, 0.878504151887495, 0, 1, 0, -1, 1, -1, 0, -1, 1, 1, 0], [1, 0.748136211069364, 1, 0, -1, 0.657718798917587, 0, 1, -1, -1, 0.663529593806495, 0.400788715295861, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.49534801230549, -0.260834669350104, -1, 1.54017313161479, -0.772216400491174, -0.5698368027649, -0.930133750970261, 1, -0.107857092799552, -0.887417841862101, 1, -0.173800432204176, 0];
        actual = matrixUtilities.multiply([0, 0.260834669350104, 1, 0.227783599508826, 1, 0.705668640185925, 0, -1, 0.107857092799552, 0, -1, 0.173800432204176, 1], [0.586746495024649, 0, 0, 0.364663571289118, 1, 0.596319654768482, 1, -1, 0, 0.64776684793074, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.17301914272231, -0.221588084454323, -0.298521988698524, 0.59211354544019, 1.86774815007474, 0, 0.615759998846687, 2.13225184992526, -2, 0.711464973032225, 0.867748150074737, 1, 0.395163393763436];
        actual = matrixUtilities.multiply([0.818916267631071, 0.520394278932546, 0.139954045945757, -1, -1, 1, 1, -1, 1, -1, 0, 1, 0.395163393763436], [0, 0.127919129155539, 0, 0.0118232267032486, 0.132251849925263, -1, 0.119351427592035, -1, 1, 0.723288199735474, 1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.376010224717033, 0.815815676563572, -1.07384056601387, -0.0921664011452793, -0.0192566076383258, 0.695825468607166, -0.819870767503062, -0.173028278013459, 0.346823466171894, 0.718051869756566, 0.0531668759978078, -0.390199611610826, 1];
        actual = matrixUtilities.multiply([0.0738405660138654, -1, 1, -1, 0, 0.304174531392834, 0.653176533828106, -1, 0, -1, 0.390199611610826, 1, -1], [0, -1, 1, 0.275774194521724, 0.0192566076383258, -1, 1, 0.185606242243949, -1, 0.603626452667465, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.185546885595752, 1.65857164882621, 0.170258268312883, -1.52387039387779, 0.553738596023892, 0.0564538728110435, 1, -1, 0, 2, 1.70460931710182, 0.118568289148886, -0.75692800514257];
        actual = matrixUtilities.multiply([0, 0.145130370345493, -1, -1, 0.476129606122211, -1, 0, 0, 1, 1, 1, 0, 0.75692800514257], [0.884262095617252, 0.706610369359427, 0.202199426573794, 1, 0.852144934633814, 0, 1, 0.852464382468008, 0.118568289148886, 1, -1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.725014332088183, 1.53773992766521, -0.462260072334791, -0.433829287734735, -0.885019641316039, 1.11498035868396, -1.27498566791182, 1, 3, -1, 0.803429234681385, 0.803429234681385, 0];
        actual = matrixUtilities.multiply([1, 0.462260072334791, 1, -1, 0.0438632611389567, 0.158843619822917, -1, -1, 1, 0, 0.196570765318615, 1, 0], [-1, 1, 1, 0.274985667911817, 1, -1, 0, -1, -1, -1, 1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.147843456895949, -0.0569617264238007, 0.680644055323426, 0.100578854764743, -0.110633410564919, 0.110633410564919, 1.20578913981982, -2.11780506657334, 1.96321855420757, 0.0224463055014826, 2.06843542497067, -1.70427724798409, 1];
        actual = matrixUtilities.multiply([0.0569617264238008, 1, 1, 0, 0.110633410564919, 0, 0.424503751762446, 0.693301314810897, -1, -1, -1, 0.0684354249706657, 1], [0, 0, 0.644425407352124, -1, -1, 0.635841823013426, 0.909118269527852, -1, 1, -1, 1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -0.584373303495521, 0.520627805739934, 0.772380052028401, -1, 1, 0.227619947971599, 1, -0.62965576519708, -0.772380052028401, 1, -2, 1];
        actual = matrixUtilities.multiply([0, 0, 1, 0, 1, 0, -1, -1, 0.385115125395877, 0, -1, -1, -1], [1, 0.584373303495521, 0.479372194260066, -1, 0, 0.0147708905929564, 0.772380052028401, -1, 1, 0, 0, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.45458602647045, 1.47399129507783, 1.70142962696878, 2, 0, 0, 0.368809501346578, -1.63119049865342, 0, 0.214857069875513, -1.78514293012449, 0, 0];
        actual = matrixUtilities.multiply([0, 1, 0.509702634303692, -1, 0, -1, 0.631190498653422, 0, -1, 0.785142930124487, 0, -1, 0.964288660774142], [1, 1, 0.800741821900356, -1, -1, 0, 0, 0, 0.929283367902638, -1, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.378344888915472, 1.81368008852642, -0.18631991147358, -0.434612871350075, -0.434612871350075, 0.434612871350075, -0.387963120366522, 0.692642407348679, 0.857665180162371, 1, 0, 0, 0.164346201332735];
        actual = matrixUtilities.multiply([0.422253557211838, -1, 1, 0, 0.434612871350075, 0, 0.775153793755525, 0.0825113864068461, 1, 0, 0, -1, 0.391426531314583], [0, 1, 1, 0.896013502914465, 1, 1, -1, -1, 1, -1, 0, 0, 0.419864746471804]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.691592501798455, 0.910874062176269, 0.70503327516142, -0.270638961611696, -1.88695447759938, -0.640529732699634, 0.661260937648481, 1, 0.0387432621972371, 0.0303315641499737, -1.6388141208509, -0.172670132560968, 0];
        actual = matrixUtilities.multiply([0, 1, 0, -1, 0.564815227205313, 1, 1, 0, 0, -1, 1, 0.83896014552515, 1], [0, 0.710728037502024, 0, 0.661260937648481, 1, 0.0387432621972371, 0.691592501798455, 0.200146024674245, 0.70503327516142, 0, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.15346673510664, 0.304369229640522, 0.366946892916806, -1, 1, -0.912054016679551, 1.61535549937531, -1.21631163617733, 0.91995032707058, -0.216793670419973, -0.115540341985151, 0.319922009301373, 0];
        actual = matrixUtilities.multiply([0.543562252327596, 0.390095517220951, 1, 0, -1, 0, 0.384644500624689, 1, -1, 0, 0.350770901120627, 0.5675645715406, 0], [0, 0.188363134483045, 0.71524508470448, -1, 0.515136427485913, 0.0205288529491652, 1, -1, 0.912054016679551, -1, 0.414456030081239, 0, 0.679181878305591]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.356560794336982, -0.509872608124219, -0.490127391875781, 0, 2, -1, 1, 1, -2, 1, -3, 2, -0.153311813787237];
        actual = matrixUtilities.multiply([-1, 0.356560794336982, -1, 0, -1, 1, -1, -1, -1, 1, 1, -1, 0.153311813787237], [0, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.37084952619432, 0, 0.466464279301936, 0.195168539506927, 1, 0.292931838250751, 2, 1, -0.363966684492289, -0.679966670777633, -0.200188394263474, -0.825376691405717, 0];
        actual = matrixUtilities.multiply([0.255782504685122, 0, 1, 0.804831460493073, -1, 0, -1, -1, 0, 0.479778276514159, 0.200188394263474, -1, 0.626632030879442], [1, 0, -1, -1, 0, 0.363966684492289, -1, -1, 0, 0, 0, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.08223778199509, 2, 0, -0.0822377819950868, 0.038625978882716, -2, -0.0822377819950868, 1.97411480666932, -0.05297955360868, 0.0690961708678402, -0.605293554535738, 0.605293554535738, -1];
        actual = matrixUtilities.multiply([0, -1, 0, 0, -1, -1, 0.0324639519827738, -1, 0.979484398374094, 0.234906280522657, 0.840199835058395, 0, -1], [1, -1, -1, 0, 1, -1, 0.0822377819950868, -1, 1, 0, 0.961374021117284, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.705792632748276, 0.854221456150627, 2, 0.294207367251724, 0, 0, -1, -0.145778543849373, 2, 0.223897632395018, 0, 0, 1];
        actual = matrixUtilities.multiply([1, -1, 1, 0, 0, 1, 1, -1, 0, 0, 0, 0.761019802075354, -1], [0, -1, 0, -1, 0, 1, 0, 0.145778543849373, -1, 0.294207367251724, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.265357225791252, -0.265357225791252, 0.634215915870953, 1, -2, 0.937961882417073, 0, 1, -0.0538106006820736, 2, -2, -1.0579243591325, 0];
        actual = matrixUtilities.multiply([1, 1, 0.265357225791252, 1, -1, 0, -1, -1, -1, 0, -1, 1, -1], [-1, 0, 0.154237459019868, 0, -1, 0.995886241549573, -1, 1, 0.0579243591325005, 1, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.21734277169096, 0, -0.610069011622141, -1, 0, -1, 1, 0, 1, 0, 0, -0.112171217385759, 0];
        actual = matrixUtilities.multiply([-1, 1, 0.610069011622141, -1, 1, 0, 1, -1, 0, 0, 0, 0.112171217385759, -1], [0.217342771690964, 0, -1, 1, 1, 1, 0, 1, 0, 0, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.129676349055803, 0, 0.073274767991749, -1, 1, 1.22122311790346, -1.86326309519972, 1, 0.136736904800281, -0.384120218169, -0.177407406818777, -0.689253999354798, 0];
        actual = matrixUtilities.multiply([1, 0.306474035748501, 0, 0.397492611500198, 0, -1, 0, 0.863263095199719, -1, 0.0892666350534496, 0.561527624987777, 0.177407406818777, 0.176797686692699], [1, 0, -1, 0, 0, 0.556546490432949, -1, 0, -1, 1, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.21776149059542, 2.78223850940458, 0.542145664346842, 2.47582355303495, -1.04646634126383, 0.560701475731802, -1.33130906398003, 2.66869093601997, 0.458489986092522, 1.25921399763749, -1.25921399763749, 0.0341651374633262, 0];
        actual = matrixUtilities.multiply([0.782238509404584, -1, -1, 0.714678605885561, 1, 0.761144947149393, 0.668690936019966, -1, -1, 0, 1, 0.259213997637487, 0], [0, -1, -1, 1, 1, 0.736745627940048, 1, -1, 0.0341651374633262, 1, -1, 0, 0.688540272735311]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.92006728747863, 0, 0, 0.0467005656318276, 0, 1.26415567298613, 0.538593814959095, 0, -0.2439510776866, -0.0467005656318276, 0, 0.735844327013867, 1];
        actual = matrixUtilities.multiply([0, 0.920067287478627, -1, 1, -1, -1, 1, 1, 0.508106750672733, -1, -1, -1, -1], [-1, 0, 1, 0.0467005656318276, 0, 0.264155672986133, 1, 0, 0, -1, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.478528995289714, 1.47003595266112, -0.478528995289714, -1, -1.11189174750442, -1, 0, -1, 0, 0.337278231669813, 0.377276141143072, 0.337278231669813, -1];
        actual = matrixUtilities.multiply([0, 0.521471004710286, 0.114097849984699, -1, -1, 0.570673724902176, -1, 0, 0, 0, 0.337278231669813, 0.147061665610905, -1], [1, -1, 1, 0, 1, 0, 1, 0.682565472406598, 1, 0, 1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.100776127560633, -1, 0.542654744136452, 0, 0, 0, 0.104238601786727, -0.650606437423549, 0.557009822017052, 0.241202050932311, 0.121851630565641, 1.10963403373066, 0];
        actual = matrixUtilities.multiply([1, 0, 0.417807921496131, 0, 0, 0, 1, 0.349393562576451, 0.432162999376731, 0.878148369434359, 1, 1, 0], [-1, 0.82247270169783, 0, 0, -1, 0.124846822640322, 0, 1, 0, 0.241202050932311, 0, 1, 0.461505341558487]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.462908213708041, 1, 0, -0.537091786291959, -1, 0.197039809635393, 1.35907306231838, 0.668550649037841, 1, 0, 0, 1, 0];
        actual = matrixUtilities.multiply([1, 1, 1, 0.197039809635393, -1, 0, 0, 0.668550649037841, -1, 1, 0, 0, 0], [-1, 0, -1, 0, 0, 1, 0.537091786291959, 1, 0, -1, 0, -1, 0.843470694424338]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0772643308515029, 1, 0, 0, -0.62067753850514, 1, -0.329639764674706, 0.0166256957295352, -1.25825192372233, 0.124053232972789, -0.62067753850514, 1.22836592571268, 0];
        actual = matrixUtilities.multiply([-1, 0, 0, 0, 0, -1, 0.231465557697912, -1, 0.0267863660244208, 0, 0.228365925712681, -1, 1], [1, 1, -1, 0.922735669148497, 0, -1, 0.543221290941919, 0, 1, 0, 0.62067753850514, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.594729681310584, 0.487545623205391, 1.80623694034584, 0.637810140213841, 0.455552663427497, 0.810058211254696, 1, 0.512454376794609, 1.19376305965416, 1, 0.512454376794609, 1.19376305965416, -1];
        actual = matrixUtilities.multiply([0, 1, -1, 0.637810140213841, 0, 0.888962381933333, 1, 0, 1, 1, 0, 1, 1], [0.405270318689416, 0, 1, 1, 0, 1, -1, 1, 1, 0, 0.512454376794609, 0.193763059654163, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.732905688571234, 1.17906697176382, 1.26709431142877, 2, -0.32957399651854, 0, -0.0270842728331146, 0.0270842728331146, 0.0270842728331146, -1.53428972058212, -0.392932452444421, -0.722506448962962, 0];
        actual = matrixUtilities.multiply([1, 0.267094311428766, 0, -1, 1, 0, 0.0270842728331146, 0, 0, 1, -1, 0.722506448962962, 0], [0.69519932227917, -1, -1, -1, 1, 1, 1, 0.67042600348146, 1, 0.6445759481958, -1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.136310835898067, 1.96726743580495, 1.79731495737146, -0.0372225498022617, 0.44834166761722, -0.963432296506894, 1.25286562147218, 1.33196999423232, 0.382225680964665, -0.74278365901801, -1, 2, 1];
        actual = matrixUtilities.multiply([0.97684360341022, 0, 0.136310835898067, 0.268437801053951, -1, 0.219993791179729, 0.395366903578568, 1, 0.99564928049019, 0, 1, -1, 1], [0, 1, 1, 0, 0.850654697441801, 0.955757697557918, 0.25721634098199, 0, 1, 1, 1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.01159495581481, 0.538085231862871, 0.115988631074299, 2, -0.962777450197738, -1.09710893784515, -0.287435261889833, 0.50228328094924, 0.593330347930004, -0.477660673127973, 0.988733577445892, 0.713600410044309, 1];
        actual = matrixUtilities.multiply([1, 0.558888486381103, 1, -1, -1, 0, 0.562331652064962, 0, 0.50228328094924, 0.643311892470025, 0.245904049484946, 0.751982703689478, -1], [0, 1, 1, -1, 0, 1, -1, 0.962777450197738, 0.0971089378451504, 0.547293530566289, 1, 0.0617155637879463, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.47959694311104, 1.02596726938964, 0.734337106894927, -0.0109045533514137, -0.660051552420506, -2.73600195848197, 1.92689785984137, 1.17699419941926, 0.00233883369228322, 0.0109692304446219, -0.996936835941965, -0.991674131303256, -0.240704509076059];
        actual = matrixUtilities.multiply([0.407933540366559, 0, 0.674801731330716, -1, 1, -1, 0.937352164153639, 1, 0.312445805087893, 0.0113122914970444, 0, -1, 0.240704509076059], [0.296761804864165, 1, -1, 1, 0.270781924142866, 0.736001958481968, 0.989438507701009, 0.61073037172236, -1, 0.000343061052422533, 1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.918119124098736, 1.39338166610961, 2, 0.0346972735596416, -0.833303306393404, -0.576246917516108, 1.0472547747704, 0.227026907396889, 0.577116136707885, -0.13935999019973, 0.13935999019973, 0.13935999019973, 0];
        actual = matrixUtilities.multiply([1, 1, 0, -1, 0.423753082483892, 1, 0, 0.577116136707885, -1, 0.13935999019973, 0, 0, 0], [0.107433733114709, 0, 0, -1, 1, 1, 0.0818808759012636, 0.393381666109609, 1, -1, 0, 0, 0.231552678733856]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.203654331249955, 2, 0.181380286431583, 1, 0, 0.0109433061494228, -0.299888502014749, -1, -0.545869846834593, 1.5143956549067, 0, 0.841493851249907, 0];
        actual = matrixUtilities.multiply([-1, -1, -1, 0, 0, 1, 0.541225676211168, 1, 0.158885821774083, 1, 0, 0.514395654906703, 1], [0.796345668750045, 1, 0.028188254697336, 1, 0, 0.83586466211633, -1, -1, -1, 1, 0, 0.0109433061494228, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.86895300209008, -0.637459846975962, 0.00320826703831939, 0.667833293633458, 0, -0.72238806249685, 0, 0, 0, 0.422248094073612, -0.72144633052938, -0.304085250603354, 0.328237893678359];
        actual = matrixUtilities.multiply([0.868953002090078, 1, 1, 0.332166706366542, 0, -1, 0, 0, 0, -1, 0.72144633052938, 0.577751905926388, 1], [0, 0.362540153024038, 0.280820204541469, -1, 0, 0, 0, -1, -1, -1, 0, 0.72238806249685, 0.328237893678359]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.752661140986095, 1.04840397151029, -0.263411299448186, -0.627810132982121, -1.49513527994243, 0, 1.44877008408848, -0.257205634963329, 1.7754413368066, -1.20325311562198, 1.19095365726051, -0.807797110550011, 0];
        actual = matrixUtilities.multiply([0.540993267456532, -1, 1, 0.206538739244704, 1, -1, 0, 0.775441336806603, 1, 0.816727398809384, -1, 0.192202889449989, -1], [0.632939267266979, 0.530339375385241, 0.263411299448186, -1, 0.111845467757362, 0, 0.578728606262584, -1, 1, 1, 0.518235701843275, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.216392425920997, -1, 2, 0.939571943901689, 0.432056919872787, 0.567943080127213, -1.97885073860122, 1, -2, -0.325044776939224, 1.46964456395695, -0.770398003873601, -0.277581968008346];
        actual = matrixUtilities.multiply([1, 0, 0, 0.567943080127213, 0, 1, -1, -1, -1, 0.229601996126399, -1, 0.699246560083351, -1], [0, 0, -1, 0.216392425920997, -1, 1, 0.945784949672308, -1, 1, 0.816673363007919, 1, 0, 0.277581968008346]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.66912639079109, -0.330873609208909, 0.985197267507535, 2, 0, 1.06174460941076, 2.85308817860349, -1, 0.0617446094107557, -1.85308817860349, 2, 0.16960458185971, 0];
        actual = matrixUtilities.multiply([1, 0.669126390791091, 0, 1, 1, 0, 1, 1, 1, -1, 0, -1, 0], [0.287786089017888, -1, 0.199173384904477, 1, -1, 0.83039541814029, 1, 1, 0.231349191270466, 0.853088178603485, -1, -1, 0.821664485531703]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.234041129813549, 0.215566767017786, -0.200468936097095, 1, 1, -1, 0, 1, -1, 1.09385685394232, -1, 1, 0.0335721937164535];
        actual = matrixUtilities.multiply([-1, 0.799531063902905, -1, 1, 0, -1, 0, 0, -1, 0.0938568539423201, 1, 0, 0.0335721937164535], [-1, 0.449712373525702, 0, 1, 0, 0, 1, -1, 1, 0, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.757636915564433, 0.681872226496545, -0.949169327481263, 0.721064372911524, 0.243859352540764, -0.254349380384362, 0.00891686324445388, 1.14330706007001, -1.5561372849886, 1.54722042174415, 0.412830224918588, 0, 0.14705013024949];
        actual = matrixUtilities.multiply([0, 1, 0.949169327481263, 0.228939351732349, 0.847461905259388, 0.0254100286520133, 0.556137284988601, -1, 1, 1, 1, -1, 0.14705013024949], [1, 0.846981133263084, 0, 1, 1, -1, 0.579729841360697, 0, 0, 0.032509419616549, 0.587169775081412, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.0750325755437887, -0.756700056824747, 1.14771258931035, 0.180166551407531, 1.55518560631406, -0.952069158643516, -0.789180101889263, 1.08383169738704, 0.621898345473175, -1, 0.118869049995611, 0.881130950004389, 0];
        actual = matrixUtilities.multiply([-1, 0.302662243276212, 0.147712589310348, 0.952069158643516, 0.750269706710367, 0, 0.378101654526825, 0.877919801919684, 1, 0.118869049995611, 0, 1, 0], [0.884842145203074, 0, 0, 0, 1, -1, 0.240135713592235, 0.803866186087889, 0, -1, 0, 1, 0.948465149825655]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -0.701790071885004, 1.40105861583774, 0, -1, 2, 0, -1, 0, 0, 0.791299852445396, -0.344497405152999, 0];
        actual = matrixUtilities.multiply([0.701790071885004, 0, 0.699268543952735, 1, 0, 1, 1, 0, -1, 0.208700147554604, -1, 0.446802447292396, 0], [0.86360791365784, 0, 0, 0, -1, 1, 0, -1, 1, 0, 0, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.627119640646092, 0.731138925787635, 0.261997652305626, -2, 1, -0.832054793290819, -2.10303397155508, 1.1579055968476, -0.835050325147531, 1, 0, -0.941238067551161, 0.984183379441585];
        actual = matrixUtilities.multiply([-1, 0.357063738795493, 1, 1, -1, 0, 0.945128374707479, -1, 0.157905596847602, -1, -1, -1, 0.984183379441585], [-1, 0.0896201525300835, 0, -1, 0, 0.0545916371301709, 1, -1, 0.88664643042099, -1, 1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.184701646764158, -0.28858237913278, 0.925026351374536, -1, -0.803395954334827, -0.285995968213843, 0, 0.981171703422988, 0, -1, -1.05365386561195, 0.302752072011435, 0];
        actual = matrixUtilities.multiply([0.526715974103061, -1, 0.483284817767928, 0.196604045665173, 0, -1, 0, 0.981171703422988, 0, 0.946346134388049, -1, -1, 0.29858317100377], [-1, -1, 1, 0, 1, 0.785267426066691, 0, 1, 0, 1, 1, 0.440382721107631, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 0.0382551052841839, 1.02742203932694, 0, 0, 0, 0, 0.265513207543622, 0, -1, 0, 0.855405233267418, 0];
        actual = matrixUtilities.multiply([0.189647522843279, 0.0930019440562473, -1, 0, 0, 0, 0, 0.645488864577137, 0, -1, 0, -1, 0], [-1, 1, 1, 0, 0, 0.144594766732582, 0, 0.411336619598482, 0, 1, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, 0, 0, -0.498370349173607, 0, 0.735666381072098, 1.06685945109629, 0, 0.356502502391349, 0.896081007744699, 0, 0];
        actual = matrixUtilities.multiply([0, 0, 0, 0, 0, 0.498370349173607, -1, 0.264333618927902, 0, -1, 0.643497497608651, 0.266682584894208, 0], [0.632031268268838, 0, 1, -1, -1, 0, -1, 0.252935859492484, 0, 0, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -1, 1, -1.31401887643804, -0.0178961413995811, 0.700696336079885, 0, 1, -1, 0, -0.062183870031584, 0.062183870031584, 0];
        actual = matrixUtilities.multiply([0, 1, 0, -1, 1, 0.982103858600419, 0, -1, 0, 0, 0.062183870031584, 0, 0], [1, 0.85552519320302, 1, 0.331915017837619, 0, 1, 0, -1, 1, -1, 1, 0.713464599434968, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -2, 0.56158257115706, 1, -1, 2, 0, 0.327638666763733, -0.327638666763733, -1.63777691760928, 2, -1.19935948876634, 0];
        actual = matrixUtilities.multiply([0, -1, -1, -1, -1, 0, 0, 0.327638666763733, 0, 0.637776917609282, 1, 1, 0], [0.418926997770987, 0, 1, -1, 0, -1, 0, 1, -1, -1, 1, 0.43841742884294, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.95274840479379, 0.0879156706332768, 0, -0.904602928508354, 0.0879156706332768, 0.749173869262065, -1.00089388107923, -1.91208432936672, -0.749173869262065, -0.943381504519833, -0.717530219684136, 0, -0.0556861525660782];
        actual = matrixUtilities.multiply([0, 0, -1, 1, 1, -1, -1, -1, -1, 0, 0.194554109682587, -1, -1], [1, -1, 0, 0, 0, 0.749173869262065, 0.0481454762854359, 1, 0, 0.95274840479379, 0.912084329366723, 0, 0.0556861525660782]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.19219394782195, -2, 1, 1.56806646546725, -1, 2, -0.650537086087283, -0.0928972429097152, -1.09289724290972, 1.56806646546725, -1, 2, 1];
        actual = matrixUtilities.multiply([1, 1, 0, 1, 1, 0, 0, -1, 0.0928972429097152, 1, 1, 0, 1], [0.6241274823547, -1, -1, 0.898313336958323, -1, 1, 0.669753128508922, 0, 1, 0.206852666664334, -1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.618374906768266, 0.655453480154021, -1, -0.192826670218644, -0.266053629697325, -1, -0.232721566330977, 1.34454651984598, 3, 0.192826670218644, 0.266053629697325, 1, 0];
        actual = matrixUtilities.multiply([-1, -1, -1, 0, -1, 0, -1, 1, 1, 0, 1, 0, 0], [0.490702935722984, 0, 0, 0.425548236549622, -1, -1, 0.192826670218644, 0.266053629697325, 1, 0, 0.0784928901486531, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.286834529734605, -0.611510743598014, -1.6996615641186, -0.388208026712857, -0.611791973287143, 0.0663289698149678, 0, -1, -1.31984559228637, -1, 0, -1.31781212767484, 0];
        actual = matrixUtilities.multiply([0, 0.0134765021565727, -1, -1, -1, 0.388208026712857, -1, 0, -1, -1, 1, -1, 0.699688968108822], [-1, 0.535970654588179, -1, 1, 0, 0.319845592286366, -1, 1, 0.00203346461152354, -1, 1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.513009689055853, -0.0641787271314201, -0.167817925181155, -0.261625545641625, 1.01445810450914, 0.878873192098488, 0.679204510778104, 1.66359049019571, 1.55163709046151, 0.34175954635337, 0, -0.171470026565469, -1];
        actual = matrixUtilities.multiply([-1, 0, 1, 0.187506865797335, 0.826951238711808, 1, 1, 0.663590490195709, 0.294969400528338, -1, 1, 0, 1], [0.936250829573838, 0.93582127286858, 0.825969636359238, 0.449260518629691, 1, 1, 0.791020064983061, 1, 0.828529973434531, -1, 0, 0.00621243845960705, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.61758259759172, 0.795748021824168, -0.360133148101627, 1, 1, 0, -1, 0, -0.874923799594363, 0, 1, 1.12507620040564, 0];
        actual = matrixUtilities.multiply([0.178165424232448, 1, 0.38241740240828, 0, 1, 0, 1, 0, 1, 1, -1, -1, 0], [0.856468011092613, 1, 0.340690659517744, 0, 1, 0.125076200405637, 1, 1, 0, -1, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.479847663830122, 0.5046505591588, 2.08896155805414, 0.240449764412106, -1.42005785807039, 1.67148606929532, 0.759550235587894, 1.42948283554496, 1.32851393070468, 0.687465815193702, 1.49072148404551, 1.25642951031049, -0.917223751506407];
        actual = matrixUtilities.multiply([-1, 0, 0.522771762461761, -1, 1, -1, 0, 1, 1, 0.0720844203941917, 1, 1, 0.917223751506407], [-1, 0.906452203125903, 1, -1, 0.849540693615349, -1, 0, 0.429482835544964, 1, 0.759550235587894, 1, 0.328513930704684, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.95651079383929, -0.232672975041286, 0.412971537752529, -0.434948448759945, 0.239331564977454, -1.2093611314005, -1.48736872267321, -2, -0.97002956642305, 1.48275975868674, 0.263204957015442, -0.63710415841574, -0.0215858463298463];
        actual = matrixUtilities.multiply([0, -1, 0.232672975041286, -1, 0.239331564977454, 0, -1, -1, 1, 0.798161990380921, 0.837274922447873, 0.574069965432431, -1], [1, -1, 0.354355487206185, 0.674280013737399, 0, 0.97002956642305, 1, 1, -1, 0.186911291064188, -1, -1, 0.0215858463298463]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 1, 0, 0.700572482636465, -0.0992272366300352, 0.206097903757402, 1, 0.900772763369965, 0.858193045416006, 1.44123580467013, 1.3420085680401, 1.14592076996722, 0];
        actual = matrixUtilities.multiply([0, 0, 0, -1, 1, 1, 0, 1, 0, 0.441235804670134, 1, 0, 1], [0, 1, 0, 1, 1, 0.652095141658604, 1, 0.900772763369965, 0.858193045416006, 0.700572482636465, 0, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.158721431698055, 1.0641038473994, 0.519482267620089, -1, -1, -1, 1.84586701208999, 1, 0.522963619568834, -0.567234664980071, -1, -0.439915412232709, 0];
        actual = matrixUtilities.multiply([0.190002915537917, -1, 0.12285150407015, 0, 0, -1, 1, -1, 1, 0.308088004732546, 0.808894526590078, -1, 1], [0, 0.941252343329253, 1, 1, 0, 0.155967050304621, 0.154132987910012, 0, 0.633003430735787, 1, 1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.112097464088396, 0.672186727017251, 2.29602429191397, 0.0156165836451652, -0.984383416354835, 1.00477193526301, -1, -0.848481803130583, -0.119729215800636, 1, 0.853439904246429, 0.677547451889863, 0];
        actual = matrixUtilities.multiply([1, 0.990455841641154, -1, 0.0156165836451652, 1, 0, -1, 0.185839234472178, 1, 1, 0.371979001617049, 0.668190129878088, -1], [0.887902535911604, -1, -1, 1, 1, 0.305568450272814, 0, -1, 1, 0, 0.337357431341595, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.9648133008577, 0, -1.81329510398828, -1.94420787656554, -1.74916334531697, 2.45090623442786, 0.0744725750174712, 0, 0.955647810341626, 1.4603485592922, 1, -1.30883036242278, 0.296649654999678];
        actual = matrixUtilities.multiply([0.964813300857699, 0, -1, -1, 0.749163345316967, 1, -1, 1, -1, 0.460348559292196, 0, -1, 1], [1, -1, 0, 1, 0, -1, 0.0744725750174711, -1, 0.804129613472209, -1, -1, 0.848481803130583, 0.296649654999678]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.555158789201011, -1.47999983070418, -0.133662624578461, -0.00192588009029904, 0, -0.201028884947779, -0.295525902554172, -0.929744732067801, 1.08648228117978, 0.0615600173614008, -0.571043975451516, 1.02779736546272, -1];
        actual = matrixUtilities.multiply([0, 0.821689119945135, 0.479999830704182, 1, -1, 0, 0, 1, 0.929744732067801, 0.115021573433197, 0.882781520896955, 0.571043975451516, -1], [0.596289670372517, 1, 1, 0.63229294942333, 0, 0.798971115052221, 0.634218829513629, 0, 1, -1, -1, 0.0930172317163168, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.974754305079, -0.231463948372502, 0, 0.225133274321041, 1.17302303773666, -1.01489756350168, 0.814977450675786, 0.626339552107813, -0.814977450675786, 1.04263998077367, 0.832718410916961, -0.975506720856133, 1];
        actual = matrixUtilities.multiply([0, 1, 0, 0, 0.225133274321041, -1, 0, 0.814977450675786, 0, 0.0641823592894629, 1, 0, 1], [0.974754305078999, -1, 1, 0.664356705576348, 1, 0.381620112052942, 1, 0.768536051627498, -1, 0, -1, 0.789764289180638, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.119607027210112, 1.68707315702321, -0.532039890974101, 0.0641386922904476, 0.463754816196745, 0.388712100852209, 0.119607027210112, -1, 0.724877560848779, -0.119607027210112, 1.86136444092792, -0.643111876269819, 0];
        actual = matrixUtilities.multiply([-1, 0, 0.687073157023207, 0.536245183803255, 1, 0, 1, 0, 0, -1, 0.570036470224166, 0.291327970703751, 0], [0, 0, -1, 0.119607027210112, -1, 0.724877560848779, 0, 1, 0, 0, 1, 0.280665410813254, 0.540180647531608]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, -1.95411325165984, -0.217274417270568, 1.67182605139531, 1.60442745548959, 1, -1, -0.920595893133709, -1, -1, -1.04282134028283, 1, 0];
        actual = matrixUtilities.multiply([0.217274417270568, 1, -1, -1, -1, 0.671826051395305, 1, 0, -1, -1, 1, 0, 0], [0.24415804084584, 1, 0.480608416013703, 0, 0.0428213402828301, -1, -1, -1, 0, 1, 0.963417233416539, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.431256153393841, 0, 1.80284693269192, 1, -1, -1, 0, -1, 0, 1, -1, -1, 0.802846932691916];
        actual = matrixUtilities.multiply([1, 0.527217023320131, 0, -1, 0, 1, 0, -1, 1, -1, 0.907047382978279, 1, 0.802846932691916], [0.708408817978766, 0, 1, -1, 0, 1, 0, 0, 0, 0, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.26499984844821, -0.793642960858365, 1.65330689617121, -0.598716654174734, -1, -1.80615142677266, -0.502223363380052, -0.303226297396806, -1.57946989200053, 1.86380942532039, 1.11099076724346, 0.212104980536898, -1];
        actual = matrixUtilities.multiply([-1, 0.232776788171742, -1, 0, -1, 0.806151426772658, -1, 0, 1, 0.366032788700439, 1, 1, -1], [0, 0.723193451633301, -1, 1, 0.303226297396806, 0.579469892000533, 1, 1, 1, 0.497776636619948, 0, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.0211171927028881, -1.92303489330474, -0.793423000161267, -0.882365209927021, 1.02292615674761, 0.772305807458379, 1, -0.259591689454201, -0.772305807458379, 0.0528801637947933, -1.92499501155611, -0.772305807458379, 0.0030714131320935];
        actual = matrixUtilities.multiply([-1, -1, 0, 1, 0, 0.117634790072979, -1, 1, -1, -1, -1, 0.0528801637947933, 0.0211171927028881], [-1, 0.58085722037631, -1, -1, 1, 0.772305807458379, 1, 0.935300967160287, 0, 1, 0.194892656614488, 0, 0.145446091026741]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.120888525210735, 2.81832862823192, 0.401889517624811, 1.04930630024341, 0.410462785237684, 0.32065528364351, 1.76007410174239, -0.476936143971218, -0.000502652954544214, -0.493762997991799, -0.0245874812369762, 1.10064085614695, 0.636647590266842];
        actual = matrixUtilities.multiply([1, 1, -1, 1, 0, 0.40786584299424, 0.639185576531657, -1, 1, 0.457960235633869, 1, 0.399349452648009, 1], [0, 1, 0.401386864670267, 1, 0.818328628231924, 0, -1, 0, 0.786680973966923, 0.120888525210735, -1, 0.786178321012379, 0.636647590266842]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.48454250760602, -0.108382570579915, -0.579206142499428, 0.460597823122795, -1, 0.100385964429186, 0.0045676730755611, 0, 0, -0.517128767220829, -1.62118486902732, -0.417911086891736, 1];
        actual = matrixUtilities.multiply([1, 0.61819354799492, 0, 1, 0, -1, 0, 0, 0.00846802862755397, 1, -1, -1, 1], [0.880118237752522, 0.507604951275329, -1, 1, -1, 0.100385964429186, 0.977726590343624, 0.621184869027317, 0.518297051320922, 0.539402176877205, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.519835972003562, 0.90321313431104, 0.519835972003562, 1.61977091739875, -0.440728654296897, -1.61977091739875, 0, -0.84642419724093, 0, 1, 0.250464765471623, -1, 0.565020791212383];
        actual = matrixUtilities.multiply([0, 0, 0.306587736730737, 0, -1, 0.619770917398748, 0, -1, -1, 0, 0, 1, 0.8264237087343], [-1, 1, 1, 0.301000900241081, 0.658920999923219, 1, -1, 0.595959431769307, 1, 1, 0.250464765471623, -1, 0.683693830707899]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.728758891452457, -0.574279420810882, -0.728758891452457, -0.347920818416365, 1.04488250615303, 0.347920818416365, -1, 1, 0, -1, 0.303038312263339, 1, -0.271241108547543];
        actual = matrixUtilities.multiply([1, -1, -1, 1, -1, 0.347920818416365, 0, 1, 1, -1, 1, 1, 0.271241108547543], [-1, -1, 1, 0, 0.696961687736661, -1, 0, 0, -1, -1, 1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.69751549218666, -1.12016976118096, 1, -0.899032569664977, -0.531827695394647, 0.153701585789072, 0.816820253532762, 0.673369787015659, -1, -0.119304761346106, -0.553200025834702, 1, 0];
        actual = matrixUtilities.multiply([-1, 1, -1, -1, 0.846298414210928, 0, 0, 0, 1, 0, -1, 0, 0], [0.513322145451476, 0, 1, 1, 1, -1, 0.119304761346106, 0.553200025834702, -1, 0.816820253532762, 0.673369787015659, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [3.27811829202802, -1.63536173885994, 2.72324685506674, 1.54937279289447, -0.919902817681634, 1.15886987566895, 1.47197966159879, 0.489402274829057, 1.01476619626152, 1.81008378826551, -1, 1, 0.922022276987332];
        actual = matrixUtilities.multiply([0.723246855066738, 1, 1, 0.158869875668953, 0.5512557935674, 1, 1, 1, 0.0147661962615169, 0, 1, 1, 1], [1, -1, 1, 0.647129677071762, 0.504168471090574, 1, 0.810083788265513, 0, 0, 1, -1, 1, 0.922022276987332]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.0620753960973004, -1, 2.45179254303304, 0, 1, 1, -0.865245731484725, -0.865245731484725, 1.86524573148473, -1.48047236515231, -1, 2.48047236515231, -1];
        actual = matrixUtilities.multiply([1, 0.0620753960973003, 1, -1, 1, 1, 0.865245731484725, 0, 1, 1, 0.480472365152311, 1, 1], [1, 0, 0.389717146935741, -1, -1, 1, -1, 0, 1, 0, 0, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 1, 1.05204781426678, -0.15958939872663, -1.65826746153565, 0.034261382575871, 0, 0.925650915562013, 0.00386970733773339, 0, 0, -0.0520478142667784, 1];
        actual = matrixUtilities.multiply([0, 1, -1, -1, 0.658267461535645, 0, 0, 0.0743490844379873, -1, 0, -1, 1, 1], [1, 1, 1, 0.15958939872663, 1, 0, 0, -1, 0.0520478142667784, 0, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.19006872496026, 0.6625275694125, 0.838799799251743, 0.411206822711292, 0.243730197308459, -1, -0.260222324351527, 1.25784032477897, 0.581592921438437, -0.750618010303854, 1.47440367167555, -1, -1];
        actual = matrixUtilities.multiply([0.161200200748257, 0, 0.668224952029169, 0, 1, 0.243730197308459, 0.418407078561563, -1, 0.839433246217404, 1, 0, 0.47440367167555, -1], [-1, 0.166897583364927, -1, -1, 1, -1, 0.283084033654576, 0, -1, 0.525674661866238, 1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.876326753234643, 0, 1.32304941225939, 0, 0, 0, 0, 1, 1, -1.11954384908059, -2, 0.920167683586556, -0.676950587740611];
        actual = matrixUtilities.multiply([-1, -1, 0, 0, 0, 0, -1, 0, 0, 1, -1, 0.920167683586556, 0.676950587740611], [-1, 0, -1, 0, -1, -1, 0.199376165494032, 1, -1, -1, 0, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.36291635006802, 0.63708364993198, 2.33995430328425, -0.38529513049186, -0.545211580835847, 2.20100070761989, 0, 0.67723232259845, 0.67723232259845, 1, 1.89898925782134, 0.164281649591532, 0];
        actual = matrixUtilities.multiply([0.36291635006802, 1, 0, 0.38529513049186, 0.840083549656013, 1, 0, 0.67723232259845, 0, -1, 1, 0.101010742178657, -1], [0, 0, -1, -1, -1, 0.936729092587125, 0, 1, 1, 0, -1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.37266428739422, -1.41172037199685, 1.74323855561355, 1.10700898337065, 0.61919203068232, 1.82690658140043, 0.878337184248967, -0.374860634736186, 1.05179607358379, -1.34562922704296, -1.57982600553884, -1.74323855561355, 0];
        actual = matrixUtilities.multiply([1, 1, -1, 0.844301398305363, 0.534872553094697, 0.664516676526757, -1, 0.795034629197342, 1, -1, 0, -1, 1], [-1, 0.00845362246430182, 1, 0.345629227042957, 0.579826005538845, 0.743238555613551, 0.281706485562821, -1, 1, 1, 1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.153844381288553, -1, -1.15384438128855, 1.02438963531721, 1, -0.266858916388293, -0.343532123762896, 1, 1.10106284269181, 1.0178655365845, 1.47267498936163, 0.340200287926335, 0];
        actual = matrixUtilities.multiply([0, -1, 0.153844381288553, 1, 0, 0.367921759080105, 1, 0, -1, 0.47267498936163, 1, 0.707569590167873, 0], [1, 0.581191114420626, 0, 0.656467876237104, 1, 0.101062842691812, 0, 1, 1, 1, 0, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.922496721354061, 0, 1.16065548070394, 0, 0, -0.0579815418729473, -1.33545166223098, 0, 0.471926926241799, 0.230847383025497, 0, 0.73746355051988, 0];
        actual = matrixUtilities.multiply([1, 0.231041569835991, 0.480063598360896, 0, 0, -1, 1, -1, 0.807233719065429, 0.104604279205484, 1, 1, 0], [1, -1, 0.739415680402618, -1, 0, 1, 0.335451662230981, 0, 0.574877729441448, 0, 0, 0.0579815418729473, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.586622463346749, 0.995983927508809, 1.18653497481092, 0.0831448967024427, 0.0821816022890534, 1.67353798014742, 1.00165739988255, 1.75962589645423, -1.42800854110639, -0.179475865907838, -0.363703229835652, 2.37200663921623, 0];
        actual = matrixUtilities.multiply([0.512996994663494, 0, 1, 0, -1, 1, -1, 1, 0.849234157171675, 1, -1, 0.552317241463958, 0], [-1, -1, -1, 0, 0, 1, 0.503477566644306, 0.913802325219755, -1, 0.586622463346749, 0.995983927508809, 0.673537980147422, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.910391284576799, 0, 2.01941280486966, 0, 0, 0, 0.910391284576799, 0, -1, 0.0896087154232006, -1, 2, 0.556739781311126];
        actual = matrixUtilities.multiply([1, 1, -1, 0, 0, 0, -1, 0, 1, -1, 1, -1, 1], [-1, -1, 0.0194128048696615, 0, 1, 0, 1, 1, 1, 0.910391284576799, 1, -1, 0.556739781311126]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.388052449742357, 0, -1, -0.263719479676205, -0.263719479676205, 0.112587552707999, -0.422855278792097, -0.553241750948709, 0.572193063475307, 0.388052449742357, -0.173726545262023, 0.826273454737977, 0];
        actual = matrixUtilities.multiply([0, -1, 0, 0, 0, 0.263719479676205, 0, 0.336002187959851, 0.553241750948709, 0.173726545262023, 1, 0, 0], [1, 0.345671461590413, 1, 0, -1, -1, 0.388052449742357, 0, 1, -1, -1, 0.426921639790256, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, 2, 1.27978265577917, 0, -1, -0.279782655779171, 2, 0, -0.720217344220829, 0, 0, 0, 1];
        actual = matrixUtilities.multiply([-1, 1, 0, -1, -1, 0, -1, 1, 1, 0, 0, 0, -1], [0, -1, -1, -1, 0, 0, 1, 1, 0.279782655779171, 0, -1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.277304262718443, -0.881310974311177, -0.271871901692263, 1.31513290104456, 0.0485112453105446, 0.183063811533695, 0.424142745938682, 1.12560192268603, 0.246388705998437, 2.62964598910401, 0.548019053669655, 0.365767567588839, 0];
        actual = matrixUtilities.multiply([0.672515619393678, -1, -1, 0, 0.500492191640889, -1, -1, 0.673620976355682, 1, -1, 1, -1, 0.655808670286], [0.0379033503299129, 0.870177534814075, 0.143175395737949, -1, 0, 0, 0.629645989104009, 1, 0.365767567588839, -1, 0.451980946330345, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.95137304859296, -0.632194493725986, 0.206632167662788, -0.155604083629141, 0.714784083755121, 1.28521591624488, -1.89037163429039, 0.751308094594305, -1.47033193543103, 0.845655460094771, -1.22571436000323, -0.133629321182905, 1];
        actual = matrixUtilities.multiply([0.0150078623625486, 1, 1, -1, 0, 0.285215916244879, 0.248691905405695, -1, -1, 0.679671840593066, 0, 0.546042519410161, 1], [0.944757282708193, 0.382813368636562, -1, 0.44081999987402, -1, -1, 1, 0, 0.221640030025337, 1, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.534774562837882, -0.618590177324875, -0.798969809755223, -0.193363835659513, 0, 0.193363835659513, -1.34465239818425, 1, 0.155165755727871, -0.655347601815754, -1, 1.84483424427213, 1];
        actual = matrixUtilities.multiply([0, 0.321575974729646, 0.618590177324875, -1, 0.806636164340487, 0, -1, 0, -1, 0, -1, 1, 1], [0, 0, -1, 1, 0, -1, 1, 0, -1, 0.344652398184246, -1, 0.844834244272129, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, -0.821835617451852, -1.00818255357825, -0.537763858464437, 0.284071758987415, 0.470418695113817, 1, 0.178164382548148, 0, -1, -1, -0.996626625598788, 0];
        actual = matrixUtilities.multiply([-1, -1, -1, 1, 0.537763858464437, 1, -1, -1, 0, 0, 1, 0.412264260655392, 1], [1, -1, -1, 0, 0.821835617451852, 1, -1, -1, -1, 0, 0, 0.00818255357825316, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -0.970833801185169, 0, 0.779584625167579, 1.03843882918758, 1.22041537483242, 0.456426550381084, 0.889480284260838, 0.456426550381084, 0.898054987610343, -0.100850820428289, -1.10194501238966, 1];
        actual = matrixUtilities.multiply([-1, 0, 0, 1, 0, 0.220415374832421, 0.916202426383366, 0.459775876002282, 0, 0.212050363054522, 0.313995375444179, -1, -1], [-1, 0, -1, 1, 0.970833801185169, 1, -1, 0, -1, -1, 0.306716480435206, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.38936358615261, 1.49610320827742, -1.60676629916149, -1, 1, -0.522904364169996, -1.18128684497498, 0.870359389051031, -1.04619262026533, -0.547363587910013, 1, -0.73885522099588, -1];
        actual = matrixUtilities.multiply([1, 0.366462597328454, -1, 0, 1, 1, -1, 1, 0.399499176721787, 0, 1, 0.547363587910013, -1], [0.392424082100589, -1, 1, 0.781787668253196, 0.129640610948969, 0.236791933996972, 0, 1, -1, -1, 0, 0.477095635830004, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.2225261918374, -0.718695519116568, 1.25018467393247, -1, -1, 1, -0.919444440769799, 0.51523560402693, 0.37471591981909, 0.0560576487593621, -1.39200707217306, 0.0322148008422064, -0.453008506192364];
        actual = matrixUtilities.multiply([0.717600525225327, 1, 1, 0, 0, 1, 1, 0.76123372221423, 0.638005190360362, -1, -1, 0, -1], [0.448868017852711, 1, 0, -1, 0.392007072173062, -1, 0.943942351240638, 1, 0.967785199157794, -1, -1, 1, 0.453008506192364]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.262604230671471, -0.928472073156313, 0.961206146963502, 1, -1, 1, -1, -0.0737648695119493, 0.693386495436256, -1, 1, -1, 0];
        actual = matrixUtilities.multiply([0, 0.961206146963502, 0.566425506754976, 0, 1, 1, 1, 0.0737648695119493, 0, 0, -1, -1, 0.303821276083505], [-1, 0.107741216247781, 0, -1, 0, 0.619621625924307, 0, -1, 1, 1, 0, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.42038077529062, -0.854953258230795, 1.18457001409706, 0.833386880268057, 0, -1, 0.833386880268057, 0, -1, 1.06417909782002, 1.04615999458945, -0.721122203653702, -1];
        actual = matrixUtilities.multiply([1, 0.691736754817766, 0, 0, 1, 0, 0, 1, 0, 0.318242202661113, 1, -1, -1], [-1, 1, -1, 0.843896439226296, 0.145046741769205, 0.876306768914828, 0.833386880268057, 0, -1, 0.0377712440852873, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.820802916936575, -0.147390019682883, 0.852609980317117, -0.962694474478576, -2, -1, 0.0373055255214244, 0, 0, -0.962694474478576, -0.53250017926679, -1, 0];
        actual = matrixUtilities.multiply([0, 0.852609980317117, -1, 0, -1, -1, -1, -1, 1, 0, -1, 0.46749982073321, 0], [1, 1, 0, -1, 0, -1, 0.962694474478576, 1, 1, 0, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -0.118323680534178, -0.170328435567361, 2.06385274502227, 0.408709762716472, 0.101953927009345, 1.81214694204375, -0.735984360676252, -1.23795400803813, -1, 0, 0.408282443605495, 0];
        actual = matrixUtilities.multiply([-1, 0, 0, 1, 0.339907935047479, -1, 1, -1, -1, 0, 0, 1, 0], [1, -1, 1, 1, 0.118323680534178, 0.170328435567361, 0.187853057956255, 0.85430804121043, 1, -1, 0, 0.408282443605495, 0.921392072421215]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.04541403709232, 1.00554893748153, 0.0361571214330183, -2, -0.390900443955744, 0.361194949299653, 1, -0.609099556044256, -0.361194949299653, 0, -1, 0.0815711585253343, 0.045414037092316];
        actual = matrixUtilities.multiply([0, 1, 1, 1, -1, -1, -1, 0, 1, 0, -1, 1, 0.045414037092316], [1, 0.122185514365409, -1, 0, 0.609099556044256, 0.442766107824988, 1, 1, 0, 1, 0, 0.0815711585253343, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.41355239758899, -0.413552397588991, 0.586447602411009, -0.817312326662853, 1, 1, 0.0473980664488204, -0.685826472326101, -1.14512348926865, -1, 0, 1, 0];
        actual = matrixUtilities.multiply([0.413552397588991, 0, -1, 0, -1, 0, 0.535094252105381, 0.150732220220721, 0.459297016942546, 0, 0, -1, 0], [-1, 0, 0, -1, -1, -1, 0.817312326662853, -1, -1, 1, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.773638089082035, -1.91325971514741, -1, 1, 0.616807065725702, 0, -2.23071176895439, 1.3831929342743, 0, 1.45836733582354, -0.841560270097833, 0, 0];
        actual = matrixUtilities.multiply([0.226361910917965, 1, 1, -1, -1, -1, 1, -1, 0.230711768954392, -1, 0.458367335823536, 0, -1], [-1, 1, 1, -1, 0.383192934274298, 0, 1, -1, 0, -1, 0, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.478956225694955, -1, -1.14326969121735, 0.371467592367654, -1, 1.76947682712668, 0.68375948445306, -0.330022033457655, 0.293263211828647, 1.3500612256299, 0, 0.0650087832240435, 0];
        actual = matrixUtilities.multiply([-1, 0.373792864090667, 1, 1, -1, 1, 0.52341052495102, 0.109489058195375, 0.330022033457655, 0.854351242470719, 0.592394700084065, 0, 0], [0.207898632720066, 0.00525287166482437, 1, 1, 0, 0.769476827126684, 0.836790037265415, 0, -1, 0.20825762963307, -1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.193408136811763, -1.79190502942984, 0, 3, 0.443223574870836, 0, -1, -1.55677642512916, 0, -1, -0.443223574870836, 0, -1];
        actual = matrixUtilities.multiply([0.89085856820031, 0.373749607882346, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1], [0.676299176493799, -1, 0, 1, 0, 0, -1, 0.556776425129164, 0, 1, 1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.07411962471629, -0.0153275476839987, 2.33772773916727, 0.014282053090791, -0.810264227661065, 1.06507649653493, -1, 1, -2, -0.0741196247162854, -1.984672452316, 0.662272260832727, 0];
        actual = matrixUtilities.multiply([1, 1, 1, 0.192689225633018, 1, 0, 0, -1, -1, -1, 1, 0, 0], [1, 0, 1, 0.0741196247162854, 0.984672452316001, 0.337727739167273, 0, -1, 1, 1, 0, 1, 0.940846237326435]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0.411147530551625, -0.375959631230663, -0.132912517121487, -0.0692933604257918, -0.762949457812851, 0, -0.975283911905849, -1.73827815928416, -0.438484143669942, -0.530123877562774, -0.141776024052871, 1];
        actual = matrixUtilities.multiply([-1, 0, 0.362318528053499, 0.309941504294957, 0.132912517121487, -1, -1, 0, -1, -1, 0.438484143669942, 0.569359260410703, -1], [0, -1, 0, 0, 0.691626724177798, 0.738278159284162, -1, 0, 0.0619016108391348, 0, 0.283657187728052, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.160517314106166, -0.114874890007855, 0.528040609936136, 1.05886124800422, 0.878387342616165, 1.07031850939166, -1.16293379206347, -0.0572883463731446, -0.571663345010794, -1.83706620793653, -1.80806883322451, -2, 0];
        actual = matrixUtilities.multiply([0.733229455879531, -1, 0.510458855196116, 0, 1, 0.0703185093916573, -1, -1, 1, 0, -1, -1, 0.598421351331482], [0, 0, 1, 1, 0.249219513148637, 0.571663345010794, 1, 0.808068833224507, 1, 0.83706620793653, 1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.473944647458356, -1, 0, -0.65447553370822, 0.265359974103088, 0.325912201985013, 0, 0.767991850044574, 0.943239144488815, -1, -0.365612118209532, -0.943239144488815, 1];
        actual = matrixUtilities.multiply([0, 1, 1, 0.34552446629178, 1, 1, 1, 1, 1, -1, 0, 0.402379731835043, 1], [0.526055352541644, -1, 0, 1, 0.767991850044574, 0.943239144488815, -1, -1, 0, 0, 1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-3, -1, -2, 1, 3, 0, -1.16493438890434, -1.16493438890434, -1, 0.767798150781448, -1.23220184921855, 1.36040627367813, 0];
        actual = matrixUtilities.multiply([1, -1, -1, -1, 1, -1, 0.164934388904336, -1, 0, 0.592608122896686, 0.360406273678134, 1, 0], [1, 1, 0, -1, -1, 0, 1, 1, 1, 1, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.176767913706958, -0.176767913706958, -0.176767913706958, -1, -1, -0.423437920723293, 0.212489141250257, 1.20896104153608, 0.380039716597742, -1.74202802159918, -0.803107542556953, -0.959565619094316, 0];
        actual = matrixUtilities.multiply([0.176767913706958, 0, 0, 1, 0.869792540031389, 0, -1, -1, 0.787510858749743, 1, 0, 0.742028021599179, 0], [-1, 0.198094196709848, 0.624714789737349, -1, -1, -1, 0, 0, 0.662873102195036, -1, 0.265343695536882, 0.0544917169280777, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.73301914182167, 0.211425203928456, -0.574994433938989, 2, 0, 1.20691943783635, 1.29200101657398, -1.47521126292423, 1.50156347655825, -1, 0, -0.425005566061011, 0.158966488278921];
        actual = matrixUtilities.multiply([-1, 0, 1, 0, 1, 1, 0.76721227949821, 0.292001016573981, 1, 1, 0, -1, 1], [0.733019141821665, 0.211425203928456, -1, 0, -1, 0.574994433938989, 1, 1, 0.206919437836352, 1, -1, 1, 0.158966488278921]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.44101812524768, -0.177185389295772, -2, 1.65394358507076, -0.568907263864087, 1.65394358507076, 0.269462350881408, 1.85059538039186, 0.269462350881408, 2, 1.17718538929577, 2, -1];
        actual = matrixUtilities.multiply([0, -1, -1, 0, 0.732222732031822, 0.921720853038933, 0.760396317001617, -1, 0.509066033879791, 1, 0, 1, 1], [0.558981874752316, -1, 0, 1, 1, 1, 1, -1, 1, 1, 0.177185389295772, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [3.35550097392662, 0.748752386018602, -1.11646060883834, -0.498466402990029, 0.217115085273905, 1.1198867741333, -2, -0.432902374972078, 0.760959634911716, -1.18540188306263, -0.0184744063543614, 2.19472183127294, 1];
        actual = matrixUtilities.multiply([1, 0.355500973926625, 1, 0.501533597009971, 0, -1, -1, 0, -1, 0.814598116937372, -1, -1, 1], [1, 0.183917959306351, 0, 1, 0.432902374972078, 0.239040365088284, 1, 0.371115865824332, -1, 1, 0, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.52684572596422, 0.0755922206987685, -0.526845725964217, 0.844140789398989, 0.844140789398989, -0.917597449811919, 1, -0.881445850190449, 0, -1, -2.88144585019045, 1, 0.855124212733993];
        actual = matrixUtilities.multiply([0, 0.526845725964217, -1, 0.0734566604129303, 0.917597449811919, 0, 0, 0, -1, 1, -1, -1, 0.855124212733993], [0, 0.50307585555272, 0, -1, -1, 0, 1, 1, -1, -1, 0.881445850190449, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0.999429954218213, -0.726816240355544, 0.63911906612996, 0, -1, -0.63911906612996, -0.585241173200887, 2, 0.198814209773961, 0, -0.311075385339128, 0.49896222609047];
        actual = matrixUtilities.multiply([0, 1, -1, 1, 0, 0.282044313513694, -1, -1, 1, 0.311075385339128, 0, 0.81437796299084, 0.49896222609047], [0, 0.830100475265691, 0.547503889793299, 0.63911906612996, 0, -1, 0, 0.585241173200887, -1, 0, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.210138098434609, 0.385803044021969, 0.13604321057724, 1.52773279727325, 2.0539360381914, 0.13604321057724, 0.789861901565391, 0, 0.86395678942276, 1, -0.429032200681526, 1.70398244192254, 0];
        actual = matrixUtilities.multiply([-1, -1, 1, -1, 0.668132994169431, 1, 1, 1, 0, 0.814835244703496, 0, 1, 0], [0, 0.366973119493096, 1, 0, -1, 0.86395678942276, 0.789861901565391, 1, 0, 1, 0.385803044021969, 1, 0.266874073197541]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.81455587368459, 2.19239082789769, -1.04087494036224, 0.29214135708407, -0.924999926669989, -0.417900494494429, 0.104944268290393, 0.824633191629623, 2, -0.942524940214364, 0, -2, 1];
        actual = matrixUtilities.multiply([0.646136133766796, -1, 0.8516925866025, 0.671450210582209, 0.25354971608778, 0, -1, 1, 0.837580671923971, 1, -1, 0, 1], [0, 1, 0.605261193404561, 0.0574750597856357, -1, -1, 1, -1, 1, -1, 0.984541811041786, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.18355571117685, 1.51967379405977, 0.951180838491386, -1.03769140366357, -0.1153415889085, -0.339499287030245, -0.952281229641419, 1.51745514362932, 1.070808264983, -1, 0, -0.708923252629546, 0.0914986846852202];
        actual = matrixUtilities.multiply([0.739666910255173, -1, 1, -1, 0.412140921415827, 0.4498323250794, 1, -1, 0.952281229641419, 0, -1, 0, 0.101633351343513], [0.755434879919251, 1, 1, 1, 0.5651739139879, 1, 1, 0, 0.708923252629546, -1, 1, 0.818803829522246, 0.900282077444849]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 2, 0.743457669738428, -0.184492556929818, -1.18449255692982, 0.177038243122882, 1.5782044909793, 1.5782044909793, 1.47321602118817, 0, 1, -0.256542330261572, 0];
        actual = matrixUtilities.multiply([0, 1, -1, -1, 0.815507443070182, 1, 1, 0.578204490979297, 0, 0, 0, -1, 0], [0.133477400119173, 1, 0.704974414643354, 1, 1, 0.895011530208872, 1, 1, 1, 0, -1, 0.256542330261572, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.1264791926958, 0.199061469733278, 0, -0.155033283007812, -2.76404971013034, 0.767209028251101, -0.946909530522798, -1.71168403593436, 0, 0.349180765146939, -1.65081923485306, 1, 0.41849706155178];
        actual = matrixUtilities.multiply([1, 0.243649527543993, -1, 0.767209028251101, 0.996840681879241, 1, 0, 1, 0.711684035934361, 1, 0.650819234853061, 0, 1], [0.444727090860124, 0.442710997277271, -1, 1, -1, 1, -1, -1, 0, 0.0745983706203282, -1, 0, 0.41849706155178]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.15052856418794, 1, -0.308709002243685, 1.01836012322405, -1, -0.3023630279593, -0.849471435812056, 1, 1.42433405268208, 0, -1, -0.424334052682078, 1];
        actual = matrixUtilities.multiply([1, -1, 1, -1, 0.121971024722779, 0, 1, 1, 0, -1, 0, 1, 1], [1, 0, 0.266956945074236, -1, 1, 0.424334052682078, 0.150528564187944, 0, 1, -1, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, 1.63205693086239, -0.612102572625551, 1, 1, 0.0775666018377834, -1, 0.216518397078159, 1, -1.28847643699892, -0.937539544266176, 0.210909835161134, 0];
        actual = matrixUtilities.multiply([1, 0.386181804531339, -1, 1, 0, 0, 0, 1, 1, -1, 1, 0.288476436998917, 1], [0, 0.848575327940553, 0.310330825536666, 1, 1, 0.0775666018377834, 0, 0, 0, -1, 0.216518397078159, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.472640969544948, -0.303402321322524, -0.564569121023905, -1, -1, 1.25571513141306, 2, 1.1449909983878, -0.744284868586941, 1.43322495391277, 0.578215952300567, -0.339821005483842, 0.122850649949254];
        actual = matrixUtilities.multiply([-1, 0.308853989610846, 0.907643415922133, 1, -1, 0, 1, 1, 1, 0.365265629424372, 0.433224953912769, 1, 0.743856435988032], [-1, -1, 0, 0, 0, 0.255715131413059, 1, 1, -1, 1, 0.144990998387798, 0, 0.165153709782825]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.565743805638395, -1.43544601389926, -0.166763098988106, 0, 1, -0.832047081474237, -0.153184593726501, -0.153184593726501, 0, 1, 1, -0.167952918525763, 0];
        actual = matrixUtilities.multiply([-1, 0.00118981953765723, 0.435446013899262, 1, -1, -1, 0, 0, 0.153184593726501, -1, 0, -1, 1], [1, -1, 0, 0, 0, 0.167952918525763, 1, 0, 1, -1, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.46285591897922, 1.89489191113733, 1.51771687749137, -0.685276008466275, -1.60840201778729, -1.10174070582806, 0.107660168832102, -0.788770462287949, -0.282109150328724, -0.509683304703647, -0.830144678629071, -0.916203798598122, 0];
        actual = matrixUtilities.multiply([0, 0.851326771942585, 0.334020154706212, 0.391597982212714, -1, -1, 0.211229537712051, 0, -1, -1, 0, 0.169855321370929, 0.709544984488536], [1, 1, 0.706939026576904, 0.509683304703647, 1, 1, 0.884866962155731, 1, 1, 0, 1, 0.493338688040776, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.77291114105513, 0.346945346494645, 0.952075977787411, -1, 1, 0, 0.772911141055129, -1, 0.0479240222125892, 1.77836553323007, -2, 0.42670353847868, 1];
        actual = matrixUtilities.multiply([0, 0, -1, 0, 1, 0, 0, 0, 1, 1, -1, 0, -1], [1, 0.653054653505355, -1, 0.778365533230065, -1, 0.42670353847868, -1, 1, 0, 0.772911141055129, -1, 0.0479240222125892, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 1, 0.748122374409867, 0, 0, 1, -0.990608438379415, 0, 1.99795454144805, 0, 0, 1, 0];
        actual = matrixUtilities.multiply([-1, 0.265608409543339, -1, 0, 0, -1, 0.990608438379415, 0.485328508301325, -1, 0, 0, -1, 1], [-1, 1, 0, -1, 0, 0.517486035133473, 0, 0, 1, 0, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0481120785922334, -0.768690420206958, -3, 0.137817840621722, 0.664194756263394, -0.670129114142679, 0, -0.475503050477944, -0.475503050477944, -0.514383369604784, -0.379030156591456, -2.37017461255667, -0.240165123827832];
        actual = matrixUtilities.multiply([1, 1, 1, -1, 0.670129114142679, 1, 0.475503050477944, 0, 0, 0.769124472406285, 1, 0.60105014015038, 0.240165123827832], [1, 1, 0, 0, -1, -1, -1, 0.99114445596521, -1, 0.807946954764401, -1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.5753836625141, 0.605005835464693, 1.80652092853865, -1.06473956073099, -0.153288370977903, -0.584224973611638, 0.572024970116106, 2.97037782704941, -0.768862733975455, 0.427975029883895, 0, 0.231137266024545, -0.575383662514102];
        actual = matrixUtilities.multiply([0, 1, -1, 0.504083146575877, -1, 0.353087707587093, 1, 1, 1, -1, 1, 0, 0.575383662514102], [1, 1, 1, 0.572024970116105, 1, 0, 1, 1, 0.231137266024545, -1, 0.970377827049409, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.30925251325092, 0.346399401475861, 1.26456009236377, 1.03714688822494, -2, -0.081839309112094, 1.03097513134231, -1.83385534623352, -1.23438679920166, 0.0340025965879094, -0.915355180816425, -0.159556854773767, 0.0609058803231017];
        actual = matrixUtilities.multiply([1, -1, 0.346399401475861, 1, 0, -1, 0.833855346233517, 1, -1, 0.915355180816425, 1, 0, 1], [-1, 1, -1, 0.0371468882249421, -1, 0.918160690887906, 0, 0, -1, -1, 1, 1, 0.0609058803231017]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.588401268975996, -0.480433661248737, -1, -1.02436378413083, 0.093198714355565, 0.387234946893172, -1, 0, 0, 1.18989006763439, -0.760299340669548, 0.538652446371807, 0];
        actual = matrixUtilities.multiply([0, 1, -1, 0.612765053106828, -1, 0, 0, 0, -1, -1, 0.461347553628193, 0, -1], [0, 1, 0, -1, 1, -1, 0.411598731024004, 0.519566338751263, -1, 1, 0, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.71640320109036, 0.456813137259713, 0.966802272730455, 2, 0, 1.03696512153231, 0, -1, 0.482223764752142, 1, 0, 0.482223764752142, 0.96397149188629];
        actual = matrixUtilities.multiply([0.295618571944357, 0, 0.456813137259713, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0.96397149188629], [1, 0, 0.832815525975458, 1, 0, 0.554741356780166, 0, -1, 0.482223764752142, 1, 1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.63550744468137, 2, -1.90875816434098, -0.44211826973272, -1.7301296073618, 2.57629424880676, -0.751487603761017, 1, -0.792778005261336, -0.248512396238983, -1, 1.79277800526134, 0];
        actual = matrixUtilities.multiply([0.115980159079647, -1, -1, -1, 0.987759769888483, 0.742369837473319, 0, 0, -1, -1, 0, 1, 0], [0.996780590152731, -1, 1, 1, 0, -1, 0, -1, 1, 0.751487603761017, -1, 0.792778005261336, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.44186439339581, -0.602515771799961, -2.23628580255261, 0.257963120040499, -1.20483274627702, -1.96856058014955, 0.266336587847367, -0.947641697094417, -0.778398345587029, 0.180262380176725, -0.211973535461339, -0.524811611755198, 0];
        actual = matrixUtilities.multiply([0.366243605672495, -1, 0.870042196880114, 0.968560580149554, -1, 0, 1, 0.221601654412971, 0, 0.211973535461339, 0, 0.312838076293859, 0], [0.927608174703833, 0, 0.147419578930093, 0.266336587847367, -1, -1, 0, 0.236272166127466, 1, 0.39575128927629, 0, -1, 0.524679165112171]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -1, 0, 0, -1, 0.380092629408507, 1, 0, -2, 1, 0, 0, 0];
        actual = matrixUtilities.multiply([-1, 0, 0, -1, -1, 0.619907370591493, 0, 1, 1, 0, 1, -1, 0], [1, -1, -1, -1, 1, 0, 1, 0, -1, 0, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.281049863590887, 2.79762263866031, 2.79762263866031, -1, 1, 1, -1.2188240267424, -0.781175973257598, -0.781175973257598, -0.646429217255874, -1, -0.646429217255874, 0.395262178539692];
        actual = matrixUtilities.multiply([1, 1, -1, 1, 0, 0, 0.218824026742402, -1, 1, 0, -1, 0.646429217255874, 0.797622638660307], [0.352359436616469, 1, 1, -1, 1, 1, 0, 1, 0, -1, 0, -1, 0.495550350982486]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.08648933148314, 1.14701445873222, 1.75502041389934, 0.613404466590567, 0.0761895778131022, 0.518245473745393, -1, -0.147014458732221, -1, -0.209894744777072, -0.147014458732221, -1, -1];
        actual = matrixUtilities.multiply([1, 0.913510668516862, 0, 0.518245473745393, 0.170407765624303, 0.265566758469477, -1, 1, 1, -1, 0.209894744777072, 1, 1], [1, 1, 0.755020413899338, 1, 0.147014458732221, 1, -1, 0, 0, 1, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.02055534977592, 0, -0.370123140220588, -0.709943835980953, 0, 2.54990266102827, 0.532055880190831, 0, 0.467944119809169, 0.472531805034974, 0, -1.10953845880439, 0];
        actual = matrixUtilities.multiply([0.161265070159577, 0.851635231567377, 0.320247021187212, 1, -1, 0.549902661028273, 1, 0.532055880190831, 0, 0.890461541195615, 1, -1, 0], [0, 0, -1, 0, 0, 1, 1, 0, -1, 0.527468194965026, 0, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.74905868561429, 1.90277280234861, 0, -0.175733098628376, -0.0567608642541189, 0.36360800748859, 0.514026387834002, 0.690592036239067, 0.764967702219713, -0.749058685614289, -1, 0, 0.857698129423753];
        actual = matrixUtilities.multiply([-1, 1, 1, -1, 0.614983715869013, 0.36360800748859, -1, 1, 0.764967702219713, 0, -1, 0, 1], [1, 1, -1, 1, 1, 0, 0.749058685614289, 1, 0, 1, 0.902772802348609, 1, 0.857698129423753]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.53198106694649, -1, 0.820000058887526, 0.0862226770660946, 0, 0.820000058887526, 0, -1, 0, -1.08622267706609, 1, -1.16835579470189, -0.967283716410065];
        actual = matrixUtilities.multiply([0, 1, 0, -1, 1, 0, 1, 0, 0, -1, -1, -1, 0.967283716410065], [0.460835205139981, 0, 0, 0, -1, 0, 0.0862226770660946, -1, 0.820000058887526, 1, 1, 0.348355735814365, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.872716878481543, 0.748942426754601, 0.913726974704176, 0.145237944622169, 0.11020742315343, 0.240691060312414, 0.0179548231037123, 1, 0.84558196498341, 0, 0.88979257684657, 0.759308939687586, 1];
        actual = matrixUtilities.multiply([-1, 1, 1, 0, 1, -1, 1, 0, 0, 0, 0, 1, -1], [1, 0.140850150091969, 0, 0.0179548231037123, 1, 0.84558196498341, 0.145237944622169, 1, 1, 0, 0.88979257684657, 0.759308939687586, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.39620963256498, 0.648615075638092, 0.389311290527373, -1.44848552972473, -1.26954462391769, -1.13873150625207, -0.538297254377183, -0.58687942173405, -0.964669911241072, -0.332877425995622, 1.35538162400731, 0.705912608050701, -0.615253240156571];
        actual = matrixUtilities.multiply([-1, 0.528042796779444, 0.0177759458393678, -1, -1, 0, 0.254665214221303, -1, 0.344476938873752, 0, 0.705912608050701, 0.649469015956609, 0.615253240156571], [-1, 0.60518325241524, 0, 1, 0.269544623917688, 0.138731506252071, 0.448485529724735, 1, 1, -1, 1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.358913793395699, 0, 0, 1, 0, -1, 0.21675038068404, -1, 0.550051087769704, -0.254395196798442, 1, -1, -1];
        actual = matrixUtilities.multiply([1, 0, 0, 0, 0, 1, 0, -1, 0.449948912230296, -1, 0, 0, -1], [0.61330899019414, -1, 1, 0.254395196798442, -1, 1, 0.233198531546257, 1, -1, 1, 0, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.476559805440046, 0.130431291253657, -0.476559805440046, 0.94893998076881, 0.558252271990409, 1.35567804870727, 0.519710728163929, -0.525263410306193, 2.47812519649966, 0.810931574070211, -0.223054771415449, 0.149502574299883, 0.476559805440046];
        actual = matrixUtilities.multiply([0, 0, 0, 0.959078624825496, -1, 0.517330896815905, 0.525263410306193, -1, -1, 0.819595711687392, 0, 0.596540940271942, 0.476559805440046], [1, 0.27369343734984, -1, 0.989428766532535, -1, 0.910257952711665, 0, -1, -1, 0, 1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.248819308471316, -2.07120878345855, -0.842919723235565, 1.30638455846644, 3, 2, 0.170942334407464, -0.171197877345233, -0.729131786492249, 0.107218261392423, -1.58639718014113, -0.586397180141135, 0];
        actual = matrixUtilities.multiply([0.057565249995126, 1, -1, 1, -1, 1, 0, 0.729131786492249, 0.557933909147016, 0.413602819858865, 1, -1, 0.128774033453676], [0, -1, 0.77278799227103, 1, 1, 1, 0, -1, -1, 0.306384558466442, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.12310621287818, -0.965007674362308, 1, -0.621248405716032, 1.03341843540586, 0.905678789113972, 1, 0.413752890850302, 1, -1.83951282959409, 1.8522953522361, 1.44755321424139, 1];
        actual = matrixUtilities.multiply([0.123106212878184, 0, 0, 0, 0.590503258439947, 0.621248405716032, -1, 1, 0, 0.957332286498198, 1, 0.882180543095889, -1], [1, 1, -1, -1, 0.28424500128452, 0, 0, 0.697997892134822, 1, -1, 1, 0.507326099792182, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.148188680984433, -1, -0.0435662698203541, 1.04151732971186, 0.751833104412925, -1.25913959846792, -0.900605241721778, 0, 1, 0.900605241721778, 0, -0.740860401532082, 0];
        actual = matrixUtilities.multiply([0, 0.0435662698203541, -1, -1, 1, 0.751833104412925, 0, -1, 0, 1, 1, 0, 0], [0.258462910195097, 1, -1, 0, 0, 0.259139598467918, 0.900605241721778, 0, -1, 0.187424691946909, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.24374640558089, 0.243746405580894, 1.01463668846422, 1, 0, -1, 0, 0.842926486322156, -0.782877648148163, -1.65161904117634, 0.651619041176335, 1.03912896635469, 0];
        actual = matrixUtilities.multiply([0, -1, 0.243746405580894, 0, 1, 0, 0.157073513677844, 1, 1, 0, -1, 0.651619041176335, 0], [-1, 0.439871883690298, 1, 0, -1, 1, 1, 0, -1, -1, 1, 0.0600488381739933, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.255873382676334, 0.385875692305097, 0, -0.297859065839024, -0.0793867046383148, 1, 0.297859065839024, -1.3858756923051, -2, 0, 1.7365478848743, 1, -1];
        actual = matrixUtilities.multiply([1, 0, -1, 0.534737603056588, 0, -1, -1, 1, 1, 0.736547884874301, -1, 0, 1], [0.04198568316269, 0, -1, 0, 1, 0, 0, -1, -1, 0.297859065839024, 0.614124307694903, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.25057253855176, -0.792407121277758, -0.800612036045926, -1.16858824199579, 0.056576746421678, -0.165048339481022, 0.915948158556571, -0.265882532701773, 0.952259835299225, -1.16632788000428, 1.38678317721318, 2.62150734142906, -0.285492538141782];
        actual = matrixUtilities.multiply([0.780769148739413, 0, 0, 0.212788504181797, -1, -1, -1, 1, 1, -1, -1, 0.65266570991495, -1], [-1, 1, 0.0198428873065127, 0.320930378660993, 0.265882532701773, -1, 1, -1, -1, 0.236878537217564, 1, 0.952259835299225, 0.285492538141782]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.12338611116791, 0.157277965218677, 0.43927911177244, 0.93198845625482, -0.641727793329269, 0, 1.97917625586464, -0.93722142698447, -0.979176255864639, -0.0359898582268459, 1.34757113630224, -0.964010141773154, 0];
        actual = matrixUtilities.multiply([0.402330806666208, 0, 0.721055304501697, 0, 1, 0.93198845625482, 0.979176255864639, -1, 1, 0.964010141773154, 0, -1, 1], [1, 0.733274032703263, 0.841609918438648, 1, 0.360547178127126, -1, 0, 0.290260662925551, 0, 1, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.36548956686886, -0.227929576149714, -0.365489566868865, -1, -2, -2, 0, 0.633778017309391, 0, 0, 0.366221982690609, 1, 0];
        actual = matrixUtilities.multiply([0.719788620117953, -1, -1, 1, 0, 1, 0, 1, 0, 0, -1, -1, 0.645700946750911], [-1, 0.194574689583189, -1, -1, -1, -1, 0, 0.633778017309391, 0, 0, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.46417860661555, -1.16572255369542, -1.08784049905239, 0.798255084454201, 2.2924453266752, 0.14247290284488, 0.70799132930018, -0.113076329749579, 0.490932214657607, 0, 1.7472141290769, 0.622828095044395, -1];
        actual = matrixUtilities.multiply([0.581491575381482, 0, -1, 1, -1, 0.391380884401212, 0.886923670250421, 1, 0, 0, -1, 1, -1], [-1, 1, 0.162424889934447, 0.798255084454201, 1, 0.128263923399273, 0, -1, 0.377171904955605, 0, 0.747214129076905, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0441718627765323, 0.45899076920887, 1.58355899722713, 0, -0.788716722181401, 0, 0.05704273706931, 1.6760733121429, -0.246402566003116, 0.0751771815471245, 2.04587534910342, -1.00682656513845, 0];
        actual = matrixUtilities.multiply([-1, 0.587570082669878, 0, 1, 0, -1, 0, 0.75877727650049, 1, 1, 1, 1, 0], [0.492661423744942, 1, 1, 0, 0.128579313461007, -1, 0.0751771815471245, 1, 0.993173434861551, 0, 0.917296035642408, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.14583198034476, -0.0200205887761063, 0.486276612058589, -1, -0.0200205887761063, 0.280611606445448, 0.828344606732244, 0.0146887560084519, 0.634823354256723, 0.112147175759146, 0.00516489459716325, -0.538590762549355, 0];
        actual = matrixUtilities.multiply([-1, -1, 0.675958378555234, 0, -1, -1, 0.649117479868754, 0.733682519166583, 1, -1, 0.257979156103907, 1, 0], [1, 0.0646375050137925, 0, 0.145831980344761, 0, 1, 1, 0.0200205887761063, -1, 0, 0, 0.719388393554552, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.01673959615489, -1.6256275026247, -0.770207231757328, 1.90894087446339, 0.625627502624703, 1.77020723175733, -1, 1, -1, 1.27572661691625, 0.189783691761374, 1.77020723175733, 0.193341651090114];
        actual = matrixUtilities.multiply([-1, -1, 1, 1, 1, -1, 0, 0, 1, 0.303349342804099, 1, -1, 1], [0.8922012783085, -1, 1, 0.908940874463385, 0.625627502624703, 0, 0, 1, 0.770207231757328, -1, 1, -1, 0.193341651090114]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.10274610347242, 1.10382583114285, -1.70370887206109, 1, -0.940338184097939, 1, -0.288269442174709, -0.99909473210531, -1.18999828360509, 0.621109890109445, 0.20829428695624, -0.312916170357883, -0.593713212569111];
        actual = matrixUtilities.multiply([1, 0.742758640899676, 0.8455047443721, 0, -1, 0, -1, 0, 0.711730557825291, 0.20848301994078, 0, 0.412626870168665, 0.593713212569111], [0, -1, -1, 1, 0.99909473210531, 0.4782677257798, -1, 0.940338184097939, -1, 1, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.944483377944903, 1, -1.13259307808989, 1.10930773248398, 0, -0.762534906458976, 0.343483158081529, 0, 0.220230244438958, 1.35758036158866, 0, -0.71269062223327, -0.652293120348963];
        actual = matrixUtilities.multiply([0.925683808944041, 0, 0.7261114696628, 0.175931072410164, 1, 0.933376660073817, 0.343483158081529, 0, 0, 0.357580361588663, 1, 1, -1], [0.707311900661938, -1, 1, 1, 0, 0.641167519447006, 0, 0, 0.0580404643239642, 1, 0, -1, 0.652293120348963]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.46175056391477, 1, -1.22175745164126, 0, 1, -0.855856480475448, 0.534250655925949, -0.534250655925949, -0.542758113927517, -2, 1, -0.855856480475448, 1];
        actual = matrixUtilities.multiply([-1, 0.571488990714536, 0, 1, 0, -1, 1, 1, 0.534250655925949, -1, 0, -1, -1], [0.890261573200236, -1, 0.650268460926725, 1, 0, 0, -1, 0, -1, 1, -1, 0.855856480475448, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.10271736099511, -0.718238744656605, -1.77719643841367, 1.03213148935789, 1, 1.27339068859508, -0.138669099257639, -0.138669099257639, -0.138669099257639, -1.44412570793374, -1.44412570793374, -1.44412570793374, 0];
        actual = matrixUtilities.multiply([1, 0, 0.102717360995113, 0, 0.273390688595078, -1, 0.0657749171675066, 0, 0.0728941820901326, 1, 0, 0.444125707933738, 0.674479077418558], [0, 0.570037869536336, -1, -1, -1, -1, 0.117529567385805, 0, 1, -1, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 0.775439594302065, -1, 0, 1.77543959430207, 2, 0, 0.309591833646219, 1, 0, 0.200415728211059, 0.73234370338374, -0.409659112528739];
        actual = matrixUtilities.multiply([1, 0, -1, 1, 0, 1, 1, -1, 0, 0.294264762799379, -1, 0.438078940584361, -1], [1, -1, 1, 0, 0.775439594302065, 1, 0, 0.465847760655846, 0, 0, 1, 1, 0.409659112528739]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 0.857762819089816, -0.355555508916991, 1.41719984096345, 0, 0, -1.56101138496819, -1.85618845599526, -1, -0.582800159036554, 0, -1, -0.286139807331441];
        actual = matrixUtilities.multiply([1, 0, 0, -1, 1, 0, 0.14381154400474, -1, -1, 0, 1, -1, -1], [0, 0.142237180910184, 0.355555508916991, -1, 1, 0, 0.417199840963446, 1, 0, 1, 1, 1, 0.286139807331441]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.03667959991688, 0.617994942058807, 1.07019659880092, -0.885246292383765, 1.57488113302252, 1.61486841059661, 0.0521013355972825, -0.508107935315048, -1.37116121106767, 1.469177633383, -0.911045527691449, -0.517657097204429, 1];
        actual = matrixUtilities.multiply([-1, 1, 0, 0.556997767443302, 1, 0.0969699919675337, 0.676313711179566, -1, -1, 0, -1, 0.482342902795571, 1], [-1, 0.617994942058807, 1, 0.0366795999168789, 1, 0.929803401199078, -1, 1, 1, 0.972705580747084, 0.184421646494615, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.56203252708634, -0.119678609843729, 2.22785921358869, -1, 1.3896073178415, 0.596407198159214, 1, -0.176618674852242, 1, 0.173315242013575, 0.650066083134183, 0.173315242013575, 0];
        actual = matrixUtilities.multiply([0.56203252708634, -1, 0.665826686502354, -1, -1, 0.596407198159214, 1, 1, 1, 0.173315242013575, 1, 1, 0], [0, 1, 0.226577727229603, 1, -1, 1, 0, 0.0635572374162996, -1, 0, 0.759824087731458, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.7096409139734, -0.208632085569497, -1, 1.13514138510161, -0.452026465186862, 0.547973534813138, -0.298967860312652, 1.57133014387047, 0.428669856129526, -0.298967860312652, 1.83107559328483, 0.168924406715168, 1];
        actual = matrixUtilities.multiply([0.410673053660743, 1, 1, 1, 0.452026465186862, -1, 0, -1, 0.571330143870474, 0, -1, 0.831075593284832, -1], [-1, 0.619305139230241, -1, 1, 1, 0, 0.298967860312652, -1, -1, 0, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.265954318580196, -0.4047689993888, 0.32741523176777, 0, 0.4529145328999, 0.0277769739944951, 0.063614613871842, -1.5952310006112, 0.00215370068426882, 0.91303025554541, 1, 0.91303025554541, 0];
        actual = matrixUtilities.multiply([0.265954318580196, -1, 1, 0, 0.18390264929454, 0.451945351181526, 0.063614613871842, -1, -1, 0.91303025554541, 1, 0, 0], [0, -1, 1, 1, 0, 1, 0, 1, 0, 0, 0.5952310006112, 0.0614609131875732, 0.214576114534669]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, 1, -0.866838039768319, 0, 0, -0.133161960231681, -1.76249259792384, 0.762492597923844, -0.866838039768319, -1, 0, -0.94661330663369, 0];
        actual = matrixUtilities.multiply([1, 1, 1, -1, 0, 0, 1, 0.762492597923844, 1, 0.400915496238002, 0, 1, 0], [-1, 1, 1, 0, 0, 0.133161960231681, -1, 1, 0, -1, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.560083672199437, -1.12902617448959, -0.623398430470097, 0.560083672199437, 1.58844095682187, -2, -0.560083672199437, -1, 1.06744542848996, 0.560083672199437, 0.41155904317813, 0.0899132981035788, 0];
        actual = matrixUtilities.multiply([-1, -1, 0.271437666039652, 1, 0, 1, -1, 0.1916276906578, 0, 1, 0.255463981188584, -1, -1], [0, 0.28875121441146, 1, 0.560083672199437, 1, -1, 0, 0, 0.351960764430445, 0, 0.58844095682187, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.28942023044891, -0.710579769551093, 0.289420230448907, -0.804018224498266, 1.55859076583692, 0.804018224498266, 0.979669592333804, 0.713098372199153, -1, 1, 0, -1, 0];
        actual = matrixUtilities.multiply([0, 0.289420230448907, 0, 0, 0.804018224498266, 0.754572541338658, 1, 0, 0.713098372199153, 0, -1, 1, 1], [-1, -1, 0, 0.979669592333804, 0, -1, -1, 1, 1, 0, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.97136774890654, 2.23324226924835, -1.70949322856473, 1.32336160369374, 0.323361603693739, -2.32336160369374, 0.467419441541386, -0.532580558458614, -1.46741944154139, -1, -1, 1, 0];
        actual = matrixUtilities.multiply([1, 0.261874520341807, 0.971367748906542, 0.323361603693739, -1, 1, 0.467419441541386, -1, 0, 0, 0, -1, 0], [1, 0.263723659917584, 1, 1, 1, -1, 0, 1, 1, 1, 1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.848251809761045, 0.108339875986958, 0.848251809761045, 0, 0, -1, 1, -1, 0, -2, 0.676321880275534, 1, 1];
        actual = matrixUtilities.multiply([-1, 0.848251809761045, 0, 1, -1, 0, -1, 0, -1, 1, 1, 0.676321880275534, 1], [-1, 0.108339875986958, 0, -1, 0, 0, -1, 0, 1, 0, 1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -0.0528241778038555, -2, 0.818000967529603, -0.818000967529603, -0.104465732865252, 0.861261318838811, -0.861261318838811, -1.86126131883881, -0.596974483037821, 1, 1.58561536836699, 1];
        actual = matrixUtilities.multiply([0, 1, -1, 0, 0.818000967529603, 0.71353523466435, 0, 0.861261318838811, -1, 0.403025516962179, -1, 0.585615368366994, 1], [0, 0.947175822196144, 0, 1, 0, 0, 1, -1, -1, 0, 0, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -0.462459937884686, -2, 1, 0.147094007649968, 2, 0.782379069264223, 0.169012162523209, 0.310056497021605, -2, 0.106125677985198, -3, 1];
        actual = matrixUtilities.multiply([0, 1, 1, 1, 0, -1, 0.917095644360918, 0.134716575096695, 0.472322572242619, -1, 1, 1, -1], [-1, 0.715679623519853, 0, 1, 0.147094007649968, 1, -1, 0.253219685635166, -1, 0, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.471388154882653, -0.49716257553593, 1.11195956796072, 1.58985569960897, 1.01510388012389, 0.208747275774029, -0.210980824293094, 0.110277380379977, 1.19032871096891, 1, -1.71680695177839, 1.77855502431214, -0.69826972051443];
        actual = matrixUtilities.multiply([1, 0.471388154882653, -1, -1, 0.410144300391033, -1, 0.210980824293094, 1, -1, 1, -1, -1, 0.69826972051443], [0, 0.652965430474358, -1, -1, -1, 0.800081814546176, -1, 0.519032578225728, 0.0215267902340399, -1, 0.197774373552657, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.459159996574353, -1.82486665240716, 0.94760005014501, -0.377058411689149, 1, -0.449444127354654, -0.618883505286129, 1, -1.60479013603404, 0, 0, 0, 0];
        actual = matrixUtilities.multiply([0.85869464225075, -1, 1, 0, 0.910325482911582, -1, 0, -1, -1, 0, 0, 0, 0.824866652407156], [-1, -1, 0.669672103444893, 0, 0, 0, 0.126588424726663, 0, 0.604790136034037, 0.492295080559466, -1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 1, -1, 0.473634420648978, 0.430408587506288, -0.454354457303115, 1, 2.03930849350957, -0.992465891871818, 1, -0.596115231325903, 0.992465891871818, 0];
        actual = matrixUtilities.multiply([0, 0, 0, 0.454354457303115, 0, 0.0192799633458629, 1, 1, 1, -1, -1, 1, 1], [0, 1, -1, 1, 0.916676890066209, -1, -1, 0.401034972351526, 0.00753410812818171, 1, 0.721596631091832, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -0.606373495239007, -3, -1, -0.606373495239007, 0, -0.757355013283601, 0.757355013283601, 0, 1, -2.60637349523901, 0, 0];
        actual = matrixUtilities.multiply([-1, -1, 1, 1, -1, -1, 0.757355013283601, 0, 0, -1, -1, -1, -1], [1, 0, 1, -1, 1, 0, 0, 0.606373495239007, 1, 0, 1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.09014358375694, 0.668665188734672, -0.0774024525086407, 2, 1.09410881860839, 1, 0.316030669638901, 0.0935612951245142, 0.736489473253716, 0, -1.05767780498493, 0, -0.370645970744382];
        actual = matrixUtilities.multiply([-1, 0.0901435837569384, 0.203099934478803, -1, 1, 0, 0, 0.316030669638901, 0.420458803614815, 1, 1, -1, 0.370645970744382], [0, -1, -1, -1, -1, 0, 1, 0.0941088186083868, 1, 0, 0.15178662359332, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -0.0732507836414738, 1.0812016315717, -1, -0.500255012752576, 2.34936606853705, 1, -0.307136429151118, 0, 0, 1.02437865466553, -0.224306114588075, 0];
        actual = matrixUtilities.multiply([1, 0, 0.175359532318711, 0.886308084189104, 1, 1, 1, -1, 0, 0.238751869759873, 0, -1, 0], [-1, 0.24953419400823, 0.918175225573673, 0, 0.102108748677237, 1, -1, 0.409245177828355, 1, 0, -1, 0.463057984347948, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.436949066089908, 1.63491046504812, -0.302221451095408, -1.07128652048823, -0.161254035384047, -0.489473690924189, -0.00751904677949801, -0.634910465048119, 0.693957400365713, 0.802176588588476, 1, 0.295990759178992, 0.971524032750877];
        actual = matrixUtilities.multiply([1, -1, 0.384216902490806, 0.203835499567834, -1, 0.275122020056062, -1, 1, 0.00751904677949801, 1, 0, 0.197823411411524, 1], [0.821165968580714, 1, 0, 1, 1, 0.0981673477674682, 1, 0.365089534951881, 0.784605701353683, -1, 0, 1, 0.971524032750877]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.533841437443086, 1.53551870126544, -2.46839580189281, 1.25663994264632, 0.73283767827453, 0.727480824444201, 1.3301410606737, -0.369753433436266, 1.62563962721791, 1, 0.73283767827453, 0.727480824444201, 0];
        actual = matrixUtilities.multiply([-1, -1, 0.730746681210933, -1, 1, 1, 1, 0, 0.860008410112936, 0, 0, 1, -1], [-1, 1, 1, 0.470132650560761, -1, 1, 0.726772593207086, -1, 1, 1, 0.73283767827453, 0.727480824444201, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.408356063258069, 1.00123771652637, -1.35103331801995, -0.233253721722054, -1, 0.351033318019953, 0.00510394028520518, 0, 0, 0, 0.00123771652636943, -1, 0];
        actual = matrixUtilities.multiply([-1, 0, 1, 1, -1, 0, 0, 0.00795489782837913, 0, 0, 0, 1, 0], [1, 0.132527585668735, -1, 0.408356063258069, -1, 0.351033318019953, 0.641609784980123, 0, 0, 0, 0.00123771652636943, -1, 0.986816065379798]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.426880330511779, -0.857086885188281, -1.48195761650892, 0.426880330511779, 0, -1, -0.426880330511779, 1.46217775273238, 2, 0.426880330511779, -2, -2, 0];
        actual = matrixUtilities.multiply([1, 0.349226350127359, 0, 1, 0, 0, -1, -1, 0.462177752732382, 1, 1, -1, -1], [0, 0.507860535060922, 0.13273126638156, 0.426880330511779, 0, -1, 0, -1, -1, 0, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.362651206721855, -0.242454473973463, 2.12260195993376, 1.74138112447289, 0.916537866888818, 0.663304997780427, 1.74079635261595, 0.888855565287571, 0.685095715885523, 1, -0.00258219894141998, -0.195841159297079, -1];
        actual = matrixUtilities.multiply([0.152459879476791, -1, 0.754963327085117, 0.82484325758407, 0, 0.916537866888818, 0.85194078732838, 0, 0.888855565287571, 1, 1, -1, 1], [0.455228000159947, 0, 1, 1, 0, 0.804158840702921, 1, 0.99741780105858, -1, 1, 1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.352259177688082, 2.52724436508829, -0.478027568612409, 0.194698024166142, 0, 0.803804637772871, 0.158477023505069, 1.72037473447638, 0.626883334531579, 0, 0, 0, 0];
        actual = matrixUtilities.multiply([-1, -1, 0.52724436508829, 0, 1, 1, 0.0280498578343773, -1, 0.74842459231076, 0, 0, 0, 0], [0.950758213620055, 0, 0, 0.454912613823504, -1, 0.901829034509989, 0, -1, 0, 0.194698024166142, 1, 0.803804637772871, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 0, -1.62053777659024, 0, -1, 0.833351833668236, 0.277695261536956, -0.277695261536956, -0.445795803538429, 2, -1, 0.166648166331764, 0];
        actual = matrixUtilities.multiply([1, 0, -1, 0, 1, 1, 0.445795803538429, 0.277695261536956, 0, -1, 1, -1, 0.991190027907114], [0, 0, 0.214705607488149, 0, 0, -1, 1, -1, 0, -1, 0, 0.833351833668236, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.980858393004564, -0.080679827407319, -0.266881662079544, -0.588202080031951, 1, 1, -0.582665042859484, 1.22563897304561, 1.17266712166043, -1.19554576705934, -0.919320172592681, 0.266881662079544, 0];
        actual = matrixUtilities.multiply([1, 1, -1, 0, -1, 0, 0.23552421584517, -1, 0.00911681028507501, -1, -1, -1, -1], [-1, -1, 0, 0, 0.919320172592681, 0.733118337920456, 0.588202080031951, -1, -1, 0.607343687027387, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.62818052881778, 1, -0.13126001839119, 1, -2, 0.477837529255933, 0.821279193191453, -1.82127919319145, -0.700883277552614, 1, -0.159195649511738, 2.43903647706331, -0.481984478645951];
        actual = matrixUtilities.multiply([-1, 0.743250351279625, 1, 1, 0, -1, 0.821279193191453, -1, -1, 1, 1, 0.840804350488262, -1], [0.628180528817782, 1, 0.396672840414882, 1, -1, 1, 0, 0, 1, 0, 1, 0.522162470744067, 0.481984478645951]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.747397729543689, -0.747397729543689, 0.385944446102662, 1, 1, -0.0934181972061026, 1, 1, 0.563239414041508, -1, -1, 2.13979749388052, 0];
        actual = matrixUtilities.multiply([0.747397729543689, 0, 0.170485346191789, -1, 0.228839248059708, 0, -1, 1, 0, 1, 1, 1, 0], [-1, 0, 0, -1, -1, 0.288279039919506, 0, 0, 0.851518453961014, 0, 0, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.719609062988129, -1.37732079409869, 1.71960906298813, 0.854416846229889, 1.14216496802036, 0.235155826078335, -1.95009924896604, 0.491616315902963, -1, 2.05663946832374, -1.74496869095681, 1, 0.719609062988129];
        actual = matrixUtilities.multiply([0, 1, -1, -1, 0.235155826078335, 1, 0.131062889998342, -1, -1, 1, 1, 0.675900488475291, 0.719609062988129], [-1, 0, 1, 0.380738979848446, -1, 0, 1, -1, 1, 1, 0.377320794098694, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.272943413943492, 1.5863005709212, 1.16152611424616, 1.36471851559576, 0.0849590089630088, 1.20936531474172, 2, 0, 0.626797191624901, 0, -0.931866261610699, -0.753742095899648, 0];
        actual = matrixUtilities.multiply([0.272943413943492, 1, 0.566646083056296, 1, 0.364718515595756, 0.772901137253689, 1, 1, 0, 0, 0, -1, 1], [-1, 0.331205617790672, 0.563340942637688, 1, -1, 0.626797191624901, 1, 1, 0, 0, 0.931866261610699, 0.753742095899648, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.6614299936778, 1.72894636761814, -0.728946367618137, 1.26460960035232, 0.126537390577857, -1.29161998829414, 0.0926218675880794, -1, 0, 0, 0.738777242479276, 0, 0];
        actual = matrixUtilities.multiply([0, 0, 0.728946367618137, 1, 0.834917402283716, 0.291619988294141, 1, 1, -1, 0, 0.738777242479276, 0, 1], [1, 1, 0, 1, -1, -1, 0, 1, 0, 0.907378132411921, 1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.41680019275136, -0.736087047033164, 1.59833070905364, 1, -0.407307364236241, -0.180385990152315, 0.783553004629702, 0.592692635763759, -1.03632558790796, 0.577088620782405, -0.592692635763759, 1.03632558790796, -1];
        actual = matrixUtilities.multiply([1, 0.433016438238796, 0, 0, -1, 0, -1, -1, 1, 1, 1, 1, 1], [0.953048822913807, 0.0875421688368275, 0.66428101233406, 0.896767808076352, -1, 0.855939597755642, -1, 0.407307364236241, 0.180385990152315, 0.680320812706054, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.00684124252472751, -2.01630539820358, -0.0337636834167706, 1.04638666848018, -1.62681749026609, -0.3841256682556, 0.419569178214096, -1, -1, 0, -0.614982790134374, 0.982541714786804, 1];
        actual = matrixUtilities.multiply([0.0163053982035748, 1, 0, 1, 0.626817490266085, 0, 1, 0, 0, 0, 1, 1, -1], [1, 1, 1, 0.419569178214096, -1, -1, 1, -1, 0.982541714786804, -1, 0.385017209865626, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.03674269422737, -0.803857829796084, -0.949167070886664, -1, -1.19614217020392, 1, -1, 0.196142170203916, 0, -0.574304627522037, 1.11264535600032, 1, 1];
        actual = matrixUtilities.multiply([1, -1, 0.06781135828598, -1, -1, -1, 1, 0, 0, 0.574304627522037, 1, -1, -1], [0.104554052513351, 0, 0.881355712600684, -1, 0.196142170203916, 0, 1, 1, 0, 1, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, 0.248376548405912, -1, 0.421467382191432, -0.17309083378552, -1.42146738219143, 1.57475794552581, 0.142756394678575, -0.574757945525813, 1, -2, -2, 0];
        actual = matrixUtilities.multiply([1, -1, 1, -1, 0.578532617808568, 1, 1, -1, 0.574757945525813, -1, -1, 0, 0], [0, -1, 0.1349680256727, 0, 1, 1, -1, 1, 1, 1, 0.248376548405912, -1, 0.580873833308403]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.13049109648498, -0.641161967367475, 1.58305601849363, 0, -1.6501019730466, -1.19483552044017, -0.130554536975318, 1.31385139917648, 1.15608613909673, -0.330156069402656, 1, 0, 0];
        actual = matrixUtilities.multiply([1, 0.38822049805346, 0.679484438467531, -1, -1, 0, 0.801117469464018, 1, 0.206956648364177, 0, 0, -1, -1], [0.966606509856231, 1, -1, 1, 0.650101973046596, 0.19483552044017, -1, 1, 1, 0.330156069402656, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.118399775642156, 0.642086584323661, -0.617778011577544, 0.581568535222471, 1.39358568529894, -1.60456085931722, 1.66914391688497, 1.45752747640685, -1.66914391688497, -1.99405911704249, -1, 0.971066792947737, 0];
        actual = matrixUtilities.multiply([0.137088230409235, 0.738571110991096, -1, 1, 0.575627652264958, -1, 1, 0.66914391688497, 0, -1, 0, -1, 0.366930108222612], [0, 0, 0.781659859596593, 1, 1, -1, 1, 0.683750483060139, -1, 0.994059117042487, 0, 0.0289332070522631, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.148068078396874, -0.956113590372779, -1, 0, 0, 0, 0.682104162282822, 0.0351379047025797, 0.800655715540357, 0.148068078396874, -1.04388640962722, -1, 0];
        actual = matrixUtilities.multiply([1, -1, 1, 0, 0, 0, 0, 0, 0.800655715540357, -1, -1, -1, 0], [0.628232443997745, 0, -1, -1, 0, -1, 0, 1, 1, 0.851931921603126, 0.0438864096272208, 1, 0.493269796247254]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0794764776152915, 0.0497170429713351, 0, 1, 1, 0, 1.31084542642853, 0.936402125254461, 0, 1.97372735616459, 1.59928405499052, 0, 0];
        actual = matrixUtilities.multiply([0.0794764776152915, 0, -1, 0, 1, 0.703115265212541, 1, 0.310845426428525, 1, 1, 0.973727356164589, 1, 0], [-1, 1, 1, 1, 0.625556698825935, 0, 1, 1, 0, 0, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.47731460466856, -0.522685395331441, -0.605261752575607, 1, -1, 0.0538870715787109, 2, 0, -0.24467132903853, 0, -2, 0.75532867096147, -0.964409932011929];
        actual = matrixUtilities.multiply([0.00876888679748815, 1, 0.48709532734337, 0.701441599382759, 0, 1, 1, -1, 1, 0, 1, 1, 0.964409932011929], [-1, 1, -1, 0, 0, -1, -1, -1, 0, 1, -1, 0.75532867096147, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.826814415784001, 2.13562491675505, 0.814392574539017, -0.00391654158193457, 0.00391654158193457, 0, 1.71888965494879, -0.0891837142823189, 1.34205042016228, 1, -2, -0.709612206420681, -0.173185584215999];
        actual = matrixUtilities.multiply([1, 0, 1, 0.00391654158193457, 0, 0, -1, 0.71888965494879, 0.910816285717681, -1, 0, -1, 0.173185584215999], [1, 0.78311897245381, 0.605017840212685, -1, 1, 0, 1, 0, 0.967775876618817, 0, 1, 0.709612206420681, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -0.267001824112144, 0, 0.248929477613523, 0.00485234521555358, 1.00596646312902, 0, 0, 1, 1.08066819654488, 1, 0.983785939041129, 1];
        actual = matrixUtilities.multiply([0, 0, 0, 0.00485234521555358, 1, 0.823700332466373, 0, 0, 1, 1, 0.549739697272768, 0.883587011547567, -1], [0, 0.267001824112144, 0, 0.946346184679468, 1, 0, 0.244337479232036, 0, 0.182266130662647, 0, 0, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.08482371926532, -1.45114134040249, 0.167310822367347, 1.35856579819627, 1.73387921356311, 0, 1.30766520320662, 1.11494288553253, 0, 0.0594703811497755, -0.655441618667971, 0, 0.851477875770758];
        actual = matrixUtilities.multiply([-1, -1, 1, 1, 1, -1, 1, 0.186161433898919, 0.189425149089389, -1, 0.418036179346049, 1, 1], [0.273742078930951, 0.282737873160624, 0.167310822367347, 1, 0.973364347579593, 0, 1, 0.760514865983517, 0, 0.641434201803726, 0, 0, 0.851477875770758]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.989300379990274, 1.98930037999027, 2.98930037999027, 1.76018475078055, 0, 1, -1, 0, -1, 0.64364371013066, -0.64364371013066, 0.35635628986934, 0.133850665721282];
        actual = matrixUtilities.multiply([1, -1, 0, 1, 0, 0.760184750780549, -1, 0, 0, 1, 0.64364371013066, -1, 0.989300379990274], [-1, 1, 1, 1, 0, 1, 1, -1, -1, 1, 0, 0, 0.135298306185425]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.124971468059798, 3, 1.98910039662807, -1.8750285319402, 1, 1.98910039662807, -0.0599522888939606, 1.05995228889396, 1.05929883272378, 1.8750285319402, 0, -0.989100396628073, 0];
        actual = matrixUtilities.multiply([-1, 1, 1, -1, 1, -1, -1, 0.0599522888939606, 0, 0, -1, 1, 0], [0.729122110982017, -1, -1, 0, -1, -1, -1, 1, 0.989100396628073, 0.875028531940202, 1, 0, 0.618553270873871]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.46281587415167, 0.0433556480334422, 1, -0.860484660538139, -0.934920248545204, -2, -0.555202498359234, -1, -1, -0.491248445105083, 0.0153781282787109, 0.23925685660879, 0];
        actual = matrixUtilities.multiply([1, 0.666192587775268, 0, -1, 1, -1, 0, 0, -1, 0.158798976875282, -1, 0.0804578797335075, 0], [0, 1, 1, 1, 0, 1, 0.694717837821095, 0.0650797514547965, 0, 0.555202498359234, 1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.802898326156815, 1.26235444064362, -0.658422487316585, 1.002698388554, -1.0092046195684, -0.914630813484374, 0.0230611469704011, -0.0230611469704011, -1.90077428608238, -0.235591251512799, 0.942435349310951, -2.86627078236373, -1];
        actual = matrixUtilities.multiply([0.313920797460676, 0.764728583285924, 0.713162226468866, -1, 0.00920461956840224, 0, -1, 0, 0.976938853029599, -1, -1, 0.942435349310951, 1], [0, 1, -1, -1, 1, 0.923835433052776, 0.293155902201848, -1, 1, -1, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, 0, -1, 0.125425291771733, 1, -1, -1, -0.745825052608654, 2, 0.874574708228267, -0.254174947391346, 0];
        actual = matrixUtilities.multiply([0, 0, 0, -1, 0, -1, 0, -1, 0, 1, 1, 1, 0], [0.131759595187269, -1, 1, 1, -1, -1, 1, 1, 0.745825052608654, 0, 0.874574708228267, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.93087303037487, 0.848527661134488, 0.86941392519876, 1.53392785765879, 1.32899895558553, 1.20233402876292, 0.533927857658792, -0.627203139768542, -0.655013646769809, 1.18951064621875, 1.0551043745631, 1.04635651905384, 0];
        actual = matrixUtilities.multiply([1, 0.61554652667397, 0.602215592098523, 0, 1, 1, 1, 1, -1, 0.107740615079059, 0.153148089141188, 1, 0], [1, 0.843696122450613, 0, 1, 0.04379790464593, 0.14265232446727, 0.533927857658792, 0.328998955585528, 0.202334028762921, 1, 1, 1, 0.785763238456921]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.82459010781003, -0.134055908831794, 1.24964241226448, -0.748115994850228, -1.68877941886125, -1, 0, 2, 1, 0, -0.690534198978233, 0, 0];
        actual = matrixUtilities.multiply([0, -1, -1, 0.884575933164254, 0.632691928014481, 1, -1, 0, -1, 1, 1, 0, 0.824590107810027], [1, -1, 0.302747280012233, 1, -1, 0, -1, 0.309465801021767, 0, -1, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.629601955673805, 0.112349597155888, 0.6501372357557, -0.639846502063826, 1.05112454618143, 1.22445213769786, 1.36853622941698, -0.830097468490758, -0.254076774350403, 1.24825512489688, -1.16990253150924, -1.90281193140094, 0];
        actual = matrixUtilities.multiply([0, 1, 0.661259112256234, -1, 0, 0.300905146776189, 1, 0, 1, 1, -1, -1, 0], [0, 1, -1, 0.808395677156931, -1, -1, -1, 0, 0.156888705751341, 0.560140552260047, 0.169902531509242, 0.745923225649597, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.61790288873851, -0.462050806014822, 1.5810727582225, -0.583650444440381, 0.110155177353954, 0, -0.264371601056481, 1.60508413218986, -2.14019932278441, -0.258307998188915, 1.30988183902499, -1.8419584426293, 0.617902888738505];
        actual = matrixUtilities.multiply([0.0368301305160067, 0, -1, 1, -1, 0, 0.292177277287551, 1, 0.848022045496861, 0, 1, 0.841958442629296, 0.617902888738505], [1, 0, 1, 0, 1, -1, 0.583650444440381, 0.889844822646046, -1, -1, 0.498880936530829, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.842341586874026, 0.889297730703511, 1.47016310108368, -0.452201918696232, 0.8834682367818, 1.99344483436711, -0.524521548165092, 0.766833845913721, 1.86229146824325, 0.492271834282331, 0, -0.492271834282331, 0.529836898916325];
        actual = matrixUtilities.multiply([-1, 0.13608262927089, 1, -1, 0, 0.993444834367114, -1, 0, 0.86229146824325, 0.492271834282331, 0, 0, 0.529836898916325], [-1, 0, -1, 1, 0, -1, 1, 0, 0, 0.551412682771409, 0.889297730703511, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.0201538321656, -2.0411647125339, -1.71128595143745, -1, 0.108962715654151, 0.534085275388362, -0.101684488869125, -0.789352795476724, -0.137209244593647, 1, -1.87547721943877, -0.913586663025201, 1];
        actual = matrixUtilities.multiply([-1, 0.020153832165596, -1, -1, 1, 0, -1, 0.101684488869125, 0, -1, -1, 0.0913786101580498, -1], [1, 1, 1, 0, 0.891037284345849, 0.213196177134847, -1, 1, 0.74728145252321, 0, 0.170281260353644, 0.513150359277218, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.193155552816184, -0.0724356486799361, 0, 0.193155552816184, 0.0724356486799361, 0, 0.0827000154522484, 1.03101349755565, 0, 0.564873616526756, 1.03042946725777, 0.383139026662823, 0];
        actual = matrixUtilities.multiply([0, -1, 0, 0, 1, 0, -1, 0.4281524100472, 0, -1, 0.420089663201985, 0.598147232829662, 0], [0, -1, -1, 0, -1, 0, 0.193155552816184, 0.0724356486799361, 0, 0.808715545017605, 0, 0.640543006193146, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.9506852011898, 2.33843733618894, 1.12163074366824, 0.054277439161333, -0.767021562329969, -1, 0.284183875789952, 0.462884874298649, -2, 0.884534064225304, 2.0070178499478, -0.850865780306452, -1];
        actual = matrixUtilities.multiply([0.433546866492157, 0.771984202681102, 1, 0, 0.232978437670031, -1, -1, 0.462884874298649, -1, -1, 0.857883630254252, 0.149134219693548, -1], [0, -1, 0.311916122823915, 0, -1, 1, 1, 1, 0, 0.178700998508698, 1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.819650157006457, -2.09229970724951, -0.296668094721003, -1.37143734638958, 0.643749190707853, 0.69123304527776, -1.71811647234397, 0.281883527656032, 0.718116472343968, -1.21455201842568, 0.785447981574316, 0.214552018425684, 0.742313821214397];
        actual = matrixUtilities.multiply([0.703331905278997, 0.868558803512044, 0.969125764430093, 0.69123304527776, 0.501504398650259, -1, 0.718116472343968, 0, -1, 0.214552018425684, 0, -1, 1], [0, -1, -1, -1, -1, 1, 0.63767276966836, 0.667954731577986, 0, 1, -1, 0, 0.742313821214397]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.230034997581619, -0.825633417733774, 0.841364026143494, 0.744973100817887, 1, -0.796037412619236, -0.687794642920654, 0, -0.41262525525532, 0.647569820586392, 1, -1, 0.523613616954112];
        actual = matrixUtilities.multiply([1, 0, 0.825633417733774, 0.270479804030843, 0.796037412619236, -1, -1, 0.41262525525532, 0, 0.0187519602564871, 1, -1, 0.87549239717214], [-1, 0, 0.9610180840646, 1, 0, 0, 0.756631721163463, 0, -1, 0.127813860833558, -1, 0, 0.598078999481201]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.85803692501878, -0.593351824951056, 1.85803692501878, -0.0382010429344145, 0, 0.0382010429344145, 0.142234854932052, -0.653341029457941, 1.79060175027261, -0.361247324552968, -0.274004726332615, 1.36124732455297, -1];
        actual = matrixUtilities.multiply([1, 0, 0.858036925018782, 0, 0, 0.0382010429344145, 0.0671633947953411, -1, 0.790601750272606, 1, -1, 0.361247324552968, -1], [0, 1, -1, -1, 0.406648175048944, 0, -1, 0.680652901381558, -1, -1, 0, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.58365312129158, 0.732888400297767, 0.678098487052181, 0.20876144994384, -0.603975078637501, 0.837291354237726, -2, 1, -1, 1.41425800797547, -0.623108455077097, 0.928320470232666, -1];
        actual = matrixUtilities.multiply([0.259319597044643, 0.76875722909754, 0, -1, 0.652545065922916, 0.837291354237726, -1, 0, -1, 0, 0.85362495195755, 0.928320470232666, 1], [0.88670808444112, 0.458020681728619, 0.678098487052181, 1, 0, 0, 0.569263511602424, 0.357548141552856, 0, 1, -1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.181994091518037, -1.20045949807412, -1, 0.907884601460716, -0.979254429218943, 0.00172772337991219, 0, 2, 1.08328155432049, 0.907884601460716, -0.0446214419997397, 0.94458473486676, 0];
        actual = matrixUtilities.multiply([0, -1, 0.20045949807412, 0.0207455707810566, 0, 1, 1, 1, 0, 0.0117744146901064, 0.943604143310154, 1, 0], [0.0060898792026983, 1, 0.581221109992462, 0, 1, 0.0832815543204926, 0, 1, 1, 0.907884601460716, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.019877729989167, 1.26405065518993, 2.04894207743304, 0.0689522225782694, -0.127452720947309, -0.127452720947309, 1.28334841162051, -1.07204156279193, 0.307137214599739, 0.489743341919847, 0.424023213062446, 1.17440924255538, 0];
        actual = matrixUtilities.multiply([-1, 0.234284934696874, 1, 0.127452720947309, 0, 0, 0.858193649844357, 0.81906362335154, 0.605215710403964, 0, 0.489743341919847, 0.913766554982293, 0.501664410113201], [0.571776047149569, -1, 0, 0.541002358096187, -1, -1, 1, -1, 0.783283020734453, 0, 1, 0.865430666071098, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.0357806026170871, 0.676816932240881, -1, -0.757860017915081, 0.085390761487513, -1, 0.313369534310213, -0.163272013049693, 0, 0.803094497324477, 0.323183067759119, 1, 0];
        actual = matrixUtilities.multiply([0, 0, -1, 1, -1, 0.264217930968952, 0, 0.298408188064773, 0.41814125954087, -1, 1, 1, -1], [0, -1, 1, 0.23268610529261, -1, -1, 1, -1, 0, 0.0357806026170871, 0.323183067759119, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.046017788837672, 0.671422238881779, 1.72041192125548, 1.92225138234079, 0.871586699993787, 1, 0, 0.852078384455297, 1, 1.02744729212832, 1.34535992794125, 1, 1];
        actual = matrixUtilities.multiply([-1, -1, 0.0460177888376721, -1, -1, 0.922251382340794, 0.237446479144248, -1, -1, 1, -1, 0.0274472921283205, 1], [-1, 0, 0.720411921255482, 0, 0.339089941856959, 0, -1, -1, -1, 1, 0.228437328351865, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.281882404481006, -3, 1, -1.01492390456373, 0.973514543833916, 0, -0.566764795757489, 0.383634857546368, -1, -0.139337617206811, 0.00515027282170022, 1, 0];
        actual = matrixUtilities.multiply([-1, 0, 1, 0, -1, -1, 1, -1, 0.589879686287548, -1, 0.19445664025585, -1, -1], [0, 1, 0, 0, 1, -1, 0.733041500082725, 0.0264854561660837, 0, 0.281882404481006, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, -0.934111451233789, 0.580870535495165, -2.21515236991232, -1.21515236991232, -1.98737042117276, 1.71493201782691, 0.714932017826909, 1.82458722769535, -2, -2, -0.987370421172758, 0];
        actual = matrixUtilities.multiply([1, 0, 0, 0.215152369912319, -1, -1, 0.120202608462517, 0.835134626289427, 1, 1, -1, 0, 1], [-1, 0.0658885487662109, 0.580870535495165, -1, -1, 0, 1, 1, 0.987370421172758, 1, 0, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.904934252665434, 2.72137570740719, 2.71752633794754, 2.08528979289962, 2.42905755686995, 2.01140751789423, -0.341928929715384, -0.341928929715384, -0.236179981828548, 0.707863943980943, 1.48008199524138, 1.38888722870912, 1];
        actual = matrixUtilities.multiply([0.844812168667471, 0.26394577942041, 1, 0.983888263806649, 0.445169293063306, 1, 0.658071070284616, 0, -1, 0.480081995241382, 1, 0, 1], [-1, 0.61261775931931, 1, 1, 1, 0.81004335210195, 0.227781948739561, 1, 1, 1, 1, 0.769246077523216, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.51265863306479, -1.53096897220205, -1.9089894955554, 0.572289949083836, -0.789677293407581, -1.78967729340758, -0.833229667478143, 1, 1.76715750422662, 0.782612655676255, -1, -0.826155088295301, 0.352788429871569];
        actual = matrixUtilities.multiply([1, -1, 0.73004597738853, 0, -1, 0.789677293407581, 0, 0.76715750422662, -1, 1, -1, 0, 0.352788429871569], [0, 0.564295731747661, -1, 1, -1, 0.173844911704699, 0.217387344323745, 0, 1, 1, -1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.485760717413277, -0.461700955155166, -0.304926793232992, -0.514239282586723, -1.46170095515517, 0.695073206767008, 2.51423928258672, 0.538299044844834, -0.695073206767008, 1.51423928258672, 1, -0.695073206767008, 0];
        actual = matrixUtilities.multiply([-1, -1, 0, -1, -1, -1, 1, -1, 1, 1, 0, 1, 0], [1, 0.327230119764446, 0, 0.514239282586723, 0, 0.304926793232992, -1, 0.461700955155166, 0, 1, 1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.0417342107006, -1.54098089111083, -1.8733074021867, -2, 0.372554082596933, 2, 0.109195177028512, 0, -0.109195177028512, 0.716221500055968, 1.10572283870738, -0.716221500055968, 0.1684268085139];
        actual = matrixUtilities.multiply([0.873307402186705, 1, -1, -1, 0, 1, 0.109195177028512, 0, 0, 1, -1, 0.283778499944032, 0.1684268085139], [1, -1, 0, 1, 0, -1, 0, -1, 0, -1, 0.372554082596933, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, -2.26711570297699, 0, 0, 0.904705756299526, 0, 2, -0.267115702976992, -1, 0, -0.732884297023008, 1, -0.73664109443158];
        actual = matrixUtilities.multiply([-1, -1, -1, 0, 0, 0.904705756299526, -1, -1, 1, -1, 1, 0, -1], [0, 0, -1, -1, 1, 0, -1, 0.267115702976992, 1, 0, 1, 0, 0.73664109443158]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.253875729945018, -0.38901049910437, 1.80488831697689, 0, 1.01708686864799, 0.0945941913382123, 0, 1.65888770943372, -0.960502631012584, 0, 1, 0, 0.501281758538113];
        actual = matrixUtilities.multiply([0.831197609115018, 0.677525523899833, -1, 0.703069070215835, -1, -1, 1, 0, 0.960502631012584, 1, 0, 0, 0.501281758538113], [0.506453158569733, 0.285866411070277, 0.38192646921702, 0, 1, 0, 0, -1, 0.905405808661788, 0, 0.685982201567843, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -2.10390812955047, -1, -1.98799949138798, 0.0120005086120221, 0.0120005086120221, -0.651698584971809, 1.75560671452228, 0.651698584971809, -1, 2.10390812955047, 1, 0];
        actual = matrixUtilities.multiply([1, -1, -1, 0.987999491387978, 0, 1, -1, 1, 0.651698584971809, -1, 1, 1, 0], [0, 1, -1, -1, -1, -1, -1, 0.103908129550474, -1, -1, 1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.150093502435898, 1.73584571456876, -0.320091232474008, -0.552796220198644, 1.44720377980136, 0.0805172684586111, 0.0970833865446427, 1.82823965830181, -0.917613287771573, -1.30133823272834, 0.96750549551449, 1.06088404948769, 0];
        actual = matrixUtilities.multiply([0.424264250986401, -1, 0.578591009405717, 0, -1, 0.447203779801356, 1, -1, 0.457586922895902, -1, -1, 0.338158230920396, 0], [-1, 0, 0, 0.63949646364874, 0.370652735405905, -1, 1, -1, 0, 1, 1, 0.180046037388987, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 1, 0.862491954985304, 0.533792208796606, 0.151135738078102, 0.392353707747715, 0, 0, 0, 0.475753552633364, -0.448359780688006, 0.108653209970374, -0.114009303559553];
        actual = matrixUtilities.multiply([0, 0, -1, 1, 0.548222180245548, 0.30064208167635, 0, 0, 0, 0.0402547880263323, 0.488614568714339, 0, -1], [-1, 0, 0.137508045014696, 0, 1, 0.598101234342019, 0.973678607015721, -1, 0.173095067112285, 0, -1, -1, 0.114009303559553]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, 0, 0.0778923076940199, -1, 1, 1.86837972980294, -0.545251285445528, 1.45474871455447, 2, 0, 2, 0];
        actual = matrixUtilities.multiply([0, 0, 0, -1, 0, -1, -1, 0.454748714554472, 0.448571266349671, -1, 1, 0, 0], [0, -1, 1, -1, 1, -1, 1, 1, 1, 0.92210769230598, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.87072032264933, 0.399137971177296, -3, 1.01341294415428, 0.399137971177296, -1.89624862600875, 1, 0.399137971177296, -2, -0.94269211310982, 0.399137971177296, 0.443286122494976, 0];
        actual = matrixUtilities.multiply([-1, 1, 1, 0.103751373991254, 1, 1, 0, 1, 1, 0.443286122494976, -1, 1, 0], [0.28278344603385, -1, -1, 0.12927967735067, 0, 1, 1, 0, -1, 0, 0.399137971177296, -1, 0.918036661538313]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 0.187438516495209, 0.207398326698411, -1, -1.38645633421208, -1, -0.398410204517846, -0.0535428878956698, 0.00818835664921829, -0.272871859033067, -0.0852830572813251, 0.133726702133998, 1];
        actual = matrixUtilities.multiply([0.788913187472575, 0, 1, -1, 0, -1, 1, -1, 0.00818835664921829, 0.907264844471246, -1, 0.133726702133998, -1], [0, 1, 0.792601673301589, 0, 0.942824496395339, 0, 0.406598561167064, 1, 0, 1, 0.443631837816738, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.91610475392831, -0.493274895179375, -3.08389524607169, -1.88222464401379, 1.73187497571664, -0.117775355986215, -1, 0.849650331702852, -1, 1, 1.15034966829715, 1, -0.17915884320585];
        actual = matrixUtilities.multiply([-1, 0.0838952460716922, -1, 0, 1, 0.882224644013785, 0, 1, 0, -1, -1, 1, -1], [0, 0.564556518832481, 1, -1, -1, 1, -1, 0.849650331702852, -1, -1, 1, 1, 0.17915884320585]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.16246850535485, 2.35386134389446, -0.593028938673916, 0.27396387386786, 0.711709721345319, -1, -1.74154160113146, -0.643506604546451, -0.489099609427666, -0.0211428413312273, -1.02834003409395, 1.26109898945184, 1];
        actual = matrixUtilities.multiply([1, 0.593028938673916, 0, 0, 1, 0, -1, -1, -1, 0.0729767117057818, -1, 0.384629785262341, 1], [1, 1, -1, 1, 0.931796883201132, 1, 0.27396387386786, 0.711709721345319, -1, 0.467577727263597, -1, 0.489099609427666, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.772274671947711, 0.605727433043405, -1, -0.600534604767214, 0, -1, 0.153662486355619, 1.87721301190425, 0.877213011904253, 0.923816926481261, -0.0650441972841714, 0.934955802715829, -0.605727433043405];
        actual = matrixUtilities.multiply([-1, -1, 0, -1, -1, 0.967680822111518, 0.877213011904253, -1, 1, 0.934955802715829, 1, 1, 0.605727433043405], [0, 1, 0, 0.398708729259068, 1, 1, 0.373565942688643, -1, 0, 0.177475943778397, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.443942917251933, 0.443942917251933, 0, 0.273149984550267, -0.775064844999027, -0.74789357772314, 0.29854844710722, 0.787937031028763, 0.802590738203172, 0.726850015449733, 0.305051591389371, 0.797483429218402, 0];
        actual = matrixUtilities.multiply([0, 0, 0.443942917251933, -1, 0.529986746390344, -1, 1, 0.0545838712968788, 0.428301568342513, 1, 0, 0, 0], [0.533050211394695, 1, -1, 0.726850015449733, 0.305051591389371, 0.797483429218402, 0, 1, 0.0935680973779262, -1, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.869864236037184, 1.16259988311799, 1.70726435291919, 2, 1, -3, -1.34412485796219, -1, 2.34412485796219, -1.50198256061505, 1, 0.501982560615047, -1];
        actual = matrixUtilities.multiply([0.869864236037184, 1, 0.162599883117992, -1, -1, 1, 1, 0.34412485796219, -1, 0.501982560615047, 1, 1, 1], [1, 1, 0, -1, 0, 1, -1, 0, 1, 0, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.850764212129062, 0.699536242382385, -0.805395243030637, 0.623400076117087, -1.60760305663925, -0.247127893886462, -0.389582655108339, 0.265432881780636, 1.40391544523322, 1, 1, -0.124475155549345, -1];
        actual = matrixUtilities.multiply([0.0767598962768726, 0.223703861340742, 1, 1, 0.607603056639248, 0.0157970194778391, 0.734567118219364, -1, 0.610417344891661, -1, 0, 1, -1], [0.37293964921168, -1, 0.841409587227465, 0, -1, 0.356805042995515, 1, -1, -1, 1, 0, 0.23232988744617, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, 1.35844156349005, -1, 0.835284170152286, 0.620777076864977, 0.979218640355029, -0.533580694596088, 0.824860868893965, 0.466419305403912, 0.446222712493605, -0.195335724016342, -0.553777287506395, -1];
        actual = matrixUtilities.multiply([-1, 1, 0, 1, 0.407251405253658, 0.428032764898628, -1, 0.466419305403912, -1, -1, 0.446222712493605, 0, -1], [-1, -1, 1, 0, 0.641558436509947, 1, 1, 1, 1, 1, -1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.649291824672251, 1.18997708790402, 1.01008297037803, 0.340275798151398, -1.92708129013287, -1, -0.469614004231963, 2.62805188850117, -0.27137710352958, -0.536000457342671, 2.46056941564795, -0.370411586188903, -1];
        actual = matrixUtilities.multiply([0.68005880931395, 0.989917029621972, 1, 1, 0, -1, -1, 1, 0.72862289647042, -1, 0.959742591231942, 0.589331005043039, -1], [0.382831006023488, 0, -1, 0.816875350576302, -1, 0, 0, 0.952559233621023, -1, 0.476599552424904, 0.92708129013287, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.58468358432161, 0.229292947237433, 0.852506478157866, 0.756036854701134, 0.00918367458935065, 0.685883520064683, -0.416772700574609, 1.13570865641842, 0.334732092012857, 0.95285945243801, -0.253146819888217, -0.876422456408116, 0.710019395085992];
        actual = matrixUtilities.multiply([0.631824131883599, -1, 1, 1, 0.243963145298866, 0, 0.536086751863401, 0, -1, -1, -1, 1, 0.710019395085992], [0, 0.0976715255983507, 1, 1, 0.253146819888217, 0.6243991123626, -1, -1, 0.252023344045516, 0.95285945243801, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.22232055256603, 0.163033311331194, 0.836966688668806, 1.4884055389503, 1, 0, -0.593975388829789, -0.518698760084202, -0.481301239915798, 0, 0, 0, 0];
        actual = matrixUtilities.multiply([0.163033311331195, 1, -1, 1, 1, -1, 0.999336545355309, 0.518035305439511, 1, 0, 0, 0, 0], [0, -1, -1, 0.317915862108542, 1, -1, 0.170489676841763, -1, 1, -1, -1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.30550506911497, 0, 0.897143678691771, 1, -1, 0, -1.31180248470595, 1.31180248470595, 0.410066683967629, 0.0279488647486776, -0.722443795633709, 0.865026711423428, 0.664262004971626];
        actual = matrixUtilities.multiply([1, 1, -1, -1, 0, 0, 0.311802484705952, 0, 1, 0.277556204366291, 1, 0, 1], [1, 1, 0.442183651235971, -1, 1, 0, 0.305505069114969, -1, 0.865026711423428, -1, 1, 0.410066683967629, 0.664262004971626]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.684320953993276, 0, 1, 1, 2, 0, 0, -1, 0, -1, -1, 0, -1];
        actual = matrixUtilities.multiply([0, 1, -1, -1, -1, -1, 0, 1, 0, 0, 1, 1, -1], [0.315679046006724, -1, -1, 0, -1, 0, 0, -1, 0, -1, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.397979215029684, 1.4886646566146, -1.82252285900643, 0, -1.59410465163836, 0, -0.170733126510286, 1.35435152210032, -0.239753129538034, -1.24584575567667, -1, -1, 1];
        actual = matrixUtilities.multiply([0.822522859006432, 0.896912266917952, 0, -1, 0, -1, 1, 0.280745147858162, 0.760246870461966, 0, -1, -1, -1], [-1, -1, 1, -1, 0.594104651638355, -1, 0.245845755676667, 0, 0, 1, 1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.338481278782, 0.13609920310447, 0, 0, 0.318483372367212, 0.177594633390007, -2, 0.318483372367212, -1.6321674313546, -2, 0.318483372367212, -1.4075050374528, -0.338481278782003];
        actual = matrixUtilities.multiply([1, -1, 0, 0.822405366609993, -1, 1, 0.632167431354601, 1, 1, 0.407505037452795, 1, 1, 0.338481278782003], [1, 0.402087830659974, 0, 0, 0, -1, -1, 0, -1, -1, 0.318483372367212, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.824952456087317, -0.497666083042354, 2.62944693939269, 0.824952456087317, -1, 0, 0, 1, -1.62944693939269, 0, 0, 0, -1];
        actual = matrixUtilities.multiply([-1, -1, 1, 1, 0, 0, 0, 1, -1, 0, 0, 0, -1], [0, 0.497666083042354, -1, 0.824952456087317, -1, 0, 1, 0, -1, 1, -1, 0.629446939392689, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.888628197782034, 1.88862819778203, -1, 0.417193129387308, 0.417193129387309, 0, -1, -2, 1, 1, 2, -1, 0];
        actual = matrixUtilities.multiply([0.888628197782034, 0, -1, 0.417193129387308, 1, 1, -1, 0, 1, 1, 0, -1, 0], [-1, 0, 0.204696902169239, 1, 1, 0, 0, 1, -1, 0, -1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.04158729293132, -0.85931057068088, 0.318611603844264, -0.464367308870129, 1.46436730887013, 1, 1, -1, 0, -1, 0.209350349479052, -0.790649650520948, 0];
        actual = matrixUtilities.multiply([-1, 0, 0, 0.464367308870129, 0, -1, -1, 0, 0, 1, 0, 0.790649650520948, 0.318611603844264], [0.130526611176565, 0.441570324563221, 1, -1, 1, 0, 0.245060844460996, 0.5808378097512, 1, 0, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.648938204464008, -1, -0.62163000203132, -0.742900966176532, -0.25586057538725, 0.334379356975844, 2.76888428803947, 1.16984478904393, 1.5830601363364, 2.05906861018946, 0.537514506147192, 0.659883932983449, 1];
        actual = matrixUtilities.multiply([0, 0.648938204464008, 0, 0.334379356975844, 0, -1, 1, 1, 1, 0.0768237966470531, 1, 1, -1], [0, 1, 1, 0.76888428803947, 0.684950804191153, 1, 1, 0, 0.583060136336396, 1, 0.484893984852775, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -1, -1, -1.56348428249521, 0, 0, -0.178288267621419, 0.392449886720837, -1, 0.563484282495214, 1, 0, 0];
        actual = matrixUtilities.multiply([0, 1, 0, 1, 0, -1, 0.615875646293105, 1, 0.776574240427732, 0, 0, 1, 0], [0, 0.492079502200745, 0.666066372611591, -1, 1, 0, 0, -1, -1, 0.563484282495214, 1, 0, 0.0353031978175525]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.879638568442147, -0.0395981222575522, 1, 2.59329236781865, -1.97269491085461, 0.689555150312164, 2.2834669079189, -1.33761527777538, 1.62278659996706, 0.260634229206684, -0.272269744087136, -0.272269744087136, 0];
        actual = matrixUtilities.multiply([-1, -1, 1, 0.689555150312164, 1, 1, 1, 0.377213400032936, 1, 0, 0.272269744087136, 0, 0], [1, 1, 0.355470431202776, 0.922373815869155, 0.0395981222575522, 1, 0.957264752572991, -1, -1, 1, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.73852465988068, -0.613958946249429, 2, 0.738524659880681, 0.587571028427953, -1, 0.261475340119319, -1.50178467133166, 1, -1.56301285920068, 2.1059788971813, -1, -0.91679931288436];
        actual = matrixUtilities.multiply([-1, -1, 1, 1, 1, -1, -1, -1, 0, 1, 0.591702842894803, 1, -1], [1, 0.0263879178214762, -1, -1, 0.742486175961088, -1, 0.738524659880681, 0.759298495370568, 0, -1, 0.914213642903703, 0, 0.91679931288436]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.97899374970188, -1, -1, 0.819237218154239, -2.18076278184576, -0.132942066124148, 0.538157867983988, 0.461842132016012, 2.43975651071261, -2, 1, -1.04782071572161, 0.553439778259974];
        actual = matrixUtilities.multiply([1, 0, 0, 0.180762781845761, 1, -1, -1, 1, 0.461842132016012, 1, -1, 1, 0.978993749701881], [-1, 0, 0, -1, -1, -1, 0, -1, 1, -1, 1, 0.952179284278387, 0.565314925073327]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -1, 0.0932936817842041, 2, -2, -0.906706318215796, 0, -1, 2, 0, 1, 0.906706318215796, 0];
        actual = matrixUtilities.multiply([0, 1, -1, -1, -1, -1, -1, 1, 0, 0, 0, 1, 0], [1, 1, -1, -1, 1, -1, -1, 0, 1, 0, 1, 0.906706318215796, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.38016937632233, -0.77112737181475, 1.61516306577956, -0.65611126365677, -1.66739716179082, -0.0398210483495616, 0.597925823460299, -1.58200346007105, 1.16675029654523, -1.5979258234603, -0.820433778139033, -1.40632778844159, -0.340263243457425];
        actual = matrixUtilities.multiply([0.635813609992999, 1, 1, 0.575136116973654, -1, 0.271827266678134, 1, 0, 0.582003460071051, -1, -1, 1, 0.340263243457425], [0, 0.1300536008226, 0, 0.597925823460299, -1, 1, 1, 0.820433778139033, 0.69283862211408, 0, -1, 0.286510833672486, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.23522705337471, 0.378243678425552, -1.21906940262552, -0.621496632984605, -1, 1.06882360068561, 0.583541588462583, -1.66069858505423, 0.984391154345229, -0.128164563005625, 0.465952699289635, -0.963244941828683, -0.337833976530393];
        actual = matrixUtilities.multiply([0.540156135587094, 0.95959029810484, -1, -1, 1, 0, 0, 0.726293569303254, 0.934405015750977, 0, 0.534047300710365, -1, 0.337833976530393], [-1, 1, 0.754939678010968, 1, 0, -1, 0.378503367015395, -1, 0.0688236006856075, 0.330303264469981, -1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 0.673079464432355, 1, -0.299186894343787, 2.66179238244043, 0, -0.299186894343787, 0, -1, 0.299186894343787, -0.379280886091838, 1.93793632320032, 0.0739395092585774];
        actual = matrixUtilities.multiply([0, 0, 0.326920535567645, 1, -1, -1, 0, -1, 1, 0.937936323200323, 1, 0, 1], [-1, 1, 1, 0, 0.661792382440433, 1, 0.299186894343787, -1, 1, 0, -1, 0, 0.0739395092585774]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, -2.31367280395407, 1.08083005346396, 0.201878863015156, 1.08438865222319, -1.20187886301516, 1, -0.581983715566799, 0, 0.740918672057296, 0.721539848074715, 0.543290269114317, 0];
        actual = matrixUtilities.multiply([-1, -1, 0.895656519520868, 0, 0.201878863015156, -1, 0, 1, 1, 0.707620791954743, 0.0332978801025534, 0, 0], [1, 0.519841221403257, 1, 1, 1, 0.814826466056903, 1, 0.418016284433201, -1, 0, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.673661585223144, -0.993627702228906, -1.03349894801075, 0.915126227734204, 0.642604813744596, 0.49023970146209, 1.9151262277342, -0.357395186255404, -0.504512869522214, -0.345062343180225, -0.907665690760309, -0.924311230944226, 0.183917179789356];
        actual = matrixUtilities.multiply([1, -1, 0.296122085440961, 0, 0, 1, -1, -1, 1, 0.476554585842674, -1, 0.143687546785775, 0.183917179789356], [0.300947023230115, -1, -1, -1, 0, 0, 0, 1, 0.994752570984304, 0.915126227734204, 0.642604813744596, 0.49023970146209, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.18850376884849, 1, -0.21238800800051, 2, 0, 0, -0.234967496355515, 2.576528734796, 2.36414072679549, -1.18850376884849, -2, -1.78761199199949, 0];
        actual = matrixUtilities.multiply([0, 0, 1, -1, 1, 0, 1, 0.576528734795995, 1, 0, -1, -1, 1], [1, 0, -1, -1, 1, 1, 1, 1, 1, 0.18850376884849, 1, 0.78761199199949, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.27420527128233, -0.575447568937879, -1, -1.84274052355566, 0.48495298552554, 1.84274052355566, -1.72579472871767, 0.575447568937879, 1, -0.574279784492347, 0.172677149126923, 1.30007451321002, -1];
        actual = matrixUtilities.multiply([-1, 0, 1, 0.842740523555661, -1, 0, 1, -1, 1, 0.300074513210018, 0, -1, 1], [1, 0, 1, -1, 0.575447568937879, 1, 1, 0, -1, 0.274205271282329, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.137369714934578, -0.601566428133085, -0.356544935678324, 0.222729789662515, 1.88954978384522, 2.56663579778537, 0.0150881892224954, -1, -0.451682857913749, 0.204998281534381, 1.70950896745059, 2.37863246683365, -0.587933530373468];
        actual = matrixUtilities.multiply([0.398433571866915, -1, -1, 1, 1, 0.889549783845222, -1, 0.470826653982898, 0, 0.709508967450591, 1, 1, -1], [0, 0, -1, 0.0610397779667004, 1, 0.922509511896646, 0.161690011695814, 0, 1, 0, 1, 0.724103695584509, 0.587933530373468]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 1.31856266843088, 1.06373130905616, 0.737505014863566, -0.581057653567315, -0.326226294192591, 0.27815162775952, 0.229953943663415, 0.0460043417029419, 0.378226860136831, 0.198073710593459, 0.0396264161394367, 0];
        actual = matrixUtilities.multiply([1, -1, 1, 0, 0.262494985136434, -1, -1, 0, 0.72184837224048, -1, 0, 0.621773139863169, 0], [0, 0, -1, -1, 0, 0, -1, -1, -1, -1, 0.318562668430881, 0.0637313090561569, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -1, -1, 1, -0.415829663358549, 1.63154968322793, -0.394687957779825, 0.164122960615258, -1.39468795777982, 0, 0, 0, -0.097177345350933];
        actual = matrixUtilities.multiply([0, 0, 0, -1, 0, 0.631549683227925, 0.394687957779825, 0, -1, 0, 0, 0, -1], [0, 1, 1, -1, 0.415829663358549, -1, -1, 0, -1, 0, 0, 1, 0.097177345350933]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -1.98339023362846, 1.29773461152908, -1, 1, -1.04638316205069, 0, 0.0517146461884094, 0.782584835208293, -1, 0.948285353811591, -1.12106930099971, 0.766506325810452];
        actual = matrixUtilities.multiply([1, 1, 0.321181088835551, -1, -1, 0, 0, 0, 1, -1, 0.624795199662817, -1, 1], [0, -1, 0, 1, -1, 0.610698285331343, 0, 0, 0.435684876719343, 0, 0.0517146461884094, 0.782584835208293, 0.766506325810452]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.13697967211961, 0.177529034753111, 0.331441978146994, 0.795111766455281, -0.822470965246889, 1, 0.0534162300331191, 0, -0.260709114959794, -1.04561100902297, -0.939533155240174, -0.987405498040563, 0];
        actual = matrixUtilities.multiply([-1, -1, 0.668558021853007, 0, -1, -1, 0, 0, 0.260709114959794, 0.987405498040563, 0.058205510982408, 0, 0], [0.753228025395995, 0.621018455187333, 1, -1, -1, -1, -1, 0.822470965246889, 0, 0.204888233544719, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.437187055795075, 0.0171699137506866, -1, 1.10086565149109, 0, 0.149430044692198, 0.451640274120327, 0, 0.669094239207494, -0.962546818868904, 0, 0.0554859900030413, 0];
        actual = matrixUtilities.multiply([0.114026813355287, 0, 0, 0.685558049793149, 0.223331835690575, -1, 0.34998917037155, 1, 0, 0.377479365736935, 0.0829270179769616, 1, 1], [0.437187055795075, 0.0171699137506866, -1, 0, 0, 0, 0.451640274120327, 0, 0.669094239207494, -1, 0, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.969612627632229, 1.53854595646248, 1.45541079507726, 0, 1.85565682773276, 0.746480129917241, 1, 2, -0.127594024002363, 0, 0.779188628671313, 0.679768816082257, -0.210796179813704];
        actual = matrixUtilities.multiply([0.522017051243231, -1, -1, 0.855656827732761, 0, -1, 1, 1, -1, 0.779188628671313, 0, 0, 0.210796179813704], [0.144155232768578, 0.0784117873191888, 0, 0, 1, 0.872405975997637, 1, 0, -1, 0, -1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.34080986741037, -0.562127021403111, 1.13836443506092, -0.196517707405853, -0.196517707405853, 0.0725702732938438, 0.162880250794292, 2.06106954424095, 0.65294333298362, -0.795533050687766, -1.38246114383566, 0.186300407900021, 0.226390875981371];
        actual = matrixUtilities.multiply([0.217728462171614, 1, -1, 0.196517707405853, 0, 0, -1, 0.96020115444446, 1, 0.672451645449014, 0, -1, 0.226390875981371], [0, 0, 0.529989115674975, -1, -1, 0.369281090502292, -1, 0.365610939155152, 1, 0.123081405238752, 0.710009498386648, 0.0620232690414522, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.38632192806635, 0, -1.99902070127382, -1.42309549957326, 0.508780448468765, -0.507801149742585, 0.3484742030159, -0.373043003665769, 1.95632798548069, -0.355584000954089, 0, 1.41746069876432, -0.0576247731492039];
        actual = matrixUtilities.multiply([0, -1, -1, 0.491219551531235, 1, -1, 1, 0.626956996334231, 0.957265434301116, 1, 1, 0.417869918242968, -1], [-1, -1, 1, 0.387978393299495, -1, 1, -1, 1, 0, 0.613678071933649, 0, 0.99902070127382, 0.0576247731492039]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0.112785520550229, 0, -1, -0.112785520550229, 0, 0.590708664427841, 0.57648936499678, -0.463703844446551, -1, 0, 0, 0];
        actual = matrixUtilities.multiply([1, 1, 1, 0, -1, 0, 0.409291335572159, 1, 0.87299518001871, 1, 0, 1, 0], [0.664440789103713, 0.96178813742557, 1, -1, -1, 1, 1, 0.112785520550229, 0, 0, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.28475095112098, 0.427969159292043, -0.944839252598975, 1.64130056048796, 0.905075308356935, 0.944839252598975, -0.22174595701057, 0.672033804316089, -1.94483925259897, 1.41611896584888, 0.587273775407706, 0.944839252598975, 1];
        actual = matrixUtilities.multiply([0, -1, 1, 0.905075308356935, 1, 0, 0.367995130535213, -1, 1, 0.587273775407706, 1, 0, 1], [0.197741798217288, 0.123930485511166, 1, 0.708560441950597, 1, 0, 1, 0, 0.944839252598975, 0.517507250661732, 0.304038673780877, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.98806332556797, 1.08484122766407, -0.0848412276640726, 1.3178256329148, 0.317912962901365, 0.317912962901365, 1.96144453917307, -0.0382912815726787, 0.961708718427321, 0.0141279771989807, -1.01385327941452, -1, 0];
        actual = matrixUtilities.multiply([-1, 0, -1, 1, 0.317912962901365, 0, 0, 0.961708718427321, 1, 1, -1, 0.0138532794145184, 0.0848412276640726], [0.140694268113325, 1, -1, 1, 0, 0, 0.999725302215538, 1, 1, 1, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.503653971247214, -2.20229929695013, -0.654975918329305, 1, -0.741901210791359, 0.685041916409993, 0, -0.301354674297084, 1.68504191640999, 0, 1.18554645785389, -1.68504191640999, 1];
        actual = matrixUtilities.multiply([-1, 1, 0.503653971247214, 0.291903627706647, 0, 1, 1, -1, 1, 0, 1, -1, 1], [-1, -1, 0, 0, 0.884191783556804, 0, 1, 0.185546457853888, -1, 1, -1, 0.685041916409993, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, -1, -0.650864526001208, -0.753780021214152, -1, -0.993536693983429, 0, -1, -1, -1.04684710039145, -0.811622123611915, -1.06812460816844, -1];
        actual = matrixUtilities.multiply([0, 1, 0, 0.0251978300629174, 0.240292819794404, 1, 0, 1, 1, -1, 0, 0.811622123611915, -1], [-1, 1, 0.650864526001208, 0.235224976779532, 0, 0.256502484556522, 1, 0, 0, -1, -1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -2, -0.255024880755239, 1.48192287677989, 1, -0.744975119244761, 0.745284028232696, -0.153703783244688, -0.0733557402593411, 0.518077123220115, -1, 1.25502488075524, -1];
        actual = matrixUtilities.multiply([0, 0, 1, 1, 1, -1, 1, 0.26336115145281, 0.890342631791878, -1, 1, -1, 1], [-1, -1, -1, 0.481922876779885, 1, -1, 1, -1, 1, 0, -1, 0.744975119244761, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.00190020129472629, 0.0779360868399665, 0.0351929384600017, 0.620910277413628, -1.6452918106901, -0.451561528002639, -0.985953498151741, 1.57611232603719, 0.260150162246509, -0.975618466723533, 2, 0.451561528002639, 0];
        actual = matrixUtilities.multiply([0, 0.686276397056075, 0.0779360868399665, 0.645291810690096, -1, -1, -1, 0.892387603825139, 0.576112326037191, -1, 1, 1, 0], [0, -1, 1, 1, -1, 0, 0, 0, 0, 0.0243815332764674, 1, 0.451561528002639, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.667039032404795, 1, 0, 0.692513319520519, 0.307486680479481, 1.18802440873721, -0.667039032404795, -0.574928320280709, 0.210627731012874, -0.667039032404795, -0.966734707340009, 0.0164833213990642, 0];
        actual = matrixUtilities.multiply([1, 0, 0, 0, 1, 0.692513319520519, -1, 0.425071679719292, 0, -1, 0.0332652926599911, 0, 0], [-1, 0, 1, 0.667039032404795, 1, 0, 0, 1, 0.49551108921669, 1, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -0.0728691858578795, -0.53770936305528, -0.00305983796858221, 0, 0.00305983796858221, 0, 0.0728691858578795, -0.46229063694472, 0, 0.157477179297285, 0.923200824727863, 0];
        actual = matrixUtilities.multiply([-1, 0, 0, 0, 0.00305983796858221, 0, 1, -1, 0, -1, 1, 0.460910187783144, 0], [1, 0.373064130718384, 0.0809860830572369, -1, 0.0728691858578795, 0.53770936305528, -1, 0, 1, 0, 0.499764099949861, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.29865758134921, 1.88183689697579, 2.0793897362636, 0.29865758134921, -0.448093783535182, -0.159889971782679, -0.29865758134921, -0.070229150137087, -0.490777411968993, 0, 0, 0, 0];
        actual = matrixUtilities.multiply([-1, 0.721342198886602, 1, 1, 0.318084526955189, 1, 0, 0.270645117978866, -1, 0, 0, 0, 0], [0.175435200415289, 1, 0, 0, -1, -1, 0, 0.818163431164885, 0.593366784319918, 0.29865758134921, 0.291661088490701, 0.651369235315998, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.802278784934307, 0.390769825111468, 0, 0.0657152713405827, -0.073021973095649, -0.204767169526204, -1.00689790863865, 0.5827528110625, -0.4172471889375, 1.76206260934475, 1.37118153710374, 1, 0];
        actual = matrixUtilities.multiply([0, 0, 0.819501402238152, 0, 0.204767169526204, 0.27628892067647, -1, 0.4172471889375, 0, 0, -1, 0.778421901063259, 0], [0, 0, -1, 0.58965071970115, -1, 0, -1, -1, -1, 0.978984029488165, 0.476838506980258, 0, 0.212620121525889]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.618609577900354, 0.839779331274228, 0.466881789484472, 0, -1.62958890042714, 0, 1.52940143110668, -0.930317673334069, 0, 0, -1, 0, 0.466881789484472];
        actual = matrixUtilities.multiply([0, -1, 0.160220668725772, 1, 0.629588900427143, 1, -1, 0.400916242227385, 0.529401431106684, 0, 1, 0, 0.466881789484472], [0.981809356241398, 0, 1, -1, 0, 0, 0, -1, 0, 1, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.0941801690935065, -0.945150196526735, -0.155968356950194, -0.741517023768107, 0.134513781843184, -0.835575996822989, 0.00385140713294929, 0.478648923757139, -0.494913066627656, 0.975632513396271, 0.460507560270143, 0.476592404058479, 0];
        actual = matrixUtilities.multiply([1, 0.75787939026853, 0, 0.857936327745177, -1, 0.189912501811009, 0.330746189379481, -1, 1, 0, 0, 1, -1], [0.937378437229143, 1, 1, 0.0853188778671058, 0.0548498034732648, 0.0861522527812758, 1, 0, 1, 0.975632513396271, 0.460507560270143, 0.476592404058479, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.370659976904588, 2.25395549756561, 1.59887590194069, 0.951253146376113, 0.765880011795755, 0.951253146376113, -0.168677831147182, 0.877728442576911, 1.9026912853408, -0.0248623564955137, 1.14776515734553, 2.0326000135864, -0.771784074963901];
        actual = matrixUtilities.multiply([0, 0.598875901940687, 1, 0, 0.951253146376113, 0, 0.791591848149706, 0.831322168852818, 1, 0.637344918510572, 0.975137643504486, 1, 0.771784074963901], [1, 1, 0, 0, -1, 0.0901589836413781, 1, 0.805127441326681, 1, -1, 1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.423239523741994, -0.712209582929099, -0.420804722736737, -0.134065731490993, -0.915087655612774, 0.0563109801684083, -0.533069129350162, 0, -0.335291060775188, -0.612739642436029, -0.612739642436029, 0.257366065659597, 0];
        actual = matrixUtilities.multiply([0.109829605608168, 0.50910225487738, 1, 0.134065731490993, -1, 0, 0, 0, -1, 0.612739642436029, 0, 0, -1], [0, 1, 0.802226981056029, -1, -1, 0.420025158869114, 0, 0.781021924121781, 0, 0.533069129350162, 0, 0.335291060775188, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.311602311393869, -0.209739883993631, -1.10030407835744, -0.277448581660841, 0.266357108777652, 1.08271037043009, 0.0442565417859312, 0.727028431243742, 0.755723088865971, -0.277448581660841, -0.632987875541249, 0.324050924715915, 0.209739883993631];
        actual = matrixUtilities.multiply([0, 0, 0.890564194363805, 0.975768685329598, 0, -1, -1, -1, 0.159512589759898, 0.228265384784092, 0.695297835718513, -1, 0.209739883993631], [0.307602624552139, -1, -1, 0, 0.272971568756258, 0.0847643213741315, 0, -1, -1, 0.277448581660841, 0, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.94869782447289, -0.836902127525258, 0.785040616889038, -2.99645023001193, -0.933925518735277, 1.88206400809906, 1, 1, -1, 0, 1.06607448126472, -0.117935991900943, -0.533943815405454];
        actual = matrixUtilities.multiply([0.902976608789981, 0.490230978694852, 1, 1, 0.996450230011926, 1, -1, 0, 0, -1, 0, 1, -1], [0.555490236988054, 0, 1, -1, -1, 1, -1, 0, 0, -1, 0.0660744812647228, 0.882064008099057, 0.533943815405454]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 1, -0.212782397034011, 0.952198872320447, -0.376158035535439, 0.376158035535439, 1, 1, -2, -1, -1, 1.87111442949209, 0];
        actual = matrixUtilities.multiply([-1, 0.787217602965989, -1, 0.376158035535439, 0, 0.952198872320447, -1, -1, 1, 1, 0.871114429492091, -1, 0], [-1, 0, 0, 0, -1, 1, 0, 0, 1, 1, 0, 0, 0.113085512124507]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.76073234191198, -1.17182032725393, -0.218549886820163, -1, 0.75389375293343, 1, -0.234504859538053, -0.0116013875285169, 1.5981962641526, 2, -1.75389375293343, -0.218549886820163, 1];
        actual = matrixUtilities.multiply([0.106119695634637, -1, 1, 0.133156361586021, 1, 0, 0, 1, 0.765495140461947, 0, -1, 1, 1], [0.760732341911985, 0.582073425679502, 0, 0, 0, 0, -1, 0.75389375293343, 1, 1, -1, 0.781450113179837, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.213550156081817, 0, 0, -1.96764306955395, -1, 0, 0.326855340193424, 1, 0, 0.769495950042064, 1.80972812921262, 0, 0.736763810150681];
        actual = matrixUtilities.multiply([1, 1, -1, 0.967643069553954, -1, 0, 0.673144659806576, 1, 0, 1, 1, 0.809728129212618, 0.736763810150681], [1, 0, 0, -1, 0, 0, 1, 1, 0, 0.950313966232498, 1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0239685317613039, 1.51770089311418, 0.785026474290074, 0.212888247432601, -0.719155886079723, 1.78502647429007, -1.0239685317613, 0, 1, 0.0239685317613038, 1.18394028308195, -0.721078341126418, -0.0958689186237142];
        actual = matrixUtilities.multiply([1, 1, 1, 0.236856779193905, -1, 1, -1, -1, 0, 0, 1, 0.355302232483077, -1], [1, -1, -1, 1, -1, 0, 0.0239685317613038, 1, -1, 0, 0.517700893114182, 0.785026474290074, 0.0958689186237142]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.182491463228358, 0.564218412881819, 1.2887210406574, -0.123237383143621, 0.427128649981287, 0.535382757675773, 1.07011903141694, 1.09437626092433, -0.934560189924464, -0.48638151748403, 0, 0, 0.0587618174305008];
        actual = matrixUtilities.multiply([0, 0, 0.308937876629149, 1, 0, 0.572871350018713, 0.0374574475164793, 0.056918813407849, -1, 1, -1, 0, 1], [0.491429339857506, 0.873156289510967, 1, 0.449633966875092, 1, 0, 0.936015484359123, 1, 0, -1, -1, 0.934560189924464, 0.0587618174305008]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.113058765427439, -0.523911402339075, 0.00746048288767243, -0.476754686085859, -1, 2, -0.476754686085859, -1, 0.500431525754012, 1.13954179772675, 0.880509307552366, 0.83924555165658, -0.803959542794134];
        actual = matrixUtilities.multiply([0.476088597660926, 0.641541558616581, 0, -1, 0, -1, -1, 0, 0.499568474245988, 0.880509307552366, 0.719754859208947, -1, -1], [0.755460263116034, 1, 0.157992478067983, 0.476754686085859, 1, -1, 1, 0, 1, 0, 0, -1, 0.803959542794134]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.142845387171416, 0.410707241208645, 0.564749247185831, 0, 0.119175030193314, 2.01439197059623, -1, -1, 1, -2, -2, 0.00224968697980499, -0.315626205092122];
        actual = matrixUtilities.multiply([0, 0.458471592263538, 0.849887781240925, 1, 1, 0.133081045529377, 0, 1, 0, -1, 1, 0, 0.315626205092122], [1, 0.342488144683879, 0, 1, 1, 0.997750313020195, -1, -1, 1, 0, 0.89550716797612, 0.125049044436332, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.347118642808459, -0.45272567377087, -1.36326457344148, -0.406100392065058, 1.45272567377087, 1.32598790308739, 0.708944004396468, -0.549298510912292, 0.398917049215712, 0.0586715164335136, -0.99474018951633, 0.0370806021325569, 0];
        actual = matrixUtilities.multiply([0, -1, -1, -1, 1, 1, 1, 0.995528893543188, 0, 0.99474018951633, 0, 0, 0], [0.133594297400487, 0.794508238693005, 0.32413920542418, 0.0589817492565986, -1, 0.0372766703540816, 0.652881357191541, 0.45272567377087, 0.363264573441476, -1, 0, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.432671727814093, -0.00738354446710254, 0, -0.567328272185907, 0.428005415513018, 2.43118911955095, -1.43267172781409, -2, 0, -1, -0.00738354446710254, 2, 0];
        actual = matrixUtilities.multiply([0, 1, -1, -1, 0.431189119550953, 1, -1, 0, -1, -1, 1, 0, 0], [0.507227049911035, 0, 0.170744156078782, 1, 1, -1, 0, 0.992616455532897, 1, 0.432671727814093, 1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.221355069531759, 2.07338424135354, 1.97713394368865, 0.31028508269707, 0.358192167411648, 1.0785299435891, -1, 1, 0.977133943688652, -0.995298983527021, 0.329964255982876, 1.30391729730364, 1];
        actual = matrixUtilities.multiply([0, 0.221355069531759, 1, 0.31028508269707, -1, 1, 0, 0, 1, 1, 0.995298983527021, 1, -1], [-1, -1, -1, 1, -1, 0.326783353614986, -1, 0.331522749891282, 0, -1, 1, 0.977133943688652, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0620780629394939, -0.802424745076534, 0, 0.64722108172589, -0.0212376671942126, 1, 0, -1, 0.162047172506362, -0.64722108172589, -0.978762332805787, -1, 0.207341679934106];
        actual = matrixUtilities.multiply([0, 0.176337587729254, -1, 0, -1, 1, 0.162047172506362, -1, 0, 0, 0, -1, 1], [0.709299144665384, 0, 1, 0, 0, 1, 0, 1, 0, 0.64722108172589, 0.978762332805787, 1, 0.207341679934106]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.342120213207691, 0.00543422655826978, 0.342722719298887, -1, -1, 1.17945649716046, 1.37383794755388, -1, 0.805618549606585, 0, 1, -2.17945649716046, 0.0100551606425018];
        actual = matrixUtilities.multiply([0, 0, 0.334205277885406, 1, -1, 0, 1, 0.37383794755388, 1, -1, 1, -1, 0.0111055672220446], [0.712699780572532, 0.489324538730702, 0.766952398124594, 0, -1, 0.179456497160465, 1, 0, -1, 1, 0, 1, 0.905416215260241]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.17619675312945, 0, 1.35988020587707, -0.176196753129455, 2, -0.0237565292156099, 0.823803246870545, -1, -1.33193816166927, -1, 1, 1, 0];
        actual = matrixUtilities.multiply([1, -1, -1, -1, -1, -1, 0, 1, -1, 0, -1, 0, 0], [-1, 1, -1, -1, -1, 0.69181836754634, 1, -1, -1, 0.176196753129455, 0, 0.33193816166927, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, -1, -1.77090442635627, 0.792840527739767, 0, 1.25355311727782, 0.705698025741474, 0, 1.16641061527953, 0.431908409777986, 0, 0.431908409777986, 1];
        actual = matrixUtilities.multiply([-1, 0, 0, 0.792840527739767, 1, 0, 0.705698025741474, 1, 1, 0.431908409777986, 0, 0, -1], [1, 1, 0.770904426356267, 1, 0, 1, 0, 0, 0.460712589538057, 0, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.01989428197526, 0, 1.00114370742866, 1.49196056671998, 0, 1.21409246056066, 0.508039433280024, 0, 0, 1.08534270715217, 0, 0.299435167712828, 0];
        actual = matrixUtilities.multiply([1, 0.040438773595001, 1, 1, 1, 0, 0, -1, 1, 1, 0, 0.0853427071521723, -1], [0, 0, 0.253387526726996, 1, 0, 0.214092460560655, 0.491960566719976, 0, 1, 1, 0, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.235831586880488, -0.388619380252724, 0.368293387521195, -0.606844637359886, 1, -1.87108874920341, 0.393155362640114, 2, -1.1462744428526, -1.60684463735989, 0, -0.853725557147397, 1];
        actual = matrixUtilities.multiply([0.388619380252724, 0, 0.0203259927315293, -1, 0, 0.871088749203407, -1, -1, 0, -1, 1, 0, 1], [0, 0, 0, 0.606844637359886, -1, 1, -1, -1, 0.146274442852603, 0, 0, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.01707556658288, -0.723072914743364, -2.28921828479004, 0, -0.272362732455303, 0.71078171520996, -1, -0.857249625251553, -0.366553584284407, -0.852794568451491, -0.609726870921301, -0.0854264259029551, -0.557937291710608];
        actual = matrixUtilities.multiply([-1, -1, 1, 1, -1, 0, 0.633446415715593, 0, 1, 0.72047082601137, 0.162151976564039, 0.852794568451491, -1], [0.0170755665828826, -1, 0, 0, 0.22535509114403, 1, 0, 0.497717823599334, 0.28921828479004, -1, -1, -1, 0.557937291710608]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.64598292142431, -2.79600940029882, 1, 1, 1, 0, -0.442282356062104, -0.655771869074447, -1, 1.5577176439379, 1.34422813092555, -1, -0.0745269046512092];
        actual = matrixUtilities.multiply([1, -1, 0, -1, 0, 0, 1, 0, 1, -1, 0, 1, -1], [0.356381105890675, 0.970466163926975, -1, -1, -1, 0, 0.289601815533639, 0.825543236371848, 0, 0.557717643937896, 0.344228130925553, -1, 0.0745269046512092]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.844597781935985, 0.363478870765995, 0.499526587547514, 0, 0.0973627457083966, 1.13380497197947, -0.844597781935985, -0.363478870765995, -1.30056381705243, 0, 0.363478870765995, 0.499526587547514, 0];
        actual = matrixUtilities.multiply([1, 1, 0, 0, 0.267863563852321, -1, -1, -1, 0.801037229504919, 0, 1, 0, 0], [-1, 1, 0, 0.844597781935985, 0, 0, 0, 0.363478870765995, 0.499526587547514, 0, 0, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 0.428307425430188, -2, -2.9271940048445, 0.805391527621724, 2.81240676293744, -3, 0.878197522777225, 2.87619932688596, 1, -1, -0.876199326885957, 0];
        actual = matrixUtilities.multiply([0, 0, 1, -1, 0.927194004844499, -1, -1, 1, -1, 0, -1, 0, 1], [0, 0.306504948207412, -1, 1, 0, -1, -1, 1, 0.876199326885957, 1, 0.121802477222775, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.953261481110594, 2.48319576223749, -0.0140793095408377, -0.8985975156066, 1.73595518839357, 0, 0, 0.162642327213028, 0.985920690459162, -2, 0.162642327213028, -0.985920690459162, 0];
        actual = matrixUtilities.multiply([1, 0.662772145896578, 0.928218420561505, 0, 1, 0.8985975156066, 1, -1, 1, -1, -1, 1, 1], [0.881479901672099, 1, -1, 1, 0, 0.985920690459162, 0, 0.837357672786972, 0, -1, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.79779604300754, -1.49664369155497, 1.79779604300754, -2.52583392175186, -1.22468157029929, 2.52583392175186, 1, 0, -1, 0.470334206461131, 0.486696640518045, -0.470334206461131, 0];
        actual = matrixUtilities.multiply([-1, 0, 0.79779604300754, -1, 1, 0.525833921751861, 0, -1, 0, 0.696427385181388, 0.226093178720257, 0, 0], [0, -1, -1, 1, 0.698847648547426, -1, -1, 0, 1, -1, -1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.834415789616488, 1.00651615591084, 1.16267681593511, -1.14419214946413, 0.466753819919145, 1.04039278035637, -0.402384498809643, -0.737295554287788, -0.887279378665, -0.289493305277775, 0.133384370568316, 0.0254793364887081, 0];
        actual = matrixUtilities.multiply([-1, 0.58071565142866, -1, 0, 0.14419214946413, 1, 1, 0.402384498809643, 0, 0.0556168919688169, 0.289493305277775, 0, 1], [0.415131441045148, 0, 1, 0, -1, -1, -1, 0.652869199706646, 0.280131619554074, -1, 0.372615206694517, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.93074270466807, -1.27656537819494, 2.15066168417719, -0.873220426437082, 0.723434621805062, 1.49132294975748, 1.1003079425476, 1.79119955785163, -0.611265499389521, -1.12677957356292, -1.27656537819494, 0.508677050242516, 0];
        actual = matrixUtilities.multiply([1, 0, -1, 0, 1, -1, -1, 0.791199557851627, 0, 0, -1, -1, 0.150661684177193], [0.459687515841651, 0, 1, -1, -1, 1, 0.126779573562918, 1, 0.491322949757484, 1, 0.276565378194938, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 0, 0, -0.508661382137174, 0, 1, -0.587880665244479, 0, -1, 1.49386435397615, 0, -1, 0];
        actual = matrixUtilities.multiply([1, 0, 0, 0.508661382137174, -1, 0, 0.979298722454952, 1, 0.391418057210472, -1, 1, 0.493864353976149, 0], [-1, -1, 1, -1, 0, 0, 0, 0, -1, 1, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.38292666573004, -1.74675906231293, -1.68976980340191, -1.16506423063812, 0.227971880802872, 2, -1, 0.99000009381678, 1, 0.394179886356731, 0.16290207044859, 0, 0];
        actual = matrixUtilities.multiply([0.122496458758831, -1, 0.507390284681409, -1, 1, 1, 0, 1, 0, 0, 0, 0.684543628098696, -1], [-1, 1, 0.567273344643076, 0.740892958240999, 1, -1, -1, 0.99000009381678, 1, 0.575828727602879, 0.237971786986092, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.874518204887639, 0.125481795112361, 1.09912909944501, -2.86972126265509, 0.130278737344909, -0.89607395832244, -1.19792744899072, -0.325334456435095, -0.178847303227004, -1, 1, 0.973647304332651, -0.293306849567828];
        actual = matrixUtilities.multiply([0.874518204887639, 1, 1, 0.869721262655091, -1, 1, 0.841678052135593, 0.160094198845371, 0.516343595700498, 0, 0, 1, 0.293306849567828], [0, 0, 0, -1, -1, -1, 1, 0, 1, -1, 1, 0.973647304332651, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.12175223004155, 0.234020178874269, -0.878247769958455, 1.05243313501237, -1.44094031661032, 1.8517278267883, -1, 0.390738505120733, 1.68981577208723, 0, 0, -0.689815772087227, 1];
        actual = matrixUtilities.multiply([0, 0.121752230041545, 0, -1, 0.637669022026318, 0.690102157038684, -1, 1, -1, 1, 0, 1, 1], [-1, 0.18644689451272, -1, -1, 1, -1, -1, 0.390738505120733, 1, 1, -1, 0.310184227912773, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.94120857908447, 0.0587914209155325, -1.94120857908447, 0.147088276756503, 1.8529117232435, 0.147088276756503, 2, 0, 2, -0.0707607549013387, -0.0707607549013387, -0.0707607549013387, -1];
        actual = matrixUtilities.multiply([-1, 0.941208579084467, 1, 0, -1, 0.852911723243497, 0, -1, -1, 0, 0.0707607549013387, 0, -1], [0, 1, -1, 0, -1, 1, -1, -1, -1, -1, 1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.32378892988143, 0.691925272667746, -2.26457600214732, -1.82711780389171, 0.811403601342535, 0.761247128137037, -0.352960283101052, 0.631325514349772, 0.941325215129799, 0, 0, 0, 0];
        actual = matrixUtilities.multiply([0.67621107011857, -1, -1, 0.82711780389171, 1, 1, 0, 0.352960283101052, 1, 0, 0, 0, 0], [0.543521902777032, 0, 0, -1, 1, -1, -1, -1, 1, 0, 0.984285797450825, 0.588364932028747, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0149605757732559, -0.991274036928673, -0.415371654742358, 0.0729504623790041, -0.0267333192875298, -0.659920146064796, 0, -0.00141878286442663, -0.00141878286442663, 0.840083389002869, 0.357922773974912, -1.32224400403083, 0];
        actual = matrixUtilities.multiply([0.991274036928673, 0, 0, 0.586969683685792, 0.243642951009629, 0.316593413388633, 0.00141878286442663, 0, 0, 0.482160615027957, 0, 0.840083389002869, 0.644164631443175], [0.0232247705679502, 0, 0.894029808647013, 0, -1, -1, -1, 1, 1, 1, 1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.275006481108724, 0.735425693052362, -1.20495766273768, 1, -0.385784818039176, 2, 2, -0.812919045711364, 1, 0, 0.0413494096330131, -1, 0.433008332472764];
        actual = matrixUtilities.multiply([0.653741355824164, 0, 0.708014813581488, -1, -1, 0, 1, -1, -1, 1, -1, 1, 0.433008332472764], [1, 1, 0.362114294135065, 0, 0, -1, -1, 0.385784818039176, -1, -1, 0.427134227672189, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.0633377329182892, 2.34179204718293, 0.950446984707586, 1, 0.182654692876458, 0.111173680681305, 1.36260363798031, 0.73373939829587, 0, 0.755836096012888, 0, 0, 0.341792047182933];
        actual = matrixUtilities.multiply([1, 1, -1, 0, 0.182654692876458, 1, 0.73373939829587, 0, 0.683829922547485, 0, 0, 0.755836096012888, 0.341792047182933], [0.0338626676396759, 1, 1, 0.925088276586071, 1, 0, 0, 1, 0.608654937524653, 1, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.5487841947697, 1.00658386806333, -0.259155434211323, 0.131893770364995, 2, -0.451706524683026, 1.45102996493272, -0.417076264702285, 1.64517161932083, -0.868106229635005, 1, -0.645171619320834, -1];
        actual = matrixUtilities.multiply([0.809744946570017, -1, 0.00658386806332686, 0.193465094637808, -1, 1, 1, 1, 0.582923735297715, 0, -1, 0, -1], [0.687261833198025, 0, 0.423728761460506, 0, 0, 1, 0.868106229635005, -1, 0.645171619320834, 1, 1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -0.711334516625541, -0.711334516625541, 1, -0.727713337041304, -0.533210544629586, 0.214936682123196, -0.0940222582286327, 0.100480534183085, 0, -1, -1, 0];
        actual = matrixUtilities.multiply([0, 0.711334516625541, 0, 1, 1, 0, 1, 0.366308921187329, 0.785063317876804, 0, 1, 0, 0], [0.628121521616411, 1, -1, 1, 0.272286662958696, 0.466789455370414, 0, -1, -1, -1, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.900867634406717, 1, -2.15694179626039, -0.77508558089616, -1.05829816779974, 3, 1.22491441910384, -2.179952831557, 0.238250999356737, -0.72318594657033, 1.46922321034842, -0.501728472533509, -0.916011413054546];
        actual = matrixUtilities.multiply([0, -1, -1, 1, 1, 1, -1, 0.238250999356737, 1, 0.498271527466491, 0, -1, -1], [0.675953215302878, 1, 0.156941796260393, -1, 0.941701832200262, 1, 0, -1, 1, 0.22491441910384, -1, 1, 0.916011413054546]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.49844275810683, 1.33548111437609, -1.01896320982788, -1.07533141135952, 0.909255283842448, -1, -1, 1, 0, 2.51740596793471, -1.31651790454822, 1, 0.0189632098278791];
        actual = matrixUtilities.multiply([1, 1, -1, 0.592737379294232, 1, 1, 1, 0, 0, -1, -1, 1, 0.0189632098278791], [1, 1, -1, -1, 1, 0, -1, 0.316517904548216, -1, 0.517405967934712, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.36610935719578, 0.0660881395759471, -0.63649255160079, 0.49679433288222, -0.871453754544004, -1.88800314389542, 0.367154309062639, 1.04039565262807, -0.95364567262756, -0.11437002528037, -0.128546245455996, 1.64039937715996, -0.374893040105185];
        actual = matrixUtilities.multiply([0, 0.570404412024843, 0.0660881395759471, -1, 0.888003143895419, 0, 0.0463543273724403, 0, 1, 1, 0.35960062284004, -1, -1], [-1, 0, 0, 0.0355577874162969, 0.871453754544004, 1, 0.59949350850633, 0, -1, 0.365506051744104, 1, -1, 0.374893040105185]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.926663042815236, -0.947001555909869, -1.56960362781286, 2, 1, 0, 0.519587972443359, -1.48041202755664, -1.48041202755664, -0.574343519552771, -1.57434351955277, -0.574343519552771, -0.622602071902995];
        actual = matrixUtilities.multiply([0.947001555909869, 0, 0, -1, 1, 0, 0.480412027556641, 0, -1, 0.574343519552771, -1, -1, 0.622602071902995], [0.0326669537614411, 0, -1, -1, -1, -1, 1, 0, -1, -1, 1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.12177079788437, 0.80471093617599, -0.917338404765976, -0.999945084910147, 0.0474181445536288, -0.0474181445536288, 0.443696137258642, -0.48139263851633, 1.43252317860374, -1.99984183139414, -0.382031752905823, -0.569098787181591, -1];
        actual = matrixUtilities.multiply([0.484815226162232, -1, 0.122332263794882, 0.0474181445536288, 0, 1, -1, 1, 0.555145759859656, 0.136575608577847, -1, 1, 1], [-1, 0.838503071497429, 0, 0.00115810288170264, 1, -1, 1, 0.51860736148367, 0.432523178603744, -1, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.18989809150547, 2.20923547782434, -0.0566063896085165, -1.37737336120446, -0.632446565494149, 2.06862242897537, 0.725714199117252, -2, 0.153136627819918, 0.311618266772301, -1, -0.174437697126734, 0.152831553552687];
        actual = matrixUtilities.multiply([-1, 1, 0.735099603764294, 0.751490183990211, 0.367553434505851, -1, 0.0159560581743513, -1, -1, 0.688381733227699, -1, 0, 1], [1, 0.474135874060046, 0.815673783801344, -1, 0, 1, -1, 1, 0.862819430354433, 0.258329742708397, 1, -1, 0.152831553552687]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.420743939197037, 0.579256060802963, -0.343116461626702, -0.269067772323763, -0.269067772323763, -0.269067772323763, -1.63420680334522, 0.196018824910754, -0.803981175089246, -0.767413551345195, 0, 0, 0.0507798399949851];
        actual = matrixUtilities.multiply([1, 0.420743939197037, 0, 0, 0.269067772323763, 0, 1, 0.803981175089246, 0.830225628255972, 0, 0, 0.767413551345195, 0.201902440843127], [0, 0, 0.384480134297386, 0, 1, 0, -1, -1, -1, -1, 0, 0, 0.251506815781587]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-3, -0.997791573869899, 2.60952027123865, -0.0618035998483206, 0.386228657041783, 0.452283328609673, -0.335353093377945, -0.949124436336162, 0.204404508436444, 0.706687231411546, -0.566255628925111, -1.0971669601729, 0.913721038454082];
        actual = matrixUtilities.multiply([-1, 0, 1, -1, 0.0618035998483205, -1, -1, -1, 0.335353093377945, 0.706687231411546, -1, 1, 1], [-1, 0.615979769088318, 1, 1, 0.613771342958217, -1, -1, 0, 1, -1, -1, 0.609520271238647, 0.913721038454082]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.825267586310053, -0.825267586310053, 0.795989529469155, 2.05222330967943, 1.83797409983257, -0.194801253823005, 0, 0, -1.89627055260179, 0, 0, 0, 0];
        actual = matrixUtilities.multiply([0.825267586310053, 0, 0, -1, 0.162025900167425, 1, -1, 0, -1, 0, 0, 0, 0], [0, 0, 1, -1, -1, 0.964522953128686, 0.322314578258579, -1, -1, 1, 1, 0.931747599473106, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.542274258941844, -2.16296218902011, -0.166808714559741, 0, 0.505205289695973, 0.484187505257609, 0, -1, 0.283495353201169, 0.0108904265849341, -0.319053205810046, 1.23418815998769, 0.214467614776235];
        actual = matrixUtilities.multiply([-1, 0.627233138600007, 0.535729050420098, 1, 0.494794710304027, 0, 0, 1, 0, 0.680946794189954, 0, 1, 0.536439941048827], [1, 0, -1, 0, 1, 0.343915504097899, 0, -1, 0.283495353201169, 0.0108904265849341, -1, 1, 0.399797998554911]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 1.90338825010852, -2, 0.523006804530978, 0.755301456019282, -0.635227893774969, 0.523006804530978, 0, 1, 0.393600610752047, 0.824107406655333, 1, -0.907888235947065];
        actual = matrixUtilities.multiply([1, 1, 0, 0.635227893774969, 0.836076245101204, 1, -1, 0, 1, -1, 0.912240563850962, 0.75257263833311, -1], [1, -1, 1, 0, 0, -1, 0, 0.903388250108523, 0, 0.523006804530978, 0, 0, 0.907888235947065]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.87310575967334, 0.0783992777943608, -2.48823033947881, 0.200137460697506, 1.51861940212282, 0.341938805031141, -1, -0.258488171895365, -0.771631064718417, -1, -0.039033208991882, -1, 0.882683006060628];
        actual = matrixUtilities.multiply([1, 0, -1, 0, 0.900501156645129, 0.700363695947623, 0.771631064718417, -1, 0, 1, -1, 0, 1], [0.873105759673335, 0, -1, 0, 0.960966791008118, -1, 1, 1, 0, -1, 0.882567513213757, 0.488230339478809, 0.882683006060628]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.7507397331068, 0, -1.18723358548583, 0.807242711450552, -2, 2, 0.0467768283778693, 1.23953411692732, -1.23953411692732, 0.813248786522657, 1.99399392492789, -1.99399392492789, -1];
        actual = matrixUtilities.multiply([0, 1, 1, -1, -1, 1, 1, 0.239534116927317, 1, 0.993993924927895, 1, 1, -1], [0.0565029783437508, 1, 0.187233585485832, -1, 1, -1, 1, 1, -1, 0.807242711450552, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.578017107480214, 2, 1.25072191620745, 1, -1, 1, -1.25459797785366, -0.167384914666128, -1.08333700154132, 0, 0, -1, 0];
        actual = matrixUtilities.multiply([1, 1, -1, 0, 0, -1, -1, 0, 0.832615085333872, 0, -1, 1, 1], [-1, 1, 0, 0.421982892519786, 1, 0.250721916207449, -1, 1, 0, -1, 1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.028971888693, -1.48627255227709, -2.09565102639406, 0, 0, 0, -0.0414496585919753, 0.373612140165203, 0.891793174153098, -0.331733229209807, -0.378451469530562, -0.987829943647529, 0];
        actual = matrixUtilities.multiply([-1, 0.0956510263940557, -1, 0, 0, 0, 0.0414496585919753, 0, 0.850343515561122, 0.470582485418107, 0.458412429065636, -1, 0], [0.330193476439544, -1, -1, -1, 1, 1, 0.302891560971221, -1, -1, 0, 0.390621525883033, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, 0.651975356345985, 2, 1, -2, -0.379060016655857, 3, 0, -1.62093998334414, -2.57163937695866, 0, 1.62093998334414, 1];
        actual = matrixUtilities.multiply([1, 0, -1, -1, 1, 1, -1, -1, 1, 0.571639376958664, 1, -1, -1], [0, 0.348024643654015, -1, -1, 0, 0, -1, -1, 0.620939983344143, 1, -1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -2.50306916167171, 0.882783824989006, 0, 0, 0, 0.584629977394189, 1.58462997739419, -1.58462997739419, -1, -2.38395247393472, 1.61604752606528, -1];
        actual = matrixUtilities.multiply([-1, 0.481695400775268, 0.0213737608964433, 0, 0, 0, 0.584629977394189, 0, -1, -1, 0.383952473934718, 1, 1], [0, -1, 0.343105464867831, 1, 1, -1, 0, -1, -1, 0, -1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0.143974807646114, 0.642683679071573, 0.197393530022935, 0.113540861249653, -0.213015853992205, 0.926661214757087, 1.53301601322974, -0.419460588795813, -0.473998138436115, 0.526001861563885, 0.509483962544145, -1];
        actual = matrixUtilities.multiply([0, 0, 0, 0.213015853992205, 0, 0, 1, 1, 1, 0, 1, 0.526001861563885, 1], [0, 0.143974807646114, 0.642683679071573, 0.926661214757087, 0.533016013229739, -1, -1, 0, 0.430632812637199, 1, 1, 0.149906598566988, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.3084427464327, 0.870582626298064, -1.07364780272993, -1.31622271161351, -0.706776265060772, 1.64708602970796, 1, -1, 0.669136681905546, 0.297875218697765, -1.92726968737658, 0.232307334858, -1];
        actual = matrixUtilities.multiply([-1, 1, 0.308442746432704, 1, 1, 0.316222711613505, 1, -1, 0, 1, 0.702124781302235, -1, -1], [0, 0.415426982760163, 0.712953867257086, 0, -1, 1, -1, 0, 0.330863318094454, -1, 0.927269687376576, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.73553652117752, 0.717824482693255, 0.63969853219403, 0.489243834972961, 0, -0.189347815322386, 2, 0, -0.189347815322386, -0.737408669433977, -0.485877315740044, 0.189347815322386, 0.431492719823465];
        actual = matrixUtilities.multiply([0, 0.757033925390352, 0.978502595787171, -1, -1, 0, 0, -1, -1, 0.514122684259956, 1, 0, 0.496355812296437], [0, 1, 1, 0.510756165027039, 1, 0, -1, -1, 0.189347815322386, -1, 1, 0, 0.869321380215381]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0.463327779650375, 0.701967433598643, 0, 0.283484270928187, 0, -1, 0, -1, 1, -1, 1.06076972946001, 1];
        actual = matrixUtilities.multiply([0, 0.0296077518861777, 0.507989821726452, 0, 0.283484270928187, 0, -1, -1, 0, 1, 0, 0.751566062565691, 1], [0, 0.433720027764197, 0.660892662434323, 1, -1, 1, 0, 1, 0, 0, 0, 0.0808574688066065, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.446067671964908, 0.615963816929592, -0.774702892533831, 0.0814239014181698, 0.321458554147116, 0.380568505442035, -0.647177696063732, -0.481213100202768, 0, -0.266900175991122, 0.129616438075869, -0.827446387534703, -1];
        actual = matrixUtilities.multiply([1, 1, -1, 0.619431494557965, 0, -1, -1, 0.201110024098824, 1, 0, 0.69062532097596, 0.827446387534703, -1], [-1, 0.0906734001313678, 0.774702892533831, 0.958155405222511, 0.518957393951229, -1, -1, 0.187679823109731, 0, 0.512087733257603, 0, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.25222911511186, 0.801127051841992, 0.340711293435055, -1.06520061197933, 2.65129345851701, -1.72301142977645, -0.96479797232403, 1.66156335531807, -0.519725010041019, -0.74777088488814, -1.19887294815801, 2.34071129343506, 0];
        actual = matrixUtilities.multiply([1, -1, 1, 0.812971496867468, -1, -1, 1, 0.139563696523925, -1, 1, 1, 1, 0], [-1, 0, -1, -1, 0.801127051841992, 0.340711293435055, 0.25222911511186, -1, 1, 0, -1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.85042962890604, -0.14957037109396, -1.85042962890604, 0, -1, 0, 0.331320281294789, 0.125845666567723, -1, 1.66867971870521, 1, -1, -1];
        actual = matrixUtilities.multiply([0, -1, 0.85042962890604, 0, -1, 0, -1, 0.125845666567723, 1, 1, -1, 1, 1], [1, 0, -1, 0.668679718705211, 1, 0, 0, 1, 0, 1, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.597490379399383, 2.82690314754234, 0.226914246206598, 1.59749037939938, 0.173096852457662, 2, 1.59749037939938, 0.173096852457662, 2, -1.59749037939938, -1.82690314754234, 0, -1];
        actual = matrixUtilities.multiply([1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1], [-1, 1, 0.226914246206598, 0, 0.826903147542338, -1, -1, -1, -1, 0.597490379399383, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.40795706077842, -2.8676309342811, -1.15543009059067, 0.723243851085773, -0.16935522349987, 0.973420697717658, -0.133351802574135, 1.00619242945974, 1.8709332889838, 0.0572044714620358, -1, -1.97342069771766, -1];
        actual = matrixUtilities.multiply([1, 0.867630934281103, -1, 0, 1, 0.83064477650013, -1, 0.894714167292562, 0.900906596752306, 1, -1, -1, -1], [0, 0, 1, 0.780448322547808, -1, -1, 0.723243851085773, -1, 0.973420697717658, 0, 1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.812025286635396, 1.39951406856976, 1.39769991319519, -0.864095539340698, 1.22686934249573, -0.458150944991594, 1.33184552961855, 0.374042327689958, 1.74343137888226, -0.016723674201506, -0.317702358270857, -0.0706582809689297, 0];
        actual = matrixUtilities.multiply([-1, 1, -1, 0.538297845767018, 0.567863212697144, -1, -1, 1, 0.0254717408798038, 0.177769669414391, 0, 0.317702358270857, 0], [1, 0, -1, -1, 0, -1, 0.318933690115313, 0.399514068569762, 0.734843738719283, 0.506908403479917, -1, 0.337143825524088, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.457455410369418, 0.840625843890303, -0.245481251387615, 1.43840424143861, -1, 1.83954363729764, -0.542544589630582, 0, -0.876128645556107, -0.542544589630582, 0, -0.876128645556107, -1];
        actual = matrixUtilities.multiply([-1, 1, 0, 0.958242424278633, 0.27456443723038, 1, -1, -1, 0, -1, 1, 0, 1], [1, 0.840625843890303, 0.630647394168492, 0.542544589630582, 0, 0.876128645556107, 0, 0, 0, 0.918514998591745, -1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.795521958170236, 1.64876003714175, 1, 2, -1.03526745132882, -1, 0.00993282394946216, -0.96508285405638, 0.990067176050538, 1, -0.205400764106494, 0, -1];
        actual = matrixUtilities.multiply([0.772077996177635, 0, 1, 0, 1, -1, 0, 1, 0.990067176050538, 1, 1, 0, 1], [0.204478041829764, 1, 0, 0, 0.794599235893506, 0, 1, -1, 0, -1, 0.0352674513288156, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.224207386939902, 0, -0.897647169646616, 1.21708843896483, 0, 1.21826221434127, -0.73010523626321, 0, 1.27135405760529, 0.503688135207244, 0, -0.994876578522553, 0];
        actual = matrixUtilities.multiply([1, 0, 0.22950932533923, -1, 1, 0.235011817065539, -1, -1, 0.292177967397579, 1, 0.498592266579434, 0.00551659660670748, 0.110799062117375], [0.110125367580971, 0, -1, 0, 0, -1, 1, 0, 0, 0.92373414101253, 0, 0.928728678696197, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.114102938415215, -0.581098099581838, -0.516659839319372, 0, 0, 0, -0.22084731525781, -0.810788585716294, 1, 0.22084731525781, 0.810788585716294, -1, -1];
        actual = matrixUtilities.multiply([-1, -1, 0.516659839319372, 1, 0, 0, 0.498738538706088, 0, -1, 0.506812130802689, 0, 1, -1], [1, 1, 0, 0, 0, 0, -1, 0, 0, 0.22084731525781, 0.810788585716294, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.93725156521953, 1, -0.428519451258946, 0, -1, -0.823859187226677, 0.673260203410527, 0, 0.673260203410527, -1.08393076764603, 0, -2, 0];
        actual = matrixUtilities.multiply([-1, -1, 0.747621361514377, -1, 1, 0, 0.673260203410527, 0, 0, -1, 0, -1, 0], [0.0699160411348175, -1, 1, 1, 0, 1, 1, -1, 0.176140812773323, 0.0839307676460272, 0, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -2, 1.65750070226262, 1, -2.52678813530448, 1.52678813530448, 1, -1, 0, 0, 1.49709053686684, -1.49709053686684, 1];
        actual = matrixUtilities.multiply([0, 0, 1, -1, 1, 0.526788135304483, 0, 1, 0, 0.497090536866845, 0, -1, 1], [-1, -1, 0.657500702262624, 0, 1, -1, 1, -1, 0, 0, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.878440868984182, -0.0372020858513201, 0.878440868984182, 0.608552334647883, 0.0513356767788522, 0.608552334647883, 0, -0.915642954835502, 0, 0.891356210639401, 0.0751921761185638, 0.891356210639401, 0];
        actual = matrixUtilities.multiply([0.534257708366149, 0.412698577350331, 1, 0, 0, 0.608552334647883, 1, 0, 1, 0, 0, 0.891356210639401, 0], [0.376838730357978, 0.521207026448663, -1, -1, -1, -1, 1, 1, 1, 1, 0.0843570451644981, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.36131237091558, -0.571884090812823, -1.46653315260379, 0.30115265366675, 0, 1, -0.361312370915577, 1, 0, 0.167201354449906, -0.252392727533538, -0.252392727533538, 1];
        actual = matrixUtilities.multiply([0.533466847396207, -1, 1, 1, 1, 0, -1, 1, -1, 0, 0, 0.252392727533538, 1], [1, 0.428115909187177, -1, 0, 0, 1, 0.30115265366675, 0, 0, 0.662465024582327, -1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2, 0.350847242097765, -3, -2, 1.35084724209776, -3, -1, -0.350847242097765, 0, -1.75108636764394, 0.751086367643944, -1.75108636764394, -0.685745690337264];
        actual = matrixUtilities.multiply([1, 1, 0, 1, 1, 1, 0, -1, 1, 0.751086367643944, 0, 1, -1], [1, 1, 1, -1, 1, -1, 0, 0.350847242097765, -1, -1, 0, -1, 0.685745690337264]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.32377363691638, 0.276949228076655, -0.289049876354629, 2.2856763258044, -1.12174728751264, 0.704967796665136, 0.905599424165813, -0.379768079789247, 0.78947070976229, 1.61279803449884, -1.12174728751264, 0.295265166692094, 1];
        actual = matrixUtilities.multiply([0.237470351270153, -1, 0.870764246615937, 1, 1, -1, 1, 0.379768079789247, 0, 0, 1, -1, -1], [0, 0.829063957011823, 0, 0.672878291305564, 0, 0.409702629973042, 0.61279803449884, -1, 1, -1, 0.121747287512639, 0.704734833307906, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.631378875408032, 0.631378875408032, -1.84945277565794, 0.0100726312175121, 0.786274772503541, -0.622969809744027, 0, -1, 1, -0.727829579130148, 1, -0.151800456527528, -0.368621124591968];
        actual = matrixUtilities.multiply([1, 0, -1, 0.786274772503541, 0.163304962759514, 0, -1, 0, 0, 1, 0.113376890827612, 0.734822652644861, 0.368621124591968], [-1, -1, 0.408406394258331, 0, 1, -1, 0.0616798843544349, 0, 1, -1, 0, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.07019891639715, 0.220600762872367, -0.302080983864006, -0.50957332854605, -0.23434259101485, 0.135649964677784, 1.37915500550492, -1.70073385770317, 1.86733362770981, 0, 1, -0.867333627709809, 1];
        actual = matrixUtilities.multiply([0.0701989163971501, 0.804671920745015, 0, 0, 0.7439159195609, 0.50957332854605, 0.379155005504915, 1, -1, 0, -1, 0, 1], [1, 0.969864846193169, -1, 1, 0.789297616942459, 0, 0, -1, 0.867333627709809, -1, 1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.931765630809481, -2.14515569859424, 0.484005753939241, 0.0193210314117936, 0.642239700836241, 1.9623988023784, 1.01932103141179, 1.64223970083624, 1, -0.00783127267278319, -0.630749942097231, -0.0486589276716397, -1];
        actual = matrixUtilities.multiply([1, 0.502915997758003, -1, -1, 1, 1, -1, 0, 1, -1, 0.98851024126099, -1, 1], [0.590471398360315, 0, 1, -1, -1, 0, -1, -1, 0.962398802378401, 0.0193210314117936, 0.642239700836241, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.65856072709829, 0, -1, -0.341439272901714, 0, -1, 0.341439272901714, 0, 1, -0.0803165029299031, -0.028434170888939, -0.180386029267863, 0];
        actual = matrixUtilities.multiply([1, 1, 0, 1, 1, 1, 1, -1, -1, 0, 0.151951858378924, 0.180386029267863, 1], [1, -1, -1, 0, 0, 0, 0.658560727098287, 1, 0, -1, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.782012773110537, 0.645584826119226, -0.782012773110537, 0.3800326326769, 0.243211777528381, -0.51766295719132, 1, -1, 0.277822070884435, 0, 0, 0, 0.782012773110537];
        actual = matrixUtilities.multiply([0, -1, 1, 0.3800326326769, 0.376755589794719, -1, 1, 0, 0, 0, 0, 0, 0.782012773110537], [1, 0.825542559300336, -1, 1, -1, 0.277822070884435, 0, -1, 1, 0, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.641970376317376, 0.449361962990294, -0.587156212230751, -0.920221023224397, 1.28547812458167, -1.53451719066804, -1, -0.288328134123389, 0, 0, 0.601538411156059, 1, 0.641970376317376];
        actual = matrixUtilities.multiply([0, 0, 0.587156212230751, 0.534517190668041, 0.385703832556356, 1, 1, 0, -1, -1, 1, 0, 0.641970376317376], [1, 0.0718243588096576, 0, -1, 0.398461588843941, -1, -1, 1, 0, 0, 0.686789722967329, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.18650031470996, -1.69677741904593, 0, -0.0211584400484145, 0.531435544384381, 1.16534187466155, -0.186500314709963, 1.30322258095407, -1, 0.0410383815824755, -0.194111162802959, -0.0855259765337808, 0];
        actual = matrixUtilities.multiply([1, 1, 1, 0.165341874661549, -1, -1, 0, -1, 1, 0, 0.220044570146149, 0.0855259765337808, 0], [-1, 1, 1, 1, -1, 1, 0.186500314709963, -1, 0, 0, 0.30322258095407, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -0.409454122842035, 2.45271112146467, -1, 1, -1.76966095658469, 1, -1, 1, 1, -1, 0.61980652465476, 0];
        actual = matrixUtilities.multiply([-1, -1, 1, 1, 0.769660956584691, 1, -1, 0, 0, -1, 0.38019347534524, 0, 0.590545877157965], [0, 1, 0.766597717426064, -1, 1, -1, 0, 0, -1, 0, 0, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 2, 0, -1.81205407893846, 2, -2.10617363225025, 1, -1, 2, -0.812054078938465, 1, -0.222289627987095, 0];
        actual = matrixUtilities.multiply([0, 0, 1, 0.883884004263153, -1, 1, -1, 0, -1, 0, -1, 0, -1], [-1, -1, -1, 0, 0, -1, 0.812054078938465, -1, 0.222289627987095, -1, 1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.203843211384417, -0.0492514455920325, 0.21435643252181, 0, 0, -0.454402584794165, -1.97610741899168, -1, 0.443545734226578, -1.03427582189174, 1, 0.0155750220635519, 0];
        actual = matrixUtilities.multiply([0.471732423394794, 0.675575634779211, 0.0492514455920325, -1, -1, 0, 0.976107418991675, -1, 1, 0.0342758218917417, -1, -1, 0], [1, 0.0668484513027819, -1, -1, 0, 0.454402584794165, 1, 0, 0, 0, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0839462285320955, 0.931908994881394, -0.355825736353093, 1.87717198667916, 1.22069130790015, 0.300328111180202, 1, 0.0680910051186061, 0.247597674488834, -1, 0, 0, 0];
        actual = matrixUtilities.multiply([0, 0.506510583919711, 1, 0.877171986679161, 1, 0.368618956473013, 1, 0, -1, 0, -1, 0, 0.422564355387615], [-1, 0, -1, 1, 1, 0.314336293523356, 1, 0, 0, 0, 0.931908994881394, 0.0667386190345225, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.038792528695796, 0, 0, -0.850887302754827, 1.60333354659534, 1, 1.31088811697619, -2.27164494072629, -0.68063248911902, 1.04073507060267, -1.89391711908109, -0.893917119081094, 0];
        actual = matrixUtilities.multiply([0, -1, 1, -1, -1, 0.396666453404662, 0.68063248911902, 0.591012451607274, 1, 0.893917119081094, 1, 0, 0], [-1, -1, -1, 0.517430508750226, -1, -1, 0.578195080895999, -1, 0, 0.616987609591795, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.24175155145177, 0.183082981120368, -0.988433343190626, 0.267809397200034, -0.488792836483642, -0.989278452128675, 1.57573010007652, 1.09536486263171, 0.93479066385645, 0.625329051457964, 2.16182625336253, 1.00627939802916, 0];
        actual = matrixUtilities.multiply([-1, 1, -1, 0.164417374955685, 0.432226772155718, -1, -1, 0.57573010007652, 1, 0.374670948542036, 1, 0.98184735420246, 0.663448218565177], [0.364386465570138, 1, 0.115722660494839, -1, 0.480365237444809, 0.0652093361435502, 1, 1, 0, 0, 1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.921661205553292, 0.00929419652664639, -0.984695511862959, 0.792008714187894, -1.46560819712766, 0, 0.152372707218105, -1.54500904425281, 0, 1, -1, 1, -0.497017183572528];
        actual = matrixUtilities.multiply([0, 0.0748720318427645, 0, -1, 0.639636006969789, 1, -1, 0, 1, 0, 0, 1, -1], [0.996533237396056, 0, 0.984695511862959, 0.847627292781895, 0.545009044252806, 1, 1, 0.124134423734683, 0, 1, -1, 1, 0.497017183572528]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.00020993407825, -0.0220913621699863, -0.308783963635079, 1.19568678652667, 1.00428190634789, -0.634845471676256, -0.823566198266841, -0.823566198266841, 1.43430993898104, -0.167002208608669, -0.167002208608669, 0.286762973580855, 1];
        actual = matrixUtilities.multiply([0.000209934078254706, -1, 1, -1, 0.195686786526668, 0, 0.823566198266841, 0, 0.861685203789587, 0.167002208608669, 0, 0.170646508769433, 1], [0, 0, -1, -1, -1, 0.695298977054329, 1, 0.0218814280917316, 0.308929930584938, 0, 0, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.506474689816346, 1.03435968310721, 0.493525310183654, -1.47462131710473, -0.63166667829811, -0.278366650118663, 0.849264925275587, 0.297127509162355, 1.27836665011866, 0.864196333505305, 0.57337911081192, -1, 0.0365446726884122];
        actual = matrixUtilities.multiply([-1, 0, 0, 0.63166667829811, -1, 0, -1, 1, -1, 0.129493380025725, 0, 1, 0.493525310183654], [-1, 0.0696209138583489, 1, -1, -1, 0, 0.842954638806616, 0, 0.278366650118663, 0.993689713531029, 0.702872490837645, -1, 0.0740482239397467]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.452103904658977, -0.767559257227722, 0, 1.28586536472936, -0.143471269533183, -1.00573534192784, -0.0179095016875814, 1.33336485425633, -0.848496457462781, 0.547896095341023, 1.42802094036155, -1.7322339274605, -1];
        actual = matrixUtilities.multiply([-1, 0, 0, 1, 0.262030730611659, -1, 1, 0, 0.565805597028605, 1, -1, 1, -1], [-1, 0, 1, 0.547896095341023, 0.767559257227722, -1, -1, 0.339538316866168, 1, -1, 1, 0.267766072539504, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.11458142898724, -2.96215838285264, -1, -2, 1.77693807602717, 2, 2, -1.77693807602717, -1, 0.819280053404756, -0.98116967315493, -0.2742391132164, 0];
        actual = matrixUtilities.multiply([-1, 1, 1, 1, 0, -1, -1, 1, 0, 0.7257608867836, 0.545040940188356, 1, -1], [0.885418571012755, 0.185220306825461, -1, -1, 0.776938076027174, 1, 1, -1, 0, 1, -1, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.554936667231348, 0, -1, 1, -1.36684882145694, -1, 1, -1, -1, -1.44506333276865, 1.95820162955588, 0, -1];
        actual = matrixUtilities.multiply([-1, 0, 1, 0, 1, 0.366848821456939, 0, 1, 0, -1, -1, 0.0417983704441219, -1], [-1, 0, 0, 0.445063332768652, -1, 1, 1, -1, -1, 0, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.50696599693362, 1.30774153131421, -0.703590341721857, 0.540540579958139, 0.540540579958139, 0.201985034057305, 3, 0, 1.35274701628496, -0.394664180648822, 0.605335819351178, -0.752877511260622, -1];
        actual = matrixUtilities.multiply([0.185292471752173, 0.307741531314208, -1, 0, 0.540540579958139, 0, 1, 1, 1, -1, 0.605335819351178, 0, -1], [1, 0, 1, 1, 0, 0.979074730528088, 1, 1, 0.373672285756875, 1, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 0, -0.263511307660263, 0.11996354075147, 1, -1, 0.11996354075147, 2, -2, -1, 1, -0.736488692339737, 0];
        actual = matrixUtilities.multiply([1, -1, 0, 0, 0, 1, 0, -1, 1, -1, 0, 0, 0], [-1, -1, 0.146839740754496, 1, -1, 0.736488692339737, 0, -1, 1, 0.11996354075147, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.736323197249474, -2.93832540881742, -2.13334102329488, 0, -1, -0.812136907042999, -0.793999961015768, 0.550646070647354, -0.346799964324845, 0, 0, 0, -1];
        actual = matrixUtilities.multiply([-1, 0, -1, 0, 0, -1, 0, 0.793999961015768, 0.550646070647354, 0, 0, 0, -1], [-1, 1, 0.564608693851442, 0.263676802750526, 0.93832540881742, 0.756595422400439, -1, 0, -1, 0, 1, 0.812136907042999, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.998485930035941, -1.04833691730487, -1.11815172583266, 1, -1, 0.352213590569894, 0.769105354216465, -1.68625885140442, 0.327525893414972, -0.839198325685783, 1.75635182287374, -0.352213590569894, -0.800002565979959];
        actual = matrixUtilities.multiply([0.400554456003268, -1, 0.436652310861578, 1, 0, 0, 0.929907028530681, 0, -1, -1, 0, 1, 0.800002565979959], [-1, 0, -1, 1, -1, 0.352213590569894, 0.669252242738964, 0.97804523258379, 0.459229883020385, 0.160801674314217, 0.756351822873741, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.84835813280584, -0.407478553432728, -2.96995127479078, 1.84835813280584, 0, 0.969951274790778, -1.84835813280584, 0, 1, 0.151641867194158, 0, 0.969951274790778, 1];
        actual = matrixUtilities.multiply([1, -1, -1, 1, 0, 1, -1, 1, 0, -1, 0, 1, -1], [-1, 0.407478553432728, 1, 0.848358132805842, 0, 0, -1, 0, 1, 1, 0, 0.969951274790778, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.331203314629944, 1, -0.103901369545563, -0.73020187287855, 0, 0.103901369545563, 2.11427082682406, 0, -0.103901369545563, 0.668796685370056, 0, 0, 1];
        actual = matrixUtilities.multiply([-1, -1, -1, 0.814599719277862, 1, 0, 0.419578502150056, -1, 0.975305036164497, -1, 0, 1, 1], [0, 1, 0, 0.331203314629944, 0, 0, -1, 0, 0.103901369545563, 1, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.272166939811415, 0.556964942657433, 0.960105666872163, -0.210560123068541, 0.255307995833134, -1, 0, -1, -1, 2, 0.534131881098324, 0, -0.960105666872163];
        actual = matrixUtilities.multiply([0, 0, 0, 0.210560123068541, 1, 1, 1, 0, 1, -1, -1, 0, 0.960105666872163], [0.283476026860753, 0.580107962982779, 1, -1, -1, 0, -1, 0.465868118901676, 0, 1, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.55032550419662, -1.57135210904022, -0.957983107456839, -0.120891033262429, -1.90313121920054, -0.880590816904135, -1, 0.801290039346223, 0, 0, -1, 0.119409183095866, 0.913088612683624];
        actual = matrixUtilities.multiply([-1, -1, 0.351873209863842, -1, 0.120891033262429, 1, 0, 1, 0, 0, 0, 1, 0.913088612683624], [0.602707663365969, 0.637190226762179, 0, 0, 1, 1, -1, 0.801290039346223, 0, 0, -1, 0.119409183095866, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.07184410657354, 1.44836740309762, 0.423403256769946, -1, 0.284457517920275, 2, 0.689204618655706, 0.284457517920275, 0.310795381344294, -0.320261188000562, 1.22916048537572, 0, 0.0898941447032105];
        actual = matrixUtilities.multiply([0.660980814444358, 1, 0.9086044961161, -1, -1, 1, 0.689204618655706, -1, 1, 1, 0.320261188000562, 1, 0.175779575098203], [1, -1, 1, 1, 0, -1, -1, 0.715542482079725, 0, -1, 1, 1, 0.511402673791816]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.318929652523436, 0.302099947182326, 1.4093912811058, 1.64031918516397, -2.95616677215144, -0.195036761553509, -1.64031918516397, 1.95616677215144, 1, -1.64031918516397, 1.95616677215144, 1, 1];
        actual = matrixUtilities.multiply([0.481028851345661, 0.199419834278254, 0.626941654657452, 1, 1, -1, -1, 0, 1, -1, 0, 1, 1], [0, 0.383087854545139, 0.621923990837263, 0.640319185163974, -1, 0, 0, -1, 0.804963238446491, -1, 0.956166772151444, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.66036850672935, 0.341169282952868, 1.89419443714162, 1.00018477475099, -1, 2.06977172944218, 0.759803143225346, -0.75728774199136, 2.70711391358968, -0.997351724653203, 1, 0.887432258523736, -0.507908670933875];
        actual = matrixUtilities.multiply([0.658830717047132, 0.580675904443802, 0.654687815650687, 1, 0.0697717294421847, 1, 0.75728774199136, 0.949826171598316, 1, -1, 1, 0.887432258523736, -1], [-1, -1, 0, 1, -1, 1, 0.00264827534679709, 0, 1, 0, 0, 1, 0.507908670933875]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.1128345462138, -0.0117041004818852, -1.16679026240799, -2, -1.29496268103596, 1, -0.724415690656315, -0.684521568326522, 0, 2.87354405777228, 2.29496268103596, -1, 0];
        actual = matrixUtilities.multiply([-1, 0.136110563825867, 0.166790262407991, -1, 0, -1, -1, 0.315478431673478, 0, 1, 1, 1, 1], [0.827145709575687, 0.802988432721695, -1, 1, 1, 0, 0.873544057772283, 1, 0, 1, 0.294962681035959, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 1.8016155919999, -1, 1, 0.147966074360519, 0, 0, 1.14796607436052, 0, 1, 0.147966074360519, 0, 0];
        actual = matrixUtilities.multiply([1, 1, 1, 1, 0.706177534864367, 0, 1, -1, 1, 1, 0, 0, 1], [0, 0.653649517639377, -1, 1, 0.147966074360519, 0, 0, 0, 0, -1, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.755928625704687, -0.191657179454564, 0.0465155439667942, 1, -0.677782924230109, 1.29058691826211, -1, -1.1052377182549, -0.221279257172785, 1, -0.677782924230109, 1, 1];
        actual = matrixUtilities.multiply([-1, 1, 0.244071374295313, -1, 1, -1, 0.919629774484611, 0.863390868000403, 1, 0, 0, -1, -1], [-1, 0.357084589245303, 0, 0, -1, 0.296031710829601, 0, -1, 0.586618629091707, -1, 0.677782924230109, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.51929171017573, 1.08881988892742, -1.97303531395223, -0.585717438398571, 1, 0.778323689838091, -0.532275410616899, 1, 0, -1.97417351661315, 1, -0.951479097340013, 0.04853863927386];
        actual = matrixUtilities.multiply([-1, 1, -1, 0, 1, 0.778323689838091, 1, 1, -1, -1, 1, 0.0485209026599866, 0.0888198889274243], [0.146180102204057, 1, 0.303588378384518, 1, 0, 1, -1, 1, 0, 0.532275410616899, 0, 1, 0.54648389972117]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.458820290465726, -0.751728431628827, 1.54787144742341, -1, 0.403206261062625, 1, 0.941988357315766, 0.40324533796089, 1.59675466203911, 0.185598244045674, 0.626642084479844, 2.43472925826662, 0];
        actual = matrixUtilities.multiply([0.0458556595471947, 1, 0.502015787876218, 0, 0, 1, 1, 0.59675466203911, 0, 1, 0.678339144996525, 0.756390113270092, 0], [0, -1, -1, 0.941988357315766, 1, 1, 0, -1, 1, -1, 0.403206261062625, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.313593130239096, -0.121853499730049, -0.807585151168855, -0.313593130239096, -1, 0.313396493118907, -0.686406869760904, 2, -1.31339649311891, -1, 1, -1, -0.121853499730049];
        actual = matrixUtilities.multiply([-1, 1, 0, 0, 1, 1, -1, -1, -1, -1, 0, 0, 0.121853499730049], [0, -1, 0.11042534471975, 1, -1, 1, 0.686406869760904, -1, 0.178959134118147, -1, 0, 0.13443735900076, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.44396872420049, -0.939672100426339, -0.750299699488236, 0.709617256517344, 0, -1, 0.0942793880097006, -0.615337868507643, -0.972537043459734, -1.35380800364251, -0.644190747125163, 1.02875068055676, 0];
        actual = matrixUtilities.multiply([0, 0.734351467683144, 1, 0, 0, 1, 0.615337868507643, 0, 1, 0.644190747125163, 0, -1, -1], [-1, 1, 0.484651167171379, -1, -1, 0.0446306946895228, 1, 0.0821512616622035, 1, 0.709617256517344, 0, -1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.839707267861677, -1, 1, 0.0657946500302267, 0, 1, -1, -1, 0, -0.93422684303216, -0.93422684303216, 0, 1];
        actual = matrixUtilities.multiply([0, 0, 0.355974294876668, 0, 1, 0, 1, 0, 0.435488942282036, 0.93422684303216, 0, 1, 1], [0.839707267861677, -1, 1, -1, -1, 0, 0.0657946500302267, 0, 1, 0, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.556460746815705, -1, -1.52198812495704, 0.749412535107421, 0.212894911045625, 0.67121019478478, 0.0715833129694608, -0.212894911045625, 0.894162625956425, 0.702226245794246, 0, 1.2370638521793, 0];
        actual = matrixUtilities.multiply([0, -1, 0.751286990824755, 1, 0, 0, -1, 1, 1, 0, 1, 0.44894416418343, 1], [1, -1, -1, 0.749412535107421, 0.212894911045625, 0.67121019478478, 0.60546487178908, 0, 0.969591146320846, 0.215530976287802, 0, 0.595781674420359, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.26846241078734, 0.143988367237145, -0.265982666642397, 0.200049804574613, 1.19643762390895, -0.988698119758022, 1.41245077802448, 0, -0.265982666642397, 1.41245077802448, 0, -1, 0];
        actual = matrixUtilities.multiply([1, 1, 0.143988367237145, 0.988698119758022, 0, 0.207739504150925, 1, 1, 0, 1, 0, -1, 0], [0, 0.853162489763071, -1, 0.412450778024481, 1, -1, 1, -1, 0.734017333357603, -1, 1, 0, 0.0909157889387178]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-3, 0.85370006032926, 0.503053937807239, -2.51234126394258, 0.74609723815047, 1.25773529032745, 1, -1, -0.503053937807239, 2, -0.233755974207891, -1, 0];
        actual = matrixUtilities.multiply([0, 1, 1, -1, 1, 0.512341263942579, 0, 0, -1, 1, -1, 0, -1], [1, 0.380055913878631, 0, 1, 0, -1, -1, 0.233755974207891, 0, -1, 1, 0.503053937807239, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.999886127179567, -2.28645484875731, -0.538363360119221, 1, 3, 1, -1, -3, -1, -0.407295371129781, -2.40729537112978, -1, 0];
        actual = matrixUtilities.multiply([0.288772876974555, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 0.407295371129781, 0.249590483144666], [0.00045623863137152, 0.00928732613534076, -1, 0, -1, -1, 0, 1, 0, -1, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.89346818108739, -0.632931935895668, -2.49744602502205, 1, -0.366529451388181, 1, -1.10663584345329, -1.09877549348219, -1.45091005296023, 0.803007358593404, 0.103839454774955, 0.295180853846287, 0.129851817213861];
        actual = matrixUtilities.multiply([-1, -1, 1, 0, 0, -1, -1, -1, 0.0833158451520446, 0, 0.803007358593404, 0, 0.129851817213861], [1, 1, -1, 0.023319998301249, 1, 1, 1, 0.12931320449771, 0.367594207808186, -1, 0.366529451388181, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 1.71678639376386, 0, 1, 1.09342847349747, -0.244176128527232, 0, -1.25053399859487, 0.250533998594868, 0.496889218453732, 1.04642360117749, -0.624439267215222, -1];
        actual = matrixUtilities.multiply([0, -1, 0, 1, -1, 0, 0, 0.250533998594868, 1, 0.496889218453732, -1, 0, 1], [0, 0.716786393763864, 1, 1, 0.0934284734974748, 0.755823871472768, 0, -1, 1, 0, -1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.845098952690651, 0.013835880993525, 1.26981176821041, -1, 0.0858698119809245, 0.364084560127968, 0, -0.0858698119809245, 0, 0.898187383030629, 0, 0.898187383030629, 0];
        actual = matrixUtilities.multiply([1, 0.161126252338815, 0.691440380034708, 1, 1, 1, 0, -1, -1, 0, 0, 0.898187383030629, 0.375413080386544], [-1, 0, 1, -1, 0, 0.364084560127968, -1, 0.0858698119809245, -1, 1, 0, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.0506039002217398, -0.337722884417583, -1.01123497076856, -0.801755098533703, 0, -0.801755098533703, 1, 0.387612250411814, 1.71348387548397, -0.401681929548123, 1, 1, -0.379376043276571];
        actual = matrixUtilities.multiply([0.818488756575849, 0.186629829083863, 0, 0, 0, 0.801755098533703, 0, 0.713483875483965, -1, -1, 0, 0, 0.379376043276571], [-1, 1, -1, 0.401681929548123, -1, -1, 0, 0.543267008170144, 1, -1, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.391240345030669, 0.614886336314905, -0.0583603135581875, 0.0241936408378493, 0.0397425168378942, 0.0374231310936432, 1.44332463701792, 1.19841099711369, 2.14969616017756, 1.60875965496933, 1.3851136636851, 1.94163968644181, 0];
        actual = matrixUtilities.multiply([0, 1, -1, 0, 0.0397425168378942, 0, 0.692855337491657, 1, 0.515201136244089, 0, 1, 1, 0], [0.0634374134537938, -1, 1, 0.460938710468327, 0, 1, 0.608759654969331, 1, 0.941639686441813, 1, 0.385113663685095, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.558640135246627, -0.672286318928137, -1.4511619622126, -0.00980209745923155, -0.221124356715532, -1, -1, 0, 0, -0.990197902540768, 1.22112435671553, 2, 0];
        actual = matrixUtilities.multiply([-1, 0.451161962212604, -1, -1, 0, 0, 0, 0, -1, 1, -1, 0, 0], [-1, 0.0023607020277347, 1, 0.00980209745923155, 0.221124356715532, 1, 1, -1, -1, 1, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.435935473018996, 0.759767571233823, 0.813053588761507, -0.00439368887077723, 1.00421191492218, 0, 1, -0.802658660245435, -1, 0.995606311129223, 0.762817176414103, -1, 0];
        actual = matrixUtilities.multiply([0.43674640750361, -1, 0.184568026654687, 0, 0.0148968873614897, -1, -1, -1, 0, -1, 1, -1, 1], [0, 1, 0.376307181257898, -1, 0.519920741915666, 1, 0, 0.282737918329769, 0, 0.00439368887077723, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.32324055831021, 1.22880525245741, -0.239782943742026, 0.425242150745128, -1.69495830717262, 1.28533543232061, 0.357208045474893, 0.103282231014185, 0.00850467858780391, -0.276996406855526, 1.1652025175283, -1, 0];
        actual = matrixUtilities.multiply([0, 1, 0.617913368445781, -1, -1, 0.436265074851115, 0.344533321608106, 0, 0.0130032720104806, 0.723003593144474, 1, 0, 0.925541372469413], [-1, 1, 0.38472198573161, 1, 0.337515983887723, 0, -1, 0.92117724843378, -1, 0.974733425292528, -1, 0.654041427492183, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.913792450047831, 0.485570432378711, 0.287700357049564, 1.22530452032821, 1.53669717001575, -0.248996812966185, -0.893867221145829, -1, 0, -2.58247457145829, -3, 0.712299642950436, 0];
        actual = matrixUtilities.multiply([0.32907266138544, 0, 1, 0, 0.536697170015749, 1, -1, 0, 0, -1, -1, -1, -1], [0.068962165652291, 0.843502229006729, 0, 0.893867221145829, 1, 0, 1, 1, -1, 0.688607350312456, 1, 0.287700357049564, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.44742564928969, 3, 1.47848310157586, 1.30742136855238, 2, 0.611155797546336, 0.022353440999218, -1, -1, 0.851800315812967, -0.165992166924287, -1.16599216692429, 0.294129072359823];
        actual = matrixUtilities.multiply([-1, -1, 0.325737782440026, -1, -1, 0.388844202453664, 0, 1, 0, 0, 0.165992166924287, 1, 1], [0.193524193108792, 1, 0.804220884015887, -1, -1, 0, 0.022353440999218, -1, -1, 0.848089819703293, 0, -1, 0.294129072359823]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.08732365675919, 0.728908434976311, 0, -0.211107789152237, -0.547237657806996, 0, 0.00234830180862214, -0.327084947814459, 0, -0.195612616462453, 0.430837755292113, 0, 1];
        actual = matrixUtilities.multiply([0.727229289583503, 0, 0.380789878955479, -1, 0.540336317168705, -1, -1, 0.0696622799475036, 0, 1, 1, -1, 1], [1, 0.28289761873097, 0, 0, 0.364755131008455, 0, 0.0337098040774976, 0.540754382750371, 0, 0.22932242053995, 0.474671758466713, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.970531068262891, 1, 0.73924770426929, -0.226121510018651, 0.073695813584265, 0.0252287596713709, -0.24006526555869, 0.131566253293852, 0, -1.27808013850734, 0.152400064431234, 0.27527042398009, 1];
        actual = matrixUtilities.multiply([0, 0.970531068262891, 1, 0.134470691501382, 0.091650818517269, -1, 0.24006526555869, 0, 1, 0.278080138507336, 1, 0.812734314153313, 1], [0, 1, 0.472089205622715, -1, 0.548043687151765, 0, -1, 0, 0.27527042398009, 0, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, 0.847565420832283, 0, -1, -0.847565420832283, -1, 0, -0.847565420832283, 1.63163710321842, 0.802678857372458, -0.631888810087618, 0];
        actual = matrixUtilities.multiply([1, 0, 1, 0, 0, -1, -1, 0, -1, 0.631637103218416, -1, 0.434315960590875, 1], [-1, 0, 0, 1, -1, 0, -1, -1, 1, 0, 1, 0.847565420832283, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -0.667964286481945, -1.93344068989784, 0.166251532345196, 0.556914200302456, 1.76718915755264, -0.199782145768303, 1.46818214071364, 1.08334769885119, 0.870961323320382, 0.602468417854022, 0.485610784374097, 0];
        actual = matrixUtilities.multiply([-1, -1, -1, 0.833748467654804, 1, 1, 1, 0.800217854231697, 0, 0.069244829504399, 0.940206152824781, 0.383990808103229, 0], [-1, 1, 0.437648046034224, -1, 0.667964286481945, 1, 1, 1, 0.104156259961499, 0, -1, 0.829284429936337, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.26542048680848, 0.647396850701141, 2.11784635396574, -0.789769561397736, 0, 0.0930714632838447, -1, 1, -0.88215364603426, -1.18460125810681, 0.747512606786337, -0.814267510927407, 0];
        actual = matrixUtilities.multiply([-1, 0.265420486808485, 1, 0, 0, 0.789769561397736, 1, 1, 1, 0.932113864893147, 0.747512606786337, 1, 1], [1, 0.381976363892656, 1, -1, 0, -1, 1, 1, 0, -1, 0, 0.11784635396574, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -0.254990530319042, -0.321582733337573, 1, -0.224508854199438, -1.32158273333757, -0.648551787086088, -0.255257130711676, 1.11301967693546, 3, 1.25499053031904, -0.678417266662427, -0.846105591322345];
        actual = matrixUtilities.multiply([-1, -1, 0, 1, -1, -1, -1, 0.351448212913912, 0, 1, 1, -1, -1], [-1, -1, 1, 1, 0.515240838059802, -1, 1, 0.73974969225924, 0.321582733337573, -1, 0, 0, 0.846105591322345]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.456064046107262, 0.282040319226514, -0.456064046107262, 0, 0.381039554430656, 0, -1.08261107843491, -1.08261107843491, 1.08261107843491, 2, 2, -2, 0.227372546978863];
        actual = matrixUtilities.multiply([-1, 0, -1, -1, 1, -1, 0.0826110784349083, 0, -1, -1, 0, 1, 0.456064046107262], [1, 0.618422613301511, -1, -1, -1, 1, 0, 0.381039554430656, 0, 1, 1, -1, 0.498553983633664]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.562955262401586, 0.676726615473029, -0.231256876685833, 0.313117738076031, 0.495655573669661, -0.803839580179202, -0.325919324218258, -0.534933963108311, 0.795819707119753, 0.562955262401586, 1.41263554901631, 1.22784689638198, -0.615007992188916];
        actual = matrixUtilities.multiply([1, -1, 0, 0, -1, 0.960721610561349, 0, 1, -1, 1, 0.887262273061677, 0, 0.615007992188916], [0, 0.230554162166339, 0.696183635711755, 0.562955262401586, 1, 0.3405846233203, 0, 0.465066036891689, 1, 0.325919324218258, 1, 0.204180292880247, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.111632080753429, 0.484482048087319, 0.706669195418558, 1.14520460967443, -0.369813531988435, -0.080805230923372, 1.00741703874039, 1.03218986957363, 0.0469523882712016, 2.04483119353877, 0.57244718380852, 0, 0];
        actual = matrixUtilities.multiply([0.706669195418558, 0, 0, 0.919194769076628, 0, 1, 0.0469523882712016, 1, 0, 1, 0.886861833225406, 1, 0], [0.114847072453633, 0, -1, 0.157969360313364, 0.685585350583114, 1, 1, 1, 0, 1, -1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.866537518669062, -0.998909818008034, -1.00109018199197, 0.991813057816235, -0.13415012282047, 1.86584987717953, 0.24085242219309, -1, 1, 0.357855216470603, 1.84446182280987, -1.84446182280987, 0];
        actual = matrixUtilities.multiply([0.00109018199196559, -1, 0, 0, 0.86584987717953, 1, 0, 0, 1, 0.844461822809867, 0, -1, 0], [0.167621313672336, 1, 0.15068028036071, 0.708981297309036, 1, -1, 0.867310437312029, 1, 1, 0.24085242219309, -1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.4058657751446, -1.09328621933196, -2.52478877129045, 0.292350495370268, -0.165134906845696, -1.63674960827304, 0.864337125264265, 0.864337125264265, 0.864337125264265, 0.0619933433188095, 0.372154223905948, 0.682315104493087, 0];
        actual = matrixUtilities.multiply([-1, -1, -1, -1, 0.292350495370268, -1, 0, 0.864337125264265, 0, 0.310160880587139, 0.372154223905948, 0, 0.405865775144596], [-1, 0.897338985417662, 0.996170056982045, -1, 0, 1, 1, 1, 1, 1, 0.457485402215964, 0.929100103643304, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0.00954239583087269, 0.227268184944613, 0, -1.24141103971815, 0.0553936368314941, -0.12085363647009, -0.762090410926421, 1.17486755992977, 0, 2, -0.22945776173354, 0];
        actual = matrixUtilities.multiply([0, 0.990457604169127, 1, 0, 0.241411039718153, -1, -1, 0.762090410926421, 0, 0, -1, 1, 0], [0, 0, 1, 0.12085363647009, 0, -1, 0, -1, 0.22945776173354, 0, 1, 0, 0.534393246068802]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.61477968404758, 1.34515781530419, 0.524713428944603, 1.01195327798461, -2, 0.473075613599771, 1.42405822929899, -0.317793319149778, 0.00279910623412116, 1.01195327798461, -2, 0.473075613599771, -0.151008051890418];
        actual = matrixUtilities.multiply([0, 0.995804032774551, -1, 0, -1, 1, 0.682206680850222, -1, 0, 0, -1, 1, -1], [0.607022373288415, 0.650646217470358, -1, 0.621597884046658, 1, 0.776485348947572, -1, 1, 0.526924386400229, 0.0119532779846123, -1, 1, 0.151008051890418]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.668738796687098, -1, -0.372184262784284, -0.581936759679549, 2, 0.121508706417637, 1, -1, 0, -0.59396440499123, 0.431789102233848, 0.340784785089545, 1];
        actual = matrixUtilities.multiply([0, 1, 0.250675556366646, 1, -1, -1, -1, 0, 0, 0.819709605919062, 0.387920503685214, 0, -1], [1, 0, 1, -1, 1, 0, 0.581936759679549, -1, 0.878491293582363, -1, 0, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.6534857319917, -0.718857367392097, 0.221700450974377, 0, 1, 1, 0, 0, 0, -0.833205965269919, -1.47839675633162, 0.354809208938297, 1];
        actual = matrixUtilities.multiply([0, 0, 0.778299549025623, 0, 0, -1, 0, 0, 0, 0.833205965269919, -1, 0.645190791061703, 1], [0.6534857319917, 0.0594421816335256, 1, -1, -1, 0, 0, 0, -1, 0, -1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.256063045147957, 0, 0.0290255057681346, 0.203043726181725, 0.12686231039784, -0.157847771494578, 0.62639550428204, 0.62639550428204, -0.62639550428204, 1.48933209967303, -0.33445848586711, 0.365443946963849, 0];
        actual = matrixUtilities.multiply([0.936745968617846, -1, -1, -1, 1, 0.87313768960216, 0, 0.62639550428204, 0, 1, 0.66554151413289, 1, 0], [1, 0.773763783636393, 1, 0.809464723714378, 0, 0.0309854610967382, 1, 1, -1, 0.0143258618257595, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 1.04745484378536, -1.04745484378536, -0.839183668986663, 0.587427332339542, 1.05589599910001, -0.712992029130921, -1, 0.463014571211773, -0.750022542080852, 0, 2, -0.891777730496497];
        actual = matrixUtilities.multiply([0, -1, 0.0474548437853599, 0.643323331439553, 1, 0.587427332339542, -1, 0.463014571211773, -1, 1, 1, 0, -1], [0, -1, 0, 0.249977457919148, 0, 1, -1, 0, 1, 0, 1, -1, 0.891777730496497]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.43315703403518, 2.55664879947745, -1.52496595688818, -1, -0.979906838843556, 1, 1, 0.979906838843556, -1, 0, 2.22573924075148, -3, 0.358727014593333];
        actual = matrixUtilities.multiply([1, 1, 0, 0, -1, 0, 0, 1, 0, 1, 1, 1, 0.576741960633892], [0.751041303738505, 1, 0.823650914162235, -1, 1, -1, 1, 0.979906838843556, -1, 0, 0.245832401907925, -1, 0.621988755940454]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 0.733823060878387, 2, 0.354938024354604, 0.92407344955994, -0.645061975645396, 0, -1.21620566572041, 1, -1, -0.654310923978167, 0, -1];
        actual = matrixUtilities.multiply([1, 0.50705880928182, -1, 1, -1, 0.645061975645396, -1, 0.642853484788376, -1, -1, 0.939394430229158, 0, -1], [1, 0, -1, 1, 1, 0, 0, 0.367991404779251, 0, -1, 0.452770222654925, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.962928474397831, 0.962928474397831, 0.605885531569778, 0.685404090529962, 1.68540409052996, 0.314595909470038, -0.201321007311959, 0.798678992688041, 1, 0, 1, 1, 0];
        actual = matrixUtilities.multiply([-1, 0, 0.962928474397831, -1, 0.685404090529962, 1, -1, 0, 0.798678992688041, -1, 0, 1, -1], [-1, 0, 0.394114468430222, 1, 0, -1, 1, 1, -1, 1, 1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.19796693241129, -0.0467867935294224, 1, -0.80203306758871, 0.0467867935294224, -1, -1.19796693241129, 0.0467867935294224, -1, -0.454912776804954, 0.0467867935294224, -1, 0];
        actual = matrixUtilities.multiply([-1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 0, 0.545087223195046, 0], [0.374869845050792, 0, 0, -1, 0.0467867935294224, -1, 0.80203306758871, 0, 0, 1, 0, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.770617771786925, 0.770617771786925, 0.770617771786925, 0.595435475742182, 0.204464131130122, -1, 1, 0.40554409818982, -0.742562918226974, -2, 0.200100393127697, 0.574936971336108, 0];
        actual = matrixUtilities.multiply([0, 0, 0, 0, 0.404564524257818, -1, 0.605644491317516, 0, -1, -1, 1, 1, 0.770617771786925], [1, 1, 1, 0, 1, 0.425063028663892, -1, 1, 0, -1, 0.200100393127697, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.9996220385654, 1.85954032133312, -0.337281695431584, 0.503828058253894, 0.41563875240255, 0.330180324516625, 0.28767954850927, -0.76267544715847, -0.811471145507898, 0.965799143521953, -0.175038496579527, 1.65534326464652, 0];
        actual = matrixUtilities.multiply([0, 1, 1, 0, 0, 0.503828058253894, -1, 0, 0.28767954850927, 0, -1, 1, 0.0345788179126469], [-1, 1, 0.213282013876961, 0, 1, 1, 0.034200856478047, 1, -1, 1, 0.824961503420473, 0.655343264646522, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 1, -0.41012942716951, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        actual = matrixUtilities.multiply([0.754439141486976, 0, 0, 1, 1, 0, 0, -1, 0, -1, 1, 0, -1], [1, -1, 0.41012942716951, 0, 0, 0, 0, 0, 0, -1, 0, 0.412787987111503, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.86370982166726, -1.64098923869477, 1.15930188236484, 0.139468295098966, 0.860531704901034, 1, 0, 0, 0, 0.21432255404737, -1, -0.78567744595263, 0];
        actual = matrixUtilities.multiply([-1, -1, 0.46381882320336, -1, 0.860531704901034, 0, 0, 0, 0, 0.78567744595263, -1, 0, 0.177170415491411], [-1, -1, 0.89914493863431, -1, 0, -1, -1, 1, 0, 0.0881383745410193, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, -0.708292547998804, -1.38140872697412, 1, -1, 0, 0.720019521527001, -0.703464181613825, -0.0216461769405967, 1, -1, 0, 0];
        actual = matrixUtilities.multiply([-1, 0.381408726974115, 0, 0, 0, 1, 0, 0.0216461769405967, 0.720019521527001, 0, 0, 1, 0], [0, -1, 0.574438235989976, 1, 1, 1, 0, 0.76481588220448, -1, 1, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.623147412959089, 1, -0.977969345160746, -1, 0, -1, 0, -1, 1.60111675811983, 1, 0, -1, 0];
        actual = matrixUtilities.multiply([0.376852587040911, -1, 1, 0, -1, 0, -1, 1, -1, 1, 0, 0, 0], [1, -1, 0, 1, 0, -1, 1, 0, 1, 0, 1, 0.398883241880165, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 1, 0.586699206655239, -0.468589626470855, 2.37503518507585, 0.274921162097326, -0.735271672129292, 1.73527167212929, 0.431383306714327, -0.470535922548983, 2.16260149710001, 0.27606305246228, 0];
        actual = matrixUtilities.multiply([0, 0, 1, 0.906445558604992, 1, 0.468589626470855, 0, 1, 0.735271672129292, 0.692065574551032, 1, 0.470535922548983, 0], [0.639829500876288, 0, 0.599892735760609, 0, 1, 0, 0, 1, 0, -1, 1, 0.586699206655239, 0.186254113533652]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.423739586688457, 0.287444875709454, 0, 1.20948715936834, 0.497974587836291, 0, -0.790512840631657, 0.497974587836291, 0, -0.0145600508034974, 0.708504299963128, -1, 0.873508773685204];
        actual = matrixUtilities.multiply([-1, 1, -1, 0, 1, 1, 0, 1, -1, 1, 1, 0.775952789828159, 1], [0.214252427320114, 0, -1, -1, 0.210529712126837, -1, 0.209487159368343, 0.497974587836291, 0, 1, 0, 0, 0.873508773685204]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, -0.285879512916263, -0.837798556009343, 0.781042205120749, 0.495633429994893, 0.20495712912136, -0.718988713069278, -1.0785553743211, -0.720964629538806, 1, 1.26494238957062, 0.720964629538806, -1];
        actual = matrixUtilities.multiply([0.224978365574488, 1, 0, 0.284281809015331, 0.769944790177953, 0.0288341436669389, -1, -1, 0.73014480049263, 1, 1, 0, -1], [1, 0.775800268061366, 1, 0, 1, 0.720964629538806, 1, 0.264942389570615, 0, 0.384870626677233, 0.255274043071677, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.53955714336576, -1, 0.460442856634242, -0.841911154088992, -0.993514146652778, 1.05140954343275, -0.0191688309512887, -1, 0.230034866477379, 0.0475223717025211, -0.298655786224946, 0.0154539899256608, 0];
        actual = matrixUtilities.multiply([0.460442856634242, 0, 1, 1, 0.993514146652778, 0, 0.178289711558395, 1, 0, 0, 0.298655786224946, 0, -1], [-1, 0, 1, -1, 0, 1, 0.159120880607106, -1, 0.0517451549189841, 1, -1, 1, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.79743049051493, -1.13205127098227, -1.79743049051493, -0.931381136612679, 0.132051270982274, -0.931381136612679, -0.412267307942858, -1.86794872901773, -0.412267307942858, -1, -0.132051270982274, -1, 0.552041627723743];
        actual = matrixUtilities.multiply([1, 0.79743049051493, -1, -1, 0.931381136612679, 1, -1, 0.412267307942858, -1, 1, 1, -1, 1], [0, -1, -1, 0, 0.867948729017726, 0, -1, 0, -1, 0, 1, 0, 0.552041627723743]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0, 0, -1.22091256604572, 0, -0.633024246261001, 0.633024246261001, 0, -0.227169653972224, -0.9937429120735, 0, 0, 0, 0];
        actual = matrixUtilities.multiply([0, -1, 1, 0.366975753738999, 0, -1, 0, -1, 0.772830346027776, -1, 0, 1, 0], [0, -1, 0.529090188690038, 0, 1, -1, 0, 1, 0.220912566045724, 0, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.784725223567674, 1.97273470536116, 1.71257336504459, 0, 0.0358855031164503, -0.758200029729959, -1.25665646896542, 1.03916812974432, 0.956764794865979, -0.188041747169589, 0.464821015945042, 0.36190698219552, -1];
        actual = matrixUtilities.multiply([1, 0, 0.784725223567674, 0.149854590720429, 1, -1, 0.0487101744155913, 0.256656468965419, 1, 0.36190698219552, 0.188041747169589, 0, 1], [0, 0.420441169953179, 0, 0, 0.914987309796264, 1, -1, 0.710909794881432, 0, -1, 0.812139340588888, 0.908054620450388, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.704533553079019, -0.0213432428526429, -1.72013230189687, 0.553611157996585, 1.41195290433895, -0.944747406816929, 0.363410706761004, 1.91909185909459, -1.7593040856517, 0, 0, 0, 1];
        actual = matrixUtilities.multiply([-1, 1, 0.632444021586535, 0.630102369296412, 0, 1, 0.215499721567845, 1, 0.778200885643345, 0, 0, 0, 1], [0, -1, 0, 0.878605104460663, 0.653787264439178, 0.0876882803103366, 0.174071551381644, 1, -1, 0, 1, -1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.867492216111856, 0.724389401136148, 0.0810895877390461, 0, 0, 0, -2.10628101188051, 0.192088184502017, 0, -0.976015397802003, -0.433601308815927, 0, 0];
        actual = matrixUtilities.multiply([1, 1, 0.275610598863852, 0, 0, 0, 0.877977553698224, -1, 0.685889369196207, 0, -1, 0.433601308815927, 0.134295706234079], [-1, 0, 0.603813703453082, -1, 1, 0, 0.542414088986076, 0, 0, -1, -1, 0, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.0153400925056492, -0.121901097379446, 0.279333117082404, -0.400397998932934, -1, 0, -0.967897895242971, 0.820882483767757, -1, 1, -0.40964930430504, 0.40964930430504, 0.0844625714628317];
        actual = matrixUtilities.multiply([0.194870545619573, 0, 0, 0, 1, 0.400397998932934, -1, 0.179117516232244, 0.967897895242971, 0.40964930430504, 0, -1, 0.0844625714628317], [0.181620003274465, 0.863926434826072, 1, 0, -1, 1, 0, -1, 0, -1, 0, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1.34458065421534, 0.77286533658306, -0.326027603040462, 0, 0, 0, 1, 0.541007927870847, -0.242974823453918, 0.132764784681036, -0.895914698826722, -1, -0.326027603040462];
        actual = matrixUtilities.multiply([0, 1, 0.344580654215338, 0, 0, 0, 0.242974823453918, 0, 1, 1, 0, 0.132764784681036, 0.326027603040462], [0, 0.975473196234309, -1, 0, -1, -1, 1, 0.184688859239541, 0, 1, 0.783982751324765, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, 1.06567523119304, 2, 1, 0.79464468862612, -0.136307237733299, 0, -0.522269108575894, 0, 0.703295745283037, 0.60505933919106, 0.607431444933925, 1];
        actual = matrixUtilities.multiply([0, 1, 0, 1, -1, 0, 0, 1, -1, 0.703295745283037, 0, 0, 1], [1, 1, 1, 1, 0.860319919819161, 0.863692762266701, 0, 0.0656752311930411, 1, 0, 0.587944339768935, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, -0.710435361466573, 0.888219566032393, 1, 0.289564638533427, 0.838453526767186, 0.0229984400901005, 0.00665953499152262, -0.865221125942292, 0, 0, 0.0441064859034705, 0.865852244135855];
        actual = matrixUtilities.multiply([-1, 1, 1, 0.587041915202067, 1, 0.227166273271277, 1, 0.0229984400901005, 1, 0.834503663626734, 0, 0.049174695764284, 1], [1, -1, 1, 0, 0, 0.111780433967607, 1, 0.289564638533427, 1, 0, 0, -1, 0.865852244135855]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.370185026051217, 0.181006361814684, 0.689175670821767, 0.429332825884405, -0.417243470166458, 0.417243470166458, 0.175595510832777, 1, -1, 0.497954563016388, 0.0142027367903864, 0.418809463465032, 0.935091016318226];
        actual = matrixUtilities.multiply([-1, 0.245915345496459, 1, 0, 0.582756529833542, 1, 0, 1, 0, 0.433012200255418, 1, 0.985797263209614, 0.935091016318226], [0, 1, 1, 0, 0, 1, 0.175595510832777, 1, -1, 0.327003395337147, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.24719710706137, 0.586138628696156, -1.36033764358626, -0.209580367528638, 0, -1.61750908364426, -2, 0, 0, -1, 0, 1, 1];
        actual = matrixUtilities.multiply([0.303767375323813, 0.0565702682624433, 0.413861371303844, 0.913544725586448, 0.70396435805781, 0, 1, -1, 0, 0, -1, 0, 1], [0, 1, -1, -1, 0, -1, 1, 0, -1, 0, -1, 0, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [1, -1, 0.84450280519412, 2, -2, 1.84450280519412, 0, 0, -1, 0.575484036270289, -0.575484036270289, -0.514002117025306, 0];
        actual = matrixUtilities.multiply([0, 1, 0, 0, 1, -1, -1, 0, 1, -1, 0.575484036270289, 1, 0], [1, -1, 0, -1, 1, 0, 1, -1, 0.84450280519412, -1, 1, -1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1.41145252781522, 0.411452527815221, -0.395916523130572, -1, 0.608728157174181, -0.807369050945793, 1, 0.391271842825819, 1.80736905094579, -1, 1, 0.192630949054207, 0];
        actual = matrixUtilities.multiply([0, 0, -1, 1, 0, -1, -1, -1, 1, 0, -1, -1, 0.411452527815221], [-1, 1, 1, 0, 0.608728157174181, 0, 0, -1, -1, 1, 0, 0.807369050945793, 0]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-1, 1.83747077027218, -0.83747077027218, 0, 1, 0, -0.475933087279989, 2, -1, -1.97951484703436, 1.29365639262537, -0.31414154559101, 0];
        actual = matrixUtilities.multiply([0.83747077027218, 0, 1, 0, 1, 1, 1, 0.524066912720011, 1, 0.31414154559101, -1, 0.979514847034363, 0], [0, 0, -1, 0, 1, -1, 1, 0, 0, -1, 1, 0, 0.942783090724974]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.453126223503205, -1.04739384634765, 0, 0.0659038589717171, 0.224345768906337, 0.176951922558691, -0.479898142700705, 0.181263604256741, 0.241215398647457, 0.530482295566981, 0.101423896521969, 0, 0.83266001512886];
        actual = matrixUtilities.multiply([0, -1, -1, 0.823048077441309, 1, 1, 0.646170216447753, 0, 0.88738561509521, -1, 0.294586611583171, -1, 1], [0, 0, 1, 0.630619397214902, -1, -1, 0.546873776496795, 0.114953871404265, 0, -1, 0.932439974943381, 1, 0.83266001512886]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.802868610156173, 0.196924122607766, -1.532105757637, 0.276174300944514, -1, 0, 0, 0, -1, 0, 0, -1, 1];
        actual = matrixUtilities.multiply([1, -1, -1, 0, -1, 1, 0, -1, 0, 0, -1, 0, 1], [-1, 0.196924122607766, 0.467894242363001, 0.473305690788341, -1, 0, 0, 0, 1, 0.276174300944514, -1, 1, 1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2, 2.03979422200462, 1.88029246864854, -0.113284784887584, 1.8469209931078, 0.88029246864854, -0.953395079333985, -1.99814539344051, -0.88029246864854, -1, 0.960205777995384, 0.88029246864854, -1];
        actual = matrixUtilities.multiply([1, 1, 1, 0.886715215112416, -1, 1, -1, 0.0466049206660152, -1, 0, -1, 1, 1], [0, 0, 1, 1, 1, 0, 1, 0.0397942220046158, 0, 0, 1, 0.88029246864854, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.347609307778817, 1.71095681409862, -1.28904318590138, -0.574717584395316, -1.03185252101713, 0.696549207296478, 1.61607404927604, -0.22126724534727, -0.729319145311284, 0.6366524936802, 0, 1, 0.0592217261174663];
        actual = matrixUtilities.multiply([-1, 0, -1, 0.335303313720647, 0, 0.696549207296478, 0.950586390658555, 0.270680854688716, -1, -1, 1, 0, 0.289043185901383], [-1, -1, -1, 0.3633475063198, -1, 0, 1, -1, 1, -1, -1, 1, 0.204888850545925]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.236660858260775, 1, -1, 2.01329790530042, 2, 1, -2.01611729386082, -2, -1, 1.90055526803129, 1.87009434489072, 0.87009434489072, 1];
        actual = matrixUtilities.multiply([0, -1, 0, 1, 0.977718162339981, 1, -1, -1, -1, 1, 1, 0.87009434489072, -1], [0.110127822547279, -1, 1, 1, 1, 0, 0.126533035713496, 0, 0, 0.889584258147322, 1, 1, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.125122721504, 0, 0, 0.396604817344904, -1, 0.864153844706786, -0.628074573645403, 0, 0, 0, 1, -0.864153844706786, 1];
        actual = matrixUtilities.multiply([0.199216345883541, 0, -1, 0.631461348678666, 1, -1, -1, 0, 0, 0, -1, 1, -1], [0, 0, 0, 0.628074573645403, 0, 0, 0, -1, 0.864153844706786, 0, 0, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-0.645065085422025, 0.125618780555957, -0.624863987613872, -0.24463672435127, 1, 0, -1, 0, 0, 0.457695245024606, 1, 0, 0.157462075425993];
        actual = matrixUtilities.multiply([0.125618780555957, 0.20694336165066, 0.624863987613872, 1, 0.900712585030455, 0, 0, 1, 0, 1, 0.198380615654579, 0, 1], [-1, 0, 0, 0.656075860679185, 1, 0, -1, 0, 0, 0.76730750397188, 0, -1, 0.157462075425993]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [0.286585545067697, -1.21718993001487, 0, 0.920264136474703, -1.54850929255994, 0.0797358635252974, -1, 0, 0, 0.024780618038392, -0.796061296852334, 0, 0.233781103340549];
        actual = matrixUtilities.multiply([0, 0.217189930014866, 1, 0.0797358635252974, 1, 0.548509292559935, 0, -1, 1, 0, 0.024780618038392, 0.771280678813942, 0.241470313743442], [0.287387770268781, 0, 0, -1, 0, 1, 1, -1, 0, 0, -1, 0, 0.968156705129965]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [-2.41208248278689, 3, 2.68174634952179, 0.587917517213112, 0, 0.0490365917347613, 0, 0, 0.262365379141598, -1, 1, 1.24994566167523, 0.863626684930002];
        actual = matrixUtilities.multiply([0, -1, 1, 0.127207498125363, -1, -1, 0.680610994659649, 0, 0, 0.648392581217174, 0, 1, 1], [-1, 1, 0.681746349521794, 0, 0, 0.38548507326538, 0.412082482786888, -1, -1, -1, 1, 1, 0.863626684930002]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
        expected = [2.06011637629015, -1.09376283785969, 0, -1.34488905051019, 0.191009836360351, 0, 0, -2, 0, -2, 0, 0, 0];
        actual = matrixUtilities.multiply([-1, 1, 0.906237162140308, 0.191009836360351, -1, -1, -1, 0, -1, 1, 0, -1, 0], [0, 1, 1, -1, 1, 0, 0.153879214149844, -1, 0, 1, 1, 0, -1]);
        message = "\r\n" + expected + "\r\n" + actual + "\r\n" + multipliedString;
        assert.ok(matrixUtilities.areEqual(expected, actual), message);
    });

    QUnit.done(function() {
        jQuery("#qunit-fixture").hide();
    });
});