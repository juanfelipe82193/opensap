{"!define":{"sap.ui.vtm.Extension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Extension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.vtm.Extension"},"sap.ui.vtm.Tree_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Tree with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.vtm.Tree"},"sap.ui.vtm.extensions.SceneNodeHoverHighlightExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.SceneNodeHoverHighlightExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","setHighlightColor":{"!description":"Sets a new value for property {@link #getHighlightColor highlightColor}.\n\nThe highlight color to use for the scene node being hovered over.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>rgba(0, 0, 255, 0.7)<\/code>.","!type":"fn(sHighlightColor: sap.ui.core.CSSColor) -> sap.ui.vtm.extensions.SceneNodeHoverHighlightExtension","!category":"function","parameters":{"sHighlightColor":"type: sap.ui.core.CSSColor, description: New value for property <code>highlightColor<\/code>"},"!static":false},"getHighlightColor":{"!description":"Gets current value of property {@link #getHighlightColor highlightColor}.\n\nThe highlight color to use for the scene node being hovered over.\n\nDefault value is <code>rgba(0, 0, 255, 0.7)<\/code>.","!type":"fn() -> sap.ui.core.CSSColor","!category":"function","!static":false},"!constructorDescription":"Constructor for a new SceneNodeHoverTooltipExtension.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getHighlightColor highlightColor} : sap.ui.core.CSSColor (default: rgba(0, 0, 255, 0.7))<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.vtm.Extension#constructor sap.ui.vtm.Extension}\ncan be used as well.","!module":"sap/ui/vtm/extensions/SceneNodeHoverHighlightExtension","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.extensions.SceneNodeHoverHighlightExtension.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.vtm.Extension","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.extensions":{"enabled":{"!description":"Controls whether the extension is enabled.","!type":"Boolean","!category":"enum"},"LoadProgressExtension":"sap.ui.vtm.extensions.LoadProgressExtension_obj","highlightColor":{"!description":"The highlight color to use for the scene node being hovered over.","!type":"sap.ui.core.CSSColor","!category":"enum"},"ViewportSelectionLinkingExtension":"sap.ui.vtm.extensions.ViewportSelectionLinkingExtension_obj","MessageStatusCalculationExtension":"sap.ui.vtm.extensions.MessageStatusCalculationExtension_obj","!module":"sap/ui/vtm/library","VisibilityIconClickExtension":"sap.ui.vtm.extensions.VisibilityIconClickExtension_obj","SceneNodeHoverTooltipExtension":"sap.ui.vtm.extensions.SceneNodeHoverTooltipExtension_obj","ViewLinkingExtension":"sap.ui.vtm.extensions.ViewLinkingExtension_obj","predefinedView":{"!description":"Specifies a predefined view to use. If a specific view is not specified this extension will zoom to fit all geometry without changing the camera angle.","!type":"sap.ui.vtm.PredefinedView","!category":"enum"},"InitialViewExtension":"sap.ui.vtm.extensions.InitialViewExtension_obj","SceneNodeHoverHighlightExtension":"sap.ui.vtm.extensions.SceneNodeHoverHighlightExtension_obj","DisplayStateCalculationExtension":"sap.ui.vtm.extensions.DisplayStateCalculationExtension_obj","!description":"<strong style=\"color: red;\">Experimental! <\/strong>","tooltipCallback":{"!description":"A callback function that gets a tooltip for a given {@link sap.ui.vtm.SceneNode}. If unspecified, the scene node name is used for the tooltip text.\n\nThe first parameter is the {@link sap.ui.vtm.SceneNode} under cursor.<br> The function should return an object containing a tooltip text for the specified scene node. <pre>\n  {\n    text: [string]\n  }\n<\/pre> If function returns null no tooltip will be displayed.","!type":"Object","!category":"enum"},"!category":"namespace","SelectionLinkingExtension":"sap.ui.vtm.extensions.SelectionLinkingExtension_obj","findMatchingTreeItems":{"!description":"The value is a callback function that finds tree items in a particular tree that match a given tree item.\n\nThe first parameter is the tree item to match against.<br> The second parameter is the {@link sap.ui.vtm.Tree} containing the specified tree item being matched against.<br> The third parameter is the {@link sap.ui.vtm.Tree} to search for matches in.<br> The function returns an array of tree items that match the specified tree item.","!type":"Object","!category":"enum"},"MessageStatusIconClickExtension":"sap.ui.vtm.extensions.MessageStatusIconClickExtension_obj","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.interfaces.ISceneNodeHoverTooltipExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","!module":"sap/ui/vtm/library"},"sap.ui.vtm.Vtm_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Vtm with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.vtm.Vtm"},"sap.ui.vtm.interfaces.IViewLinkingExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","!module":"sap/ui/vtm/library"},"sap.ui.vtm.interfaces.IVisibilityHeaderIconClickExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","!module":"sap/ui/vtm/library"},"sap.ui.vtm.MatrixUtilities":{"isInvertible":{"!description":"Returns whether a matrix is invertible.","!type":"fn(vtmMatrix: sap.ui.vtm.Matrix) -> Boolean","!category":"function","!static":"true"},"toVkMatrix":{"!description":"Converts a {@link sap.ui.vtm.Matrix} value to a {@link sap.ui.vk.TransformationMatrix} as used by the sap.ui.vk library.","!type":"fn(vtmMatrix: sap.ui.vtm.Matrix) -> sap.ui.vk.TransformationMatrix","!category":"function","!static":"true"},"fromVsmMatrixString":{"!description":"Converts a VSM transformation matrix string to a {@link sap.ui.vtm.Matrix} value.","!type":"fn(vsmMatrixString: String) -> sap.ui.vtm.Matrix","!category":"function","!static":"true"},"fromVkMatrix":{"!description":"Converts a {@link sap.ui.vk.TransformationMatrix} (as used by the sap.ui.vk library) to a {@link sap.ui.vtm.Matrix} value.","!type":"fn(vkMatrix: sap.ui.vk.TransformationMatrix) -> sap.ui.vtm.Matrix","!category":"function","!static":"true"},"multiply":{"!description":"Returns the result of multiplying two matrices (without modifying the passed matrices).","!type":"fn(vtmMatrixA: sap.ui.vtm.Matrix, vtmMatrixB: sap.ui.vtm.Matrix) -> sap.ui.vtm.Matrix","!category":"function","!static":"true"},"to4x4Matrix":{"!description":"Converts a {@link sap.ui.vtm.Matrix} to a 4x4 transformation matrix.","!type":"fn(vtmMatrix: sap.ui.vtm.Matrix) -> [Number]","!category":"function","!static":"true"},"!module":"sap/ui/vtm/MatrixUtilities","areEqual":{"!description":"Returns true when the two matrix parameters are equal.","!type":"fn(vtmMatrixA: sap.ui.vtm.Matrix, vtmMatrixB: sap.ui.vtm.Matrix) -> Boolean","!category":"function","!static":"true"},"invert":{"!description":"Returns the inverse of the passed matrix without modifying the passed matrix.","!type":"fn(vtmMatrix: sap.ui.vtm.Matrix) -> sap.ui.vtm.Matrix","!category":"function","!static":"true"},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","createIdentity":{"!description":"Returns an identity transformation matrix.","!type":"fn() -> sap.ui.vtm.Matrix","!category":"function","!static":"true"},"from4x4Matrix":{"!description":"Converts a 4x4 transformation matrix to a {@link sap.ui.vtm.Matrix}.","!type":"fn(mat4x4: [Number]) -> sap.ui.vtm.Matrix","!category":"function","!static":"true"},"toVsmMatrixString":{"!description":"Converts a {@link sap.ui.vtm.Matrix} value to a VSM transformation matrix string.","!type":"fn(vtmMatrix: sap.ui.vtm.Matrix) -> String","!category":"function","!static":"true"},"!category":"namespace","isValid":{"!description":"Returns true if the parameter represents a valid transformation matrix.","!type":"fn(vtmMatrix: sap.ui.vtm.Matrix, checkInvertibility: Boolean) -> Boolean","!category":"function","!static":"true"},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.extensions.VisibilityIconClickExtension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.VisibilityIconClickExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.vtm.extensions.VisibilityIconClickExtension"},"sap.ui.vtm.interfaces.IViewportSelectionLinkingExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","!module":"sap/ui/vtm/library"},"sap.ui.vtm.DescriptorUtilities":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"namespace","createIdentifierDescriptor":{"!description":"Creates a descriptor for an identifier.","!type":"fn(source: String, type: String) -> String","!category":"function","!static":"true"},"!module":"sap/ui/vtm/DescriptorUtilities","createMetadataDescriptor":{"!description":"Creates a descriptor for a metadata field.","!type":"fn(category: String, field: String) -> String","!category":"function","!static":"true"},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.ChildCollectionType":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","Included":{"!description":"The operation should apply to the <code>includedChildren<\/code> collection of the tree item only.","!type":"String","!category":"enum"},"IncludedAndExcluded":{"!description":"The operation should apply to the <code>includedChildren<\/code> and the <code>excludedChildren<\/code> collection of the tree item.","!type":"String","!category":"enum"},"!category":"static class","None":{"!description":"The operation should not apply to either the <code>includedChildren<\/code> or <code>excludedChildren<\/code> collection of the tree item.","!type":"String","!category":"enum"},"!module":"sap/ui/vtm/ChildCollectionType","Excluded":{"!description":"The operation should apply to the <code>excludedChildren<\/code> collection of the tree item only.","!type":"String","!category":"enum"}},"sap.ui.vtm.extensions.DisplayStateCalculationExtension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.DisplayStateCalculationExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.vtm.extensions.DisplayStateCalculationExtension"},"sap.ui.vtm.extensions.SelectionLinkingExtension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.SelectionLinkingExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.vtm.extensions.SelectionLinkingExtension"},"sap.ui":{"vtm":"sap.ui.vtm","!category":"namespace"},"sap.ui.vtm.Scene_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Scene with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn()","prototype":"sap.ui.vtm.Scene"},"sap.ui.vtm.DisplayGroup_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.DisplayGroup with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn({string: undefined, mSettings: Object)","prototype":"sap.ui.vtm.DisplayGroup"},"sap.ui.vtm.ViewableLoadInfo_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.ViewableLoadInfo with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn()","prototype":"sap.ui.vtm.ViewableLoadInfo"},"sap.ui.vtm.Extension":{"getVtmPromise":{"!description":"Gets a {@link Promise} that resolves when the extension is added to the <code>extensions<\/code> aggregation of an {@link sap.ui.vtm.Vtm} instance.\n\nThe relevant {@link sap.ui.vtm.Vtm} instance is passed to the resolve handler.","!type":"fn() -> Promise","!category":"function","!static":false},"detachEnabledChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:enabledChanged enabledChanged} event of this <code>sap.ui.vtm.Extension<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Extension","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getEnabled":{"!description":"Gets current value of property {@link #getEnabled enabled}.\n\nControls whether the extension is enabled.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Extension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"attachEnabledChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:enabledChanged enabledChanged} event of this <code>sap.ui.vtm.Extension<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Extension<\/code> itself.\n\nFired when the enabled property is changed.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Extension","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Extension<\/code> itself"},"!static":false},"applyPanelHandler":{"!description":"Calls a function once for each panel that is attached (currently or in the future) to the {@link sap.ui.vtm.Vtm} instance that owns this extension.\n\nThis function should only be used after the Promise returned by {@link #getVtmPromise} has resolved.","!type":"fn(panelHandler: fn())","!category":"function","parameters":{"panelHandler":"type: function, description: A function that takes one {@link sap.ui.vtm.Panel} argument."},"!static":false},"fireEnabledChanged":{"!description":"Fires event {@link #event:enabledChanged enabledChanged} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Extension","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"!constructorDescription":"This class is an abstract class that is not intended to be instantiated directly.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getEnabled enabled} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:enabledChanged enabledChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/vtm/Extension","!description":"<strong style=\"color: red;\">Experimental! <\/strong>","detachInitialized":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:initialized initialized} event of this <code>sap.ui.vtm.Extension<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Extension","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"attachInitialized":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:initialized initialized} event of this <code>sap.ui.vtm.Extension<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Extension<\/code> itself.\n\nFired when initialization has completed.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Extension","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Extension<\/code> itself"},"!static":false},"getInitializedPromise":{"!description":"Gets a {@link Promise} that resolves after the {@link #initialize initialize} method has been called for the extension.\n\nThe {@link #initialize initialize} method is called after the {@link Promise} returned by {@link #getVtmPromise getVtmPromise} resolves.","!type":"fn() -> Promise","!category":"function","!static":false},"!category":"class","setEnabled":{"!description":"Sets a new value for property {@link #getEnabled enabled}.\n\nControls whether the extension is enabled.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bEnabled: Boolean) -> sap.ui.vtm.Extension","!category":"function","parameters":{"bEnabled":"type: boolean, description: New value for property <code>enabled<\/code>"},"!static":false},"bindEnabled":{"!description":"Binds property {@link #getEnabled enabled} to model data.\n\nSee {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description of the possible properties of <code>oBindingInfo<\/code>","!type":"fn(oBindingInfo: Object) -> sap.ui.vtm.Extension","!category":"function","parameters":{"oBindingInfo":"type: object, description: The binding information"},"!static":false},"unbindEnabled":{"!description":"Unbinds property {@link #getEnabled enabled} from model data.","!type":"fn() -> sap.ui.vtm.Extension","!category":"function","!static":false},"fireInitialized":{"!description":"Fires event {@link #event:initialized initialized} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Extension","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"initialize":{"!description":"Contains initialization code for the extension. Derived classes must redefine this method.","!type":"fn(vtm: sap.ui.vtm.Vtm)","!category":"function","parameters":{"vtm":"type: sap.ui.vtm.Vtm, description: The {@link sap.ui.vtm.Vtm} instance that this extension belongs to."},"!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.Extension.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.core.Element"},"sap.ui.vtm.interfaces.IDownloadProgressExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","!module":"sap/ui/vtm/library"},"sap.ui.vtm.interfaces.ILoadProgressExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","!module":"sap/ui/vtm/library"},"sap.ui.vtm.extensions.SceneNodeHoverTooltipExtension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.SceneNodeHoverTooltipExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.vtm.extensions.SceneNodeHoverTooltipExtension"},"sap.ui.vtm.Panel":{"setVtmId":{"!description":"Sets the associated {@link #getVtmId vtmId}.","!type":"fn(oVtmId: sap.ui.core.ID | sap.ui.vtm.Vtm) -> sap.ui.vtm.Panel","!category":"function","parameters":{"oVtmId":"type: sap.ui.core.ID|sap.ui.vtm.Vtm, description: ID of an element which becomes the new target of this vtmId association; alternatively, an element instance may be given"},"!static":false},"getViewportHeaderControls":{"!description":"Gets content of aggregation {@link #getViewportHeaderControls viewportHeaderControls}.\n\nThe set of controls to render in the viewport header area.","!type":"fn() -> [sap.ui.core.Control]","!category":"function","!static":false},"removeAllTreeHeaderControls":{"!description":"Removes all the controls from the aggregation {@link #getTreeHeaderControls treeHeaderControls}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Control]","!category":"function","!static":false},"getShowViewport":{"!description":"Gets current value of property {@link #getShowViewport showViewport}.\n\nControls whether the viewport will be shown for this panel.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"removeTitleControl":{"!description":"Removes a titleControl from the aggregation {@link #getTitleControls titleControls}.","!type":"fn(vTitleControl: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vTitleControl":"type: int|string|sap.ui.core.Control, description: The titleControl to remove or its index or id"},"!static":false},"!module":"sap/ui/vtm/Panel","getTree":{"!description":"Gets the tree owned by this panel.","!type":"fn() -> sap.ui.vtm.Tree","!category":"function","!static":false},"getTitle":{"!description":"Gets current value of property {@link #getTitle title}.\n\nThe text to show in the title bar for this panel.","!type":"fn() -> String","!category":"function","!static":false},"attachContextMenu":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:contextMenu contextMenu} event of this <code>sap.ui.vtm.Panel<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Panel<\/code> itself.\n\nRaised when the web browser <code>contextmenu<\/code> event is raised. To prevent the default browser context menu from being shown call preventDefault() on the event.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Panel","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Panel<\/code> itself"},"!static":false},"!constructorDescription":"Constructor for a new Panel.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getTitle title} : string<\/li>\n<li>{@link #getShowViewport showViewport} : boolean (default: true)<\/li>\n<li>{@link #getTreeWidth treeWidth} : sap.ui.core.CSSSize (default: 50%)<\/li>\n<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: inherit)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getTitleControls titleControls} : sap.ui.core.Control[]<\/li>\n<li>{@link #getTreeHeaderControls treeHeaderControls} : sap.ui.core.Control[]<\/li>\n<li>{@link #getViewportHeaderControls viewportHeaderControls} : sap.ui.core.Control[]<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getVtmId vtmId} : (sap.ui.core.ID | sap.ui.vtm.Vtm)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:contextMenu contextMenu} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","getVtm":{"!description":"Gets the {@link sap.ui.vtm.Vtm} instance that owns this panel.","!type":"fn() -> sap.ui.vtm.Vtm","!category":"function","!static":false},"indexOfTreeHeaderControl":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getTreeHeaderControls treeHeaderControls}. and returns its index if found or -1 otherwise.","!type":"fn(oTreeHeaderControl: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oTreeHeaderControl":"type: sap.ui.core.Control, description: The treeHeaderControl whose index is looked for"},"!static":false},"destroyTitleControls":{"!description":"Destroys all the titleControls in the aggregation {@link #getTitleControls titleControls}.","!type":"fn() -> sap.ui.vtm.Panel","!category":"function","!static":false},"insertTitleControl":{"!description":"Inserts a titleControl into the aggregation {@link #getTitleControls titleControls}.","!type":"fn(oTitleControl: sap.ui.core.Control, iIndex: Number) -> sap.ui.vtm.Panel","!category":"function","parameters":{"oTitleControl":"type: sap.ui.core.Control, description: The titleControl to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the titleControl should be inserted at; for a negative value of <code>iIndex<\/code>, the titleControl is inserted at position 0; for a value greater than the current size of the aggregation, the titleControl is inserted at the last position"},"!static":false},"setTitle":{"!description":"Sets the panel title.","!type":"fn(title: String) -> sap.ui.vtm.Panel","!category":"function","parameters":{"title":"type: string, description: The panel title text"},"!static":false},"setHeight":{"!description":"Sets a new value for property {@link #getHeight height}.\n\nThe height of the panel.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>inherit<\/code>.","!type":"fn(sHeight: sap.ui.core.CSSSize) -> sap.ui.vtm.Panel","!category":"function","parameters":{"sHeight":"type: sap.ui.core.CSSSize, description: New value for property <code>height<\/code>"},"!static":false},"indexOfTitleControl":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getTitleControls titleControls}. and returns its index if found or -1 otherwise.","!type":"fn(oTitleControl: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oTitleControl":"type: sap.ui.core.Control, description: The titleControl whose index is looked for"},"!static":false},"insertViewportHeaderControl":{"!description":"Inserts a viewportHeaderControl into the aggregation {@link #getViewportHeaderControls viewportHeaderControls}.","!type":"fn(oViewportHeaderControl: sap.ui.core.Control, iIndex: Number) -> sap.ui.vtm.Panel","!category":"function","parameters":{"oViewportHeaderControl":"type: sap.ui.core.Control, description: The viewportHeaderControl to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the viewportHeaderControl should be inserted at; for a negative value of <code>iIndex<\/code>, the viewportHeaderControl is inserted at position 0; for a value greater than the current size of the aggregation, the viewportHeaderControl is inserted at the last position"},"!static":false},"fireInitialized":{"!description":"Fires event {@link #event:initialized initialized} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Panel","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.core.Control","getTitleControls":{"!description":"Gets content of aggregation {@link #getTitleControls titleControls}.\n\nThe set of controls to render in the title bar area.","!type":"fn() -> [sap.ui.core.Control]","!category":"function","!static":false},"destroyViewportHeaderControls":{"!description":"Destroys all the viewportHeaderControls in the aggregation {@link #getViewportHeaderControls viewportHeaderControls}.","!type":"fn() -> sap.ui.vtm.Panel","!category":"function","!static":false},"removeTreeHeaderControl":{"!description":"Removes a treeHeaderControl from the aggregation {@link #getTreeHeaderControls treeHeaderControls}.","!type":"fn(vTreeHeaderControl: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vTreeHeaderControl":"type: int|string|sap.ui.core.Control, description: The treeHeaderControl to remove or its index or id"},"!static":false},"getViewport":{"!description":"Gets the viewport owned by this panel.","!type":"fn() -> sap.ui.vtm.Viewport","!category":"function","!static":false},"fireContextMenu":{"!description":"Fires event {@link #event:contextMenu contextMenu} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!type":"fn(mParameters?: Object) -> Boolean","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"getHeight":{"!description":"Gets current value of property {@link #getHeight height}.\n\nThe height of the panel.\n\nDefault value is <code>inherit<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"detachInitialized":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:initialized initialized} event of this <code>sap.ui.vtm.Panel<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Panel","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getTreeHeaderControls":{"!description":"Gets content of aggregation {@link #getTreeHeaderControls treeHeaderControls}.\n\nThe set of controls to render in the tree header area.","!type":"fn() -> [sap.ui.core.Control]","!category":"function","!static":false},"!category":"class","getTreeWidth":{"!description":"Gets current value of property {@link #getTreeWidth treeWidth}.\n\nThe width of the tree.\n\nDefault value is <code>50%<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"setTreeWidth":{"!description":"Sets a new value for property {@link #getTreeWidth treeWidth}.\n\nThe width of the tree.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>50%<\/code>.","!type":"fn(sTreeWidth: sap.ui.core.CSSSize) -> sap.ui.vtm.Panel","!category":"function","parameters":{"sTreeWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>treeWidth<\/code>"},"!static":false},"addTreeHeaderControl":{"!description":"Adds some treeHeaderControl to the aggregation {@link #getTreeHeaderControls treeHeaderControls}.","!type":"fn(oTreeHeaderControl: sap.ui.core.Control) -> sap.ui.vtm.Panel","!category":"function","parameters":{"oTreeHeaderControl":"type: sap.ui.core.Control, description: The treeHeaderControl to add; if empty, nothing is inserted"},"!static":false},"insertTreeHeaderControl":{"!description":"Inserts a treeHeaderControl into the aggregation {@link #getTreeHeaderControls treeHeaderControls}.","!type":"fn(oTreeHeaderControl: sap.ui.core.Control, iIndex: Number) -> sap.ui.vtm.Panel","!category":"function","parameters":{"iIndex":"type: int, description: The <code>0<\/code>-based index the treeHeaderControl should be inserted at; for a negative value of <code>iIndex<\/code>, the treeHeaderControl is inserted at position 0; for a value greater than the current size of the aggregation, the treeHeaderControl is inserted at the last position","oTreeHeaderControl":"type: sap.ui.core.Control, description: The treeHeaderControl to insert; if empty, nothing is inserted"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Panel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"detachContextMenu":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:contextMenu contextMenu} event of this <code>sap.ui.vtm.Panel<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Panel","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"addViewportHeaderControl":{"!description":"Adds some viewportHeaderControl to the aggregation {@link #getViewportHeaderControls viewportHeaderControls}.","!type":"fn(oViewportHeaderControl: sap.ui.core.Control) -> sap.ui.vtm.Panel","!category":"function","parameters":{"oViewportHeaderControl":"type: sap.ui.core.Control, description: The viewportHeaderControl to add; if empty, nothing is inserted"},"!static":false},"removeViewportHeaderControl":{"!description":"Removes a viewportHeaderControl from the aggregation {@link #getViewportHeaderControls viewportHeaderControls}.","!type":"fn(vViewportHeaderControl: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vViewportHeaderControl":"type: int|string|sap.ui.core.Control, description: The viewportHeaderControl to remove or its index or id"},"!static":false},"getVtmId":{"!description":"ID of the element which is the current target of the association {@link #getVtmId vtmId}, or <code>null<\/code>.","!type":"fn() -> sap.ui.core.ID","!category":"function","!static":false},"addTitleControl":{"!description":"Adds some titleControl to the aggregation {@link #getTitleControls titleControls}.","!type":"fn(oTitleControl: sap.ui.core.Control) -> sap.ui.vtm.Panel","!category":"function","parameters":{"oTitleControl":"type: sap.ui.core.Control, description: The titleControl to add; if empty, nothing is inserted"},"!static":false},"getIsActive":{"!description":"Gets whether this is the active {@link sap.ui.vtm.Panel}.","!type":"fn() -> Boolean","!category":"function","!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","destroyTreeHeaderControls":{"!description":"Destroys all the treeHeaderControls in the aggregation {@link #getTreeHeaderControls treeHeaderControls}.","!type":"fn() -> sap.ui.vtm.Panel","!category":"function","!static":false},"attachInitialized":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:initialized initialized} event of this <code>sap.ui.vtm.Panel<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Panel<\/code> itself.\n\nRaised when the panel is initialized.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Panel","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Panel<\/code> itself"},"!static":false},"removeAllViewportHeaderControls":{"!description":"Removes all the controls from the aggregation {@link #getViewportHeaderControls viewportHeaderControls}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Control]","!category":"function","!static":false},"removeAllTitleControls":{"!description":"Removes all the controls from the aggregation {@link #getTitleControls titleControls}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Control]","!category":"function","!static":false},"indexOfViewportHeaderControl":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getViewportHeaderControls viewportHeaderControls}. and returns its index if found or -1 otherwise.","!type":"fn(oViewportHeaderControl: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oViewportHeaderControl":"type: sap.ui.core.Control, description: The viewportHeaderControl whose index is looked for"},"!static":false},"setShowViewport":{"!description":"Sets a new value for property {@link #getShowViewport showViewport}.\n\nControls whether the viewport will be shown for this panel.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bShowViewport: Boolean) -> sap.ui.vtm.Panel","!category":"function","parameters":{"bShowViewport":"type: boolean, description: New value for property <code>showViewport<\/code>"},"!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.Panel.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.vtm.SceneNode":{"getScene":{"!description":"Gets current value of property {@link #getScene scene}.\n\nThe {@link sap.ui.vtm.Scene} for the scene node.","!type":"fn() -> Object","!category":"function","!static":false},"getClosed":{"!description":"Gets whether this scene node is closed. When a scene node is closed, the closed scene node and its descendants are treated as a single scene node (at least in terms of selection).","!type":"fn() -> Boolean","!category":"function","!static":false},"getNodeMetadata":{"!description":"Gets a plain JavaScript object map of metadata values. <p>Keys are in the form: <code>'{\"category\":\"SAP\",\"field\":\"MATERIAL\"}'<\/code>.<\/p> <p>Values are in the form of strings or arrays of strings.<\/p>","!type":"fn() -> Object","!category":"function","!static":false},"getRelativeMatrix":{"!description":"Gets the relative transformation matrix that applies to the scene node in ISO 10303-42 format.","!type":"fn() -> sap.ui.vtm.Matrix","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.SceneNode with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"setAbsoluteMatrix":{"!description":"Sets the absolute transformation matrix that applies to the scene node in ISO 10303-42 format.","!type":"fn(matrix: sap.ui.vtm.Matrix) -> sap.ui.vtm.SceneNode","!category":"function","parameters":{"matrix":"type: sap.ui.vtm.Matrix, description: The absolute transformation matrix that applies to the scene node in ISO 10303-42 format."},"!static":false},"!constructorDescription":"This class is not intended to be directly instantiated by application code.\nThe scene traversal methods ({@link sap.ui.vtm.Scene#traverseTree traverseTree}, {@link sap.ui.vtm.Scene#traverseBranch traverseBranch}, {@link sap.ui.vtm.Scene#traverseNodes traverseNodes}) should be used to access scene nodes\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSceneNodeId sceneNodeId} : string<\/li>\n<li>{@link #getScene scene} : object<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/vtm/SceneNode","getAbsoluteMatrix":{"!description":"Gets the absolute transformation matrix that applies to the scene node in ISO 10303-42 format.","!type":"fn() -> sap.ui.vtm.Matrix","!category":"function","!static":false},"getSceneNodeId":{"!description":"Gets current value of property {@link #getSceneNodeId sceneNodeId}.\n\nThe scene node id.\n\nThis is a transient identifier that exists in the context of the current scene. It should not be persisted.","!type":"fn() -> String","!category":"function","!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","setRelativeMatrix":{"!description":"Sets the relative transformation matrix that applies to the scene node in ISO 10303-42 format.","!type":"fn(matrix: sap.ui.vtm.Matrix) -> sap.ui.vtm.SceneNode","!category":"function","parameters":{"matrix":"type: sap.ui.vtm.Matrix, description: The relative transformation matrix that applies to the scene node in ISO 10303-42 format."},"!static":false},"getIdentifiers":{"!description":"Gets a plain JavaScript object map of identifier values. <p>Keys are in the form: <code>['{\"source\":\"SAP\",\"type\":\"VE_COMPONENT\"}'<\/code>.<\/p> <p>Values are strings or arrays of strings in the form: <code>'[{\"name\":\"ID\", \"value\":\"_moto_x_asm\"},{\"name\":\"version\", \"value\": \"00\"},{\"name\": \"timestamp\", \"value\":\"2016-05-18 03:44:53.93\"}]'<\/code>.<\/p>","!type":"fn() -> Object","!category":"function","!static":false},"getName":{"!description":"Gets the name of the scene node.","!type":"fn() -> String","!category":"function","!static":false},"!category":"class","setScene":{"!description":"Sets a new value for property {@link #getScene scene}.\n\nThe {@link sap.ui.vtm.Scene} for the scene node.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(oScene: Object) -> sap.ui.vtm.SceneNode","!category":"function","parameters":{"oScene":"type: object, description: New value for property <code>scene<\/code>"},"!static":false},"setSceneNodeId":{"!description":"Sets a new value for property {@link #getSceneNodeId sceneNodeId}.\n\nThe scene node id.\n\nThis is a transient identifier that exists in the context of the current scene. It should not be persisted.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sSceneNodeId: String) -> sap.ui.vtm.SceneNode","!category":"function","parameters":{"sSceneNodeId":"type: string, description: New value for property <code>sceneNodeId<\/code>"},"!static":false},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.core.Element","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.SceneNode.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.vtm.PredefinedView":{"Right":{"!description":"The view from the right.","!type":"String","!category":"enum"},"Bottom":{"!description":"The view from the bottom.","!type":"String","!category":"enum"},"Top":{"!description":"The view from the top.","!type":"String","!category":"enum"},"Front":{"!description":"The view from the front.","!type":"String","!category":"enum"},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","!module":"sap/ui/vtm/PredefinedView","Left":{"!description":"The view from the left.","!type":"String","!category":"enum"},"Back":{"!description":"The view from the back.","!type":"String","!category":"enum"}},"sap.ui.vtm.extensions.MessageStatusIconClickExtension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.MessageStatusIconClickExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.vtm.extensions.MessageStatusIconClickExtension"},"sap.ui.vtm.Scene":{"fireDownloadStarted":{"!description":"Fires event {@link #event:downloadStarted downloadStarted} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"attachDownloadProgress":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:downloadProgress downloadProgress} event of this <code>sap.ui.vtm.Scene<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Scene<\/code> itself.\n\nRaised to indicate download progress of a viewable while viewables are being downloaded","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Scene<\/code> itself"},"!static":false},"fireLoadCompleted":{"!description":"Fires event {@link #event:loadCompleted loadCompleted} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"attachDownloadCompleted":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:downloadCompleted downloadCompleted} event of this <code>sap.ui.vtm.Scene<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Scene<\/code> itself.\n\nRaised when viewables have been downloaded (successfully or unsuccessfully) as a result of a call to {@link #loadViewablesAsync}.\n\nIf no viewables have been successfully downloaded, none of the viewables will be loaded, so no subsequent {@link sap.ui.vtm.Scene.loadStarted}, {@link sap.ui.vtm.Scene.loadProgress} or {@link sap.ui.vtm.Scene.loadCompleted} will occur as a result of the call to {@link #loadViewablesAsync} that resulted in the {@link sap.ui.vtm.Scene.downloadCompleted} event being raised.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Scene<\/code> itself"},"!static":false},"fireHierarchyChanged":{"!description":"Fires event {@link #event:hierarchyChanged hierarchyChanged} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"attachLoadProgress":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:loadProgress loadProgress} event of this <code>sap.ui.vtm.Scene<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Scene<\/code> itself.\n\nRaised to provide progress information for a viewable that is being loaded.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Scene<\/code> itself"},"!static":false},"deleteNode":{"!description":"Deletes a node from the scene.","!type":"fn(nodeId: String) -> sap.ui.vtm.Scene","!category":"function","parameters":{"nodeId":"type: string, description: The ID of the node to delete."},"!static":false},"!module":"sap/ui/vtm/Scene","getParentId":{"!description":"Gets the scene node ID of the parent node of the specified scene node or null if the specified scene node is a root scene node.","!type":"fn(sceneNodeId: String) -> String | null","!category":"function","parameters":{"sceneNodeId":"type: string, description: The scene node to find the parent of."},"!static":false},"detachLoadProgress":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:loadProgress loadProgress} event of this <code>sap.ui.vtm.Scene<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getDownloadedViewables":{"!description":"Gets the set of downloaded viewables.","!type":"fn() -> [sap.ui.vtm.Viewable]","!category":"function","!static":false},"getViewableLoadInfos":{"!description":"Gets the set of {@link sap.ui.vtm.ViewableLoadInfo} objects that describe the status of each {@link sap.ui.vtm.Viewable} that has been passed to a {@link #loadViewablesAsyc} call made on this {@link sap.ui.vtm.Scene} instance.","!type":"fn() -> [sap.ui.vtm.ViewableLoadInfo]","!category":"function","!static":false},"getChildIds":{"!description":"Gets the scene node IDs of the children of the specified scene node.","!type":"fn(sceneNodeId: String) -> [String]","!category":"function","parameters":{"sceneNodeId":"type: string, description: The scene node to find the children of."},"!static":false},"traverseNodes":{"!description":"Traverses a set of scene nodes specified by scene node ID, calling a function on each scene node.","!type":"fn(sceneNodeIds: [String | String], callback: fn()) -> sap.ui.vtm.Scene","!category":"function","parameters":{"callback":"type: function, description: The function to apply to the traversed scene nodes.<br/> The function takes two parameters.<br/> The first parameter to the function is of type {@link sap.ui.vtm.SceneNode}. The second parameter to the function is the zero based index of the current scene node in the traversal. Traversal stops if the function returns <code>false<\/code>.","sceneNodeIds":"type: string|string[], description: The IDs of the scene nodes to traverse."},"!static":false},"getLoadedViewables":{"!description":"Gets the set of loaded viewables.","!type":"fn() -> [sap.ui.vtm.Viewable]","!category":"function","!static":false},"!category":"class","detachLoadCompleted":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:loadCompleted loadCompleted} event of this <code>sap.ui.vtm.Scene<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"fireDownloadCompleted":{"!description":"Fires event {@link #event:downloadCompleted downloadCompleted} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"attachLoadCompleted":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:loadCompleted loadCompleted} event of this <code>sap.ui.vtm.Scene<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Scene<\/code> itself.\n\nRaised when all viewables specified in a call to {@link #loadViewablesAsync} have either loaded or failed to load.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Scene<\/code> itself"},"!static":false},"attachHierarchyChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:hierarchyChanged hierarchyChanged} event of this <code>sap.ui.vtm.Scene<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Scene<\/code> itself.\n\nRaised when the scene hierarchy has been modified.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Scene<\/code> itself"},"!static":false},"getAncestorIds":{"!description":"Gets the scene node IDs of the ancestors of the specified scene node. The root scene node is the first item in the array and the parent is the last.","!type":"fn(sceneNodeId: String) -> [String]","!category":"function","parameters":{"sceneNodeId":"type: string, description: The scene node to find the ancestors of."},"!static":false},"cloneNode":{"!description":"Clones a scene node.","!type":"fn(nodeIdToClone: String, parentNodeId: String, insertBeforeNodeId: String, name: String, recursive: Boolean) -> String","!category":"function","parameters":{"insertBeforeNodeId":"type: string, description: The created node is added before this specified node. If <code>null<\/code> the newly created node is added at the end of the parent's list of nodes.","parentNodeId":"type: string, description: The ID of the node that will be the parent of the created node. If <code>null<\/code> the newly created node is a top level node.","recursive":"type: boolean, description: If <code>true<\/code>, the descendants of the scene node will also be cloned. Defaults to <code>true<\/code>.","nodeIdToClone":"type: string, description: The ID of the node to clone.","name":"type: string, description: The name of the new node."},"!static":false},"getDescendantIds":{"!description":"Gets the scene node IDs of the descendants of the specified scene node.","!type":"fn(sceneNodeId: String) -> [String]","!category":"function","parameters":{"sceneNodeId":"type: string, description: The scene node to find the descendants of."},"!static":false},"detachDownloadCompleted":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:downloadCompleted downloadCompleted} event of this <code>sap.ui.vtm.Scene<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"attachLoadStarted":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:loadStarted loadStarted} event of this <code>sap.ui.vtm.Scene<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Scene<\/code> itself.\n\nRaised when starting to load a set of viewables.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Scene<\/code> itself"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Scene with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"traverseBranch":{"!description":"Recursively traverses a scene tree branch calling a function on each scene node.\n\nDoes not traverse the descendants of closed nodes.","!type":"fn(sceneNodeId: String, callback: fn()) -> sap.ui.vtm.Scene","!category":"function","parameters":{"sceneNodeId":"type: string, description: The ID of the scene node that represents the root of the branch to traverse.","callback":"type: function, description: The function to apply to the traversed scene nodes.<br/> The first parameter to the callback function is of type {@link sap.ui.vtm.SceneNode}.<br/> The second parameter to the callback function is an array of IDs of ancestors of the scene node being processed.<br/> When the function returns <code>false<\/code>, the descendants of the scene node passed as the parameter are not traversed."},"!static":false},"traverseTree":{"!description":"Recursively traverses the scene tree calling a function on each scene node.","!type":"fn(callback: fn()) -> sap.ui.vtm.Scene","!category":"function","parameters":{"callback":"type: function, description: The function to apply to the traversed scene nodes. The first parameter to the callback function is of type {@link sap.ui.vtm.SceneNode}.<br/> The second parameter to the callback function is an array of IDs of ancestors of the scene node being processed.<br/> When the function returns <code>false<\/code>, the descendants of the scene node passed as the parameter are not traversed."},"!static":false},"detachDownloadStarted":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:downloadStarted downloadStarted} event of this <code>sap.ui.vtm.Scene<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getVtm":{"!description":"Gets the {@link sap.ui.vtm.Vtm} instance that owns this scene.","!type":"fn() -> sap.ui.vtm.Vtm","!category":"function","!static":false},"getAllIds":{"!description":"Gets the scene node IDs of all the scene nodes in the scene.","!type":"fn() -> [String]","!category":"function","!static":false},"!constructorDescription":"This class is not intended to be directly instantiated by application code.\nA {@link sap.ui.vtm.Scene} object is created when a {@link sap.ui.vtm.Vtm} object is created.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Events\n<ul>\n<li>{@link #event:downloadProgress downloadProgress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:downloadStarted downloadStarted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:downloadCompleted downloadCompleted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:loadStarted loadStarted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:loadProgress loadProgress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:loadCompleted loadCompleted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:hierarchyChanged hierarchyChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","attachDownloadStarted":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:downloadStarted downloadStarted} event of this <code>sap.ui.vtm.Scene<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Scene<\/code> itself.\n\nRaised when starting a download of a set of viewables.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Scene<\/code> itself"},"!static":false},"detachHierarchyChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:hierarchyChanged hierarchyChanged} event of this <code>sap.ui.vtm.Scene<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"fireDownloadProgress":{"!description":"Fires event {@link #event:downloadProgress downloadProgress} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"fireLoadProgress":{"!description":"Fires event {@link #event:loadProgress loadProgress} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","createNode":{"!description":"Creates a scene node.","!type":"fn(parentNodeId: String, insertBeforeNodeId: String, name: String) -> String","!category":"function","parameters":{"insertBeforeNodeId":"type: string, description: The created node is added before this specified node. If <code>null<\/code> the newly created node is added at the end of the parent's list of nodes.","parentNodeId":"type: string, description: The ID of the node that will be the parent of the created node. If <code>null<\/code> the newly created node is a top level node.","name":"type: string, description: The name of the new node."},"!static":false},"getCachedIds":{"!description":"Gets set of all scene node IDs in the scene that have been discovered via scene traversal performed by the application.\n\nAccurate population of this value requires application support (whereas {@link #getAllIds} always returns the exact set of all scene nodes in the scene).\n\nScene node IDs are added to this set as they are discovered through methods the application calls: <ul> <li>{@link #getAllIds}<\/li> <li>{@link #getRootIds}<\/li> <li>{@link #getParentIds}<\/li> <li>{@link #getAncestorIds}<\/li> <li>{@link #getChildIds}<\/li> <li>{@link #getDescendantIds}<\/li> <\/ul>\n\nThe methods above are also used by the following methods: <ul> <li>{@link #traverseTree}<\/li> <li>{@link #traverseBranch}<\/li> <\/ul>\n\nAll of the scene nodes that have been traversed by these traversal methods will be included in the cached set. If during a call to {@link #traverseTree} or {@link #traverseBranch} the application stops traversal of a particular branch of the scene tree by returning <code>false<\/code> in the callback for a particular scene node, the application can call {@link #getDescendantIds} for that scene node to ensure that all the scene node IDs for the descendants of that scene node are included in the set of cached IDs.\n\nScene nodes are also added/removed from the to the cached set as required when the following methods are called: <li>{@link #createNode}<\/li> <li>{@link #cloneNode}<\/li> <li>{@link #deleteNode}<\/li> <\/ul>\n\nIf this method is called before any scene traversal has occurred, it populates the set of cached scene node IDs using {@link #getAllIds}.","!type":"fn() -> [String]","!category":"function","!static":false},"loadViewablesAsync":{"!description":"Load a set of viewables asynchronously. Progress is indicated by the <code>progress<\/code> event and completion is indicated by the <code>loadComplete<\/code> event.","!type":"fn(viewables: [sap.ui.vtm.Viewable | sap.ui.vtm.Viewable]) -> sap.ui.vtm.Scene","!category":"function","parameters":{"viewables":"type: sap.ui.vtm.Viewable|sap.ui.vtm.Viewable[], description: The set of viewables to load."},"!static":false},"detachLoadStarted":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:loadStarted loadStarted} event of this <code>sap.ui.vtm.Scene<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"detachDownloadProgress":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:downloadProgress downloadProgress} event of this <code>sap.ui.vtm.Scene<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getRootIds":{"!description":"Gets the IDs of the the root scene nodes.","!type":"fn() -> [String]","!category":"function","!static":false},"fireLoadStarted":{"!description":"Fires event {@link #event:loadStarted loadStarted} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Scene","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.Scene.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.core.Element","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.MessagesPopover":{"setMessages":{"!description":"Sets a new value for property {@link #getMessages messages}.\n\nThe set of {@link sap.ui.core.Message} objects to display.\n\nOnly the following properties of each message will be used: <ul> <li><code>level<\/code><\/li> <li><code>text<\/code><\/li> <li><code>icon<\/code><\/li> <\/ul>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sMessages: [Object]) -> sap.ui.vtm.MessagesPopover","!category":"function","parameters":{"sMessages":"type: object[], description: New value for property <code>messages<\/code>"},"!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","setMaxHeight":{"!description":"Sets a new value for property {@link #getMaxHeight maxHeight}.\n\nMaximum height of status window.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sMaxHeight: sap.ui.core.CSSSize) -> sap.ui.vtm.MessagesPopover","!category":"function","parameters":{"sMaxHeight":"type: sap.ui.core.CSSSize, description: New value for property <code>maxHeight<\/code>"},"!static":false},"getMaxHeight":{"!description":"Gets current value of property {@link #getMaxHeight maxHeight}.\n\nMaximum height of status window.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.MessagesPopover with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.m.Popover.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","!constructorDescription":"Constructor for a new MessagesPopover.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getMessages messages} : object[]<\/li>\n<li>{@link #getMaxHeight maxHeight} : sap.ui.core.CSSSize<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.m.Popover#constructor sap.m.Popover}\ncan be used as well.","!module":"sap/ui/vtm/MessagesPopover","getMessages":{"!description":"Gets current value of property {@link #getMessages messages}.\n\nThe set of {@link sap.ui.core.Message} objects to display.\n\nOnly the following properties of each message will be used: <ul> <li><code>level<\/code><\/li> <li><code>text<\/code><\/li> <li><code>icon<\/code><\/li> <\/ul>","!type":"fn() -> [Object]","!category":"function","!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.MessagesPopover.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.m.Popover","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm":{"displayStatesBySceneNodeId":{"!description":"A plain object map that uses scene node id as the key and a display state object as the value. The display state is a plain JavaScript object that can contain the following properties: <ul> <li>visibility - If defined, this boolean value specifies the scene node visibility<\/li> <li>opacity - If defined, this numeric value between 0 and 100 inclusive defines the scene node opacity.<br/> <\/li> <li>highlightColor - If defined, this string value defines the scene node highlight color.<\/li> If an empty string (<code>\"\"<\/code>) is used, the highlight color is cleared, otherwise the value is expected to be a {@link sap.ui.core.CSSColor}.<\/li> <li>recursive - If <code>true<\/code> this display state will be applied to the scene node and its descendants.<\/li> <\/ul> For example: <code><pre>\n{\n  visibility: true,\n  opacity: 100,\n  highlightColor: \"red\",\n  recursive: false\n}<\/pre><\/code> Display state objects can be reused multiple times in the map to reduce memory usage.","!type":"Object","!category":"enum"},"TreeItemType":"sap.ui.vtm.TreeItemType","sceneNodeId":{"!description":"The scene node id.\n\nThis is a transient identifier that exists in the context of the current scene. It should not be persisted.","!type":"String","!category":"enum"},"Matrix":"sap.ui.vtm.Matrix","TextColor":"sap.ui.vtm.TextColor","!module":"sap/ui/vtm/library","extensions":"sap.ui.vtm.extensions","errorText":{"!description":"The error text describing why the Viewable failed to load. This is an untranslated technical message. Use when {@link #getSucceeded} returns false.","!type":"String","!category":"enum"},"contentHeight":{"!description":"Set the height of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.","!type":"sap.ui.core.CSSSize","!category":"enum"},"tree":{"!description":"The {@link sap.ui.vtm.Tree} that column selection is being performed for.","!type":"Object","!category":"enum"},"interfaces":"sap.ui.vtm.interfaces","TreeItemUtilities":"sap.ui.vtm.TreeItemUtilities","backgroundGradientBottomColor":{"!description":"The background gradient bottom color","!type":"sap.ui.core.CSSColor","!category":"enum"},"resizable":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!type":"Boolean","!category":"enum"},"selectableColumns":{"!description":"The set of columns that should be shown in the dialog that may be selected for display.","!type":"[sap.ui.vtm.Column]","!category":"enum"},"template":{"!description":"If defined, overrides the cell template for the column.<br/> If this is defined, the <code>valueFormatter<\/code> and <code>tooltipFormatter<\/code> properties are ignored.","!type":"sap.ui.core.Control","!category":"enum"},"createVtm":{"!description":"Creates an instance of {@link sap.ui.vtm.Vtm} with a default set of extensions.\n\nThe {@link sap.ui.vtm.Vtm} constructor can be used to create an instance of {@link sap.ui.vtm.Vtm} with a specific set of extensions.","!type":"fn(sId: String, mSettings: Object) -> sap.ui.vtm.Vtm","!category":"function","!static":"true"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!type":"sap.ui.core.BusyIndicatorSize","!category":"enum"},"contentWidth":{"!description":"Set the width of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.","!type":"sap.ui.core.CSSSize","!category":"enum"},"AXIS1Z":{"!description":"The <code>AXIS1Z<code> component.","!type":"Number","!category":"enum","!module":"sap/ui/vtm/MatrixComponent"},"AXIS1Y":{"!description":"The <code>AXIS1Y<code> component.","!type":"Number","!category":"enum","!module":"sap/ui/vtm/MatrixComponent"},"AXIS1X":{"!description":"The <code>AXIS1X<code> component.","!type":"Number","!category":"enum","!module":"sap/ui/vtm/MatrixComponent"},"contentMinWidth":{"!description":"Sets the minimum width of the content area inside popover.","!type":"sap.ui.core.CSSSize","!category":"enum"},"DisplayGroup":"sap.ui.vtm.DisplayGroup_obj","ariaModal":{"!description":"Specifies the aria-modal of the Popover.","!type":"Boolean","!category":"enum"},"scene":{"!description":"The {@link sap.ui.vtm.Scene} for the scene node.","!type":"Object","!category":"enum"},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","placement":{"!description":"This is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferredLeft, sap.m.PlacementType.HorizontalPreferredRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferredTop, sap.m.PlacementType.VerticalPreferredBottom, sap.m.PlacementType.Auto. The default value is sap.m.PlacementType.Right. Setting this property while popover is open won't cause any rerendering of the popover, but it will take effect when it's opened again.","!type":"sap.m.PlacementType","!category":"enum"},"showViewport":{"!description":"Controls whether the viewport will be shown for this panel.","!type":"Boolean","!category":"enum"},"ViewableLoadInfo":"sap.ui.vtm.ViewableLoadInfo_obj","enableScrolling":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.15.0 This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.<br>This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.","!type":"Boolean","!category":"enum"},"descriptor":{"!description":"The descriptor is a JSON string identifying the column.\n\nWhen the type property has a value of {@link sap.ui.vtm.ColumnType.Metadata} the descriptor property has the following form: <code>'{\"category\":\"SAP\",\"field\":\"MATERIAL\"}'<\/code><br> Such descriptors can be constructed using {@link sap.ui.vtm.DescriptorUtilities.createMetadataDescriptor}.\n\nWhen the type property has a value of {@link sap.ui.vtm.ColumnType.Identifier} the descriptor property has the following form: <code>'{\"source\":\"SAP\",\"type\":\"VE_COMPONENT\"}'<\/code><br> Such descriptors can be constructed using {@link sap.ui.vtm.DescriptorUtilities.createIdentifierDescriptor}.\n\nWhen the type property has a value of {@link sap.ui.vtm.ColumnType.AppData} the descriptor property has the following form: <code>'bomId'<\/code>","!type":"String","!category":"enum"},"tooltipFormatter":{"!description":"If defined, this is a function that specifies the formatting of cell content tooltips for this column (overriding the default behaviour).<br/> Not used if a custom template is specified.<br/> The function must return a string containing the text to display in the tooltip (or null) for a given tree item.<br/> The first parameter to the function (which may not always be defined) is the tree item for the tree table row.","!type":"Object","!category":"enum"},"progressText":{"!description":"The text to display in the progress dialog.","!type":"String","!category":"enum"},"messages":{"!description":"The set of {@link sap.ui.core.Message} objects to display.\n\nOnly the following properties of each message will be used: <ul> <li><code>level<\/code><\/li> <li><code>text<\/code><\/li> <li><code>icon<\/code><\/li> <\/ul>","!type":"[Object]","!category":"enum"},"rootNodeIds":{"!description":"The root scene node IDs for this viewable.","!type":"[String]","!category":"enum"},"PredefinedView":"sap.ui.vtm.PredefinedView","horizontalScrolling":{"!description":"This property indicates if user can scroll horizontally inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly. Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.","!type":"Boolean","!category":"enum"},"MessagesPopover":"sap.ui.vtm.MessagesPopover_obj","Panel":"sap.ui.vtm.Panel_obj","title":{"!description":"The text to show in the title bar for this panel.","!type":"String","!category":"enum"},"AXIS2Z":{"!description":"The <code>AXIS2Z<code> component.","!type":"Number","!category":"enum","!module":"sap/ui/vtm/MatrixComponent"},"AXIS2Y":{"!description":"The <code>AXIS2Y<code> component.","!type":"Number","!category":"enum","!module":"sap/ui/vtm/MatrixComponent"},"Tree":"sap.ui.vtm.Tree_obj","!category":"namespace","AXIS2X":{"!description":"The <code>AXIS2X<code> component.","!type":"Number","!category":"enum","!module":"sap/ui/vtm/MatrixComponent"},"modal":{"!description":"If the popover will not be closed when tapping outside the popover. It also blocks any interaction with the background. The default value is false.","!type":"Boolean","!category":"enum"},"percentComplete":{"!description":"The percentage (0-100) to show in the progress bar (if visible).","!type":"Number","!category":"enum"},"SCALE":{"!description":"The <code>SCALE<code> component (there is only one scale component for all axes).","!type":"Number","!category":"enum","!module":"sap/ui/vtm/MatrixComponent"},"SelectColumnsDialog":"sap.ui.vtm.SelectColumnsDialog_obj","ArrayUtilities":"sap.ui.vtm.ArrayUtilities","!description":"<strong style=\"color: red;\">Experimental! <\/strong>","Viewable":"sap.ui.vtm.Viewable_obj","AXIS3Z":{"!description":"The <code>AXIS3Z<code> component.","!type":"Number","!category":"enum","!module":"sap/ui/vtm/MatrixComponent"},"showArrow":{"!description":"Whether Popover arrow should be visible","!type":"Boolean","!category":"enum"},"errorCode":{"!description":"The error code describing why the Viewable failed to load.\n\nUse when {@link #getSucceeded} returns false.","!type":"String","!category":"enum"},"AXIS3Y":{"!description":"The <code>AXIS3Y<code> component.","!type":"Number","!category":"enum","!module":"sap/ui/vtm/MatrixComponent"},"AXIS3X":{"!description":"The <code>AXIS3X<code> component.","!type":"Number","!category":"enum","!module":"sap/ui/vtm/MatrixComponent"},"MatrixUtilities":"sap.ui.vtm.MatrixUtilities","fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!type":"[String]","!category":"enum"},"SelectionMode":"sap.ui.vtm.SelectionMode","visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!type":"Boolean","!category":"enum"},"offsetY":{"!description":"The offset for the popover placement in the y axis. It's with unit pixel.","!type":"Number","!category":"enum"},"offsetX":{"!description":"The offset for the popover placement in the x axis. It's with unit pixel.","!type":"Number","!category":"enum"},"busy":{"!description":"Whether the control is currently in busy state.","!type":"Boolean","!category":"enum"},"type":{"!description":"The type of column.","!type":"sap.ui.vtm.ColumnType","!category":"enum"},"LOCZ":{"!description":"The <code>LOCZ<code> (Z axis translation) component.","!type":"Number","!category":"enum","!module":"sap/ui/vtm/MatrixComponent"},"LOCY":{"!description":"The <code>LOCY<code> (Y axis translation) component.","!type":"Number","!category":"enum","!module":"sap/ui/vtm/MatrixComponent"},"Column":"sap.ui.vtm.Column_obj","bounce":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.42 This parameter is obsolete and has no effect.<br>Whether bouncing is enabled.","!type":"Boolean","!category":"enum"},"LOCX":{"!description":"The <code>LOCX<code> (X axis translation) component.","!type":"Number","!category":"enum","!module":"sap/ui/vtm/MatrixComponent"},"Extension":"sap.ui.vtm.Extension_obj","ChildCollectionType":"sap.ui.vtm.ChildCollectionType","viewable":{"!description":"The {@link sap.ui.vtm.Viewable} this {@link sap.ui.vtm.ViewableLoadInfo} relates to.","!type":"Object","!category":"enum"},"relativeMatrix":{"!description":"The relative transformation matrix to apply to the scene node created to wrap the contents of the loaded viewable.","!type":"sap.ui.vtm.Matrix","!category":"enum"},"height":{"!description":"The height of the panel.","!type":"sap.ui.core.CSSSize","!category":"enum"},"selectionMode":{"!description":"The tree selection mode.","!type":"sap.ui.vtm.SelectionMode","!category":"enum"},"overrideDisplayGroups":{"!description":"Allows the calculated display state of scene nodes in the viewport o be overridden.\n\nA set of {@link sap.ui.vtm.DisplayGroup} objects that each specify the display state for a set of scene nodes. Precedence is inherent in the array ordering. Any display state specified in this way takes precedence over display states specified for geometry associated with tree items or specified using {@link #contextGroups}. Call {@link #refresh} to recalculate the display state in the viewport after modifying override display groups.","!type":"[Object]","!category":"enum"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!type":"Number","!category":"enum"},"titleAlignment":{"!description":"Specifies the Title alignment (theme specific). If set to <code>TitleAlignment.Auto<\/code>, the Title will be aligned as it is set in the theme (if not set, the default value is <code>center<\/code>); Other possible values are <code>TitleAlignment.Start<\/code> (left or right depending on LTR/RTL), and <code>TitleAlignment.Center<\/code> (centered)","!type":"sap.m.TitleAlignment","!category":"enum"},"enabled":{"!description":"Controls whether the extension is enabled.","!type":"Boolean","!category":"enum"},"status":{"!description":"The download/load status of the {@link sap.ui.vtm.Viewable} this {@link sap.ui.vtm.ViewableLoadInfo} relates to.","!type":"sap.ui.vtm.ViewableLoadStatus","!category":"enum"},"width":{"!description":"The width of the tree column.","!type":"sap.ui.core.CSSSize","!category":"enum"},"Scene":"sap.ui.vtm.Scene_obj","label":{"!description":"A textual name for the column. This is also used in the {@link sap.ui.vtm.ColumnSelectionDialog}, so it should be included whether or not the <code>labelControl<\/code> property is used.","!type":"String","!category":"enum"},"maxHeight":{"!description":"Maximum height of status window.","!type":"sap.ui.core.CSSSize","!category":"enum"},"backgroundGradientTopColor":{"!description":"The background gradient top color.","!type":"sap.ui.core.CSSColor","!category":"enum"},"ColumnType":"sap.ui.vtm.ColumnType","valueFormatter":{"!description":"If defined, this is a function that specifies the formatting of cell content text for this column.<br/> The function must return a string containing the text to display in the cell (or null) for a given tree item.<br/> The first parameter to the function (which may not always be defined) is the tree item for the tree table row.","!type":"Object","!category":"enum"},"addDefaultExtensions":{"!description":"When true populates the <code>extensions<\/code> aggregation with the default set of extensions in the default configuration.","!type":"Boolean","!category":"enum"},"DescriptorUtilities":"sap.ui.vtm.DescriptorUtilities","hAlign":{"!description":"The horizontal alignment for the tree column.","!type":"sap.ui.core.HorizontalAlign","!category":"enum"},"HashUtilities":"sap.ui.vtm.HashUtilities","ViewableLoadStatus":"sap.ui.vtm.ViewableLoadStatus","treeWidth":{"!description":"The width of the tree.","!type":"sap.ui.core.CSSSize","!category":"enum"},"InternalColumns":"sap.ui.vtm.InternalColumns","name":{"!description":"The name for this Viewable.","!type":"String","!category":"enum"},"labelControl":{"!description":"A {@link sap.ui.core.Control} that is used in the column header. When specified, this is used in preference to the <code>label<\/code> property as the column header content. However the <code>label<\/code> property should also be specified since it is used in the used in the {@link sap.ui.vtm.ColumnSelectionDialog}.","!type":"Object","!category":"enum"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!type":"Boolean","!category":"enum"},"InternalColumnDescriptor":"sap.ui.vtm.InternalColumnDescriptor","SceneNode":"sap.ui.vtm.SceneNode_obj","verticalScrolling":{"!description":"This property indicates if user can scroll vertically inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly. Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.","!type":"Boolean","!category":"enum"},"ProgressDialog":"sap.ui.vtm.ProgressDialog_obj","Viewport":"sap.ui.vtm.Viewport_obj","Vtm":"sap.ui.vtm.Vtm_obj","source":{"!description":"The source URL (string) or File for this Viewable.","!type":"Object","!category":"enum"},"showHeader":{"!description":"If a header should be shown at the top of the popover.","!type":"Boolean","!category":"enum"},"progressBarVisible":{"!description":"Whether the progress bar is visible.","!type":"Boolean","!category":"enum"},"contextDisplayGroups":{"!description":"Allows the calculated display state for scene nodes whose display state is not determined by tree item associations or override display groups to be specified.\n\nA set of {@link sap.ui.vtm.DisplayGroup} objects objects that describe display states to apply to scene nodes. Precedence is inherent in the array ordering. Call {@link #refresh} to recalculate the display state in the viewport after modifying override display groups.","!type":"[Object]","!category":"enum"},"Lookup":"sap.ui.vtm.Lookup_obj","tooltip":{"!description":"A localized string to show in the column header tooltip. If unspecified, the label value will be used as the column header tooltip.","!type":"String","!category":"enum"}},"sap.ui.vtm.DisplayGroup":{"setDisplayStatesBySceneNodeId":{"!description":"Sets a new value for property {@link #getDisplayStatesBySceneNodeId displayStatesBySceneNodeId}.\n\nA plain object map that uses scene node id as the key and a display state object as the value. The display state is a plain JavaScript object that can contain the following properties: <ul> <li>visibility - If defined, this boolean value specifies the scene node visibility<\/li> <li>opacity - If defined, this numeric value between 0 and 100 inclusive defines the scene node opacity.<br/> <\/li> <li>highlightColor - If defined, this string value defines the scene node highlight color.<\/li> If an empty string (<code>\"\"<\/code>) is used, the highlight color is cleared, otherwise the value is expected to be a {@link sap.ui.core.CSSColor}.<\/li> <li>recursive - If <code>true<\/code> this display state will be applied to the scene node and its descendants.<\/li> <\/ul> For example: <code><pre>\n{\n  visibility: true,\n  opacity: 100,\n  highlightColor: \"red\",\n  recursive: false\n}<\/pre><\/code> Display state objects can be reused multiple times in the map to reduce memory usage.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>[object Object]<\/code>.","!type":"fn(oDisplayStatesBySceneNodeId: Object) -> sap.ui.vtm.DisplayGroup","!category":"function","parameters":{"oDisplayStatesBySceneNodeId":"type: object, description: New value for property <code>displayStatesBySceneNodeId<\/code>"},"!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.vtm.DisplayGroup with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","getDisplayStatesBySceneNodeId":{"!description":"Gets current value of property {@link #getDisplayStatesBySceneNodeId displayStatesBySceneNodeId}.\n\nA plain object map that uses scene node id as the key and a display state object as the value. The display state is a plain JavaScript object that can contain the following properties: <ul> <li>visibility - If defined, this boolean value specifies the scene node visibility<\/li> <li>opacity - If defined, this numeric value between 0 and 100 inclusive defines the scene node opacity.<br/> <\/li> <li>highlightColor - If defined, this string value defines the scene node highlight color.<\/li> If an empty string (<code>\"\"<\/code>) is used, the highlight color is cleared, otherwise the value is expected to be a {@link sap.ui.core.CSSColor}.<\/li> <li>recursive - If <code>true<\/code> this display state will be applied to the scene node and its descendants.<\/li> <\/ul> For example: <code><pre>\n{\n  visibility: true,\n  opacity: 100,\n  highlightColor: \"red\",\n  recursive: false\n}<\/pre><\/code> Display state objects can be reused multiple times in the map to reduce memory usage.\n\nDefault value is <code>[object Object]<\/code>.","!type":"fn() -> Object","!category":"function","!static":false},"!constructorDescription":"Constructor for a new DisplayGroup.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getDisplayStatesBySceneNodeId displayStatesBySceneNodeId} : object (default: [object Object])<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/vtm/DisplayGroup","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.DisplayGroup.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.core.Element","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.extensions.SelectionLinkingExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","getFindMatchingTreeItems":{"!description":"Gets current value of property {@link #getFindMatchingTreeItems findMatchingTreeItems}.\n\nThe value is a callback function that finds tree items in a particular tree that match a given tree item.\n\nThe first parameter is the tree item to match against.<br> The second parameter is the {@link sap.ui.vtm.Tree} containing the specified tree item being matched against.<br> The third parameter is the {@link sap.ui.vtm.Tree} to search for matches in.<br> The function returns an array of tree items that match the specified tree item.","!type":"fn() -> Object","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.SelectionLinkingExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","!constructorDescription":"Constructor for a new SelectionLinkingExtension.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getFindMatchingTreeItems findMatchingTreeItems} : any<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.vtm.Extension#constructor sap.ui.vtm.Extension}\ncan be used as well.","!module":"sap/ui/vtm/extensions/SelectionLinkingExtension","setFindMatchingTreeItems":{"!description":"Sets a new value for property {@link #getFindMatchingTreeItems findMatchingTreeItems}.\n\nThe value is a callback function that finds tree items in a particular tree that match a given tree item.\n\nThe first parameter is the tree item to match against.<br> The second parameter is the {@link sap.ui.vtm.Tree} containing the specified tree item being matched against.<br> The third parameter is the {@link sap.ui.vtm.Tree} to search for matches in.<br> The function returns an array of tree items that match the specified tree item.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(oFindMatchingTreeItems: Object) -> sap.ui.vtm.extensions.SelectionLinkingExtension","!category":"function","parameters":{"oFindMatchingTreeItems":"type: any, description: New value for property <code>findMatchingTreeItems<\/code>"},"!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.extensions.SelectionLinkingExtension.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.vtm.Extension","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.Matrix":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"namespace","!module":"sap/ui/vtm/library","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.interfaces.IMessageStatusHeaderIconClickExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","!module":"sap/ui/vtm/library"},"sap.ui.vtm.InternalColumns":{"createRelativeMatrixColumn":{"!description":"Creates a {@link sap.ui.vtm.InternalColumnDescriptor.RelativeMatrix} column.","!type":"fn() -> sap.ui.vtm.Column","!category":"function","!static":"true"},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","createSceneNodeIdsColumn":{"!description":"Creates a {@link sap.ui.vtm.InternalColumnDescriptor.SceneNodeIds} column.","!type":"fn() -> sap.ui.vtm.Column","!category":"function","!static":"true"},"createVisibilityColumn":{"!description":"Creates a {@link sap.ui.vtm.InternalColumnDescriptor.Visibility} internal column.","!type":"fn() -> sap.ui.vtm.Column","!category":"function","!static":"true"},"createOpacityColumn":{"!description":"Creates an {@link sap.ui.vtm.InternalColumnDescriptor.Opacity} column.","!type":"fn() -> sap.ui.vtm.Column","!category":"function","!static":"true"},"!category":"namespace","createTreeItemIdColumn":{"!description":"Creates a {@link sap.ui.vtm.InternalColumnDescriptor.TreeItemId} column.","!type":"fn() -> sap.ui.vtm.Column","!category":"function","!static":"true"},"createTreeColumn":{"!description":"Creates a {@link sap.ui.vtm.InternalColumnDescriptor.Tree} internal column.","!type":"fn() -> sap.ui.vtm.Column","!category":"function","!static":"true"},"createMessageStatusColumn":{"!description":"Creates a {@link sap.ui.vtm.InternalColumnDescriptor.MessageStatus} internal column.","!type":"fn() -> sap.ui.vtm.Column","!category":"function","!static":"true"},"!module":"sap/ui/vtm/InternalColumns","createAbsoluteMatrixColumn":{"!description":"Creates a {@link sap.ui.vtm.InternalColumnDescriptor.AbsoluteMatrix} column.","!type":"fn() -> sap.ui.vtm.Column","!category":"function","!static":"true"},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.Vtm":{"createPanel":{"!description":"Creates a VTM panel associated with this {@link sap.ui.vtm.Vtm} instance.","!type":"fn(sId: String, mSettings: Object) -> sap.ui.vtm.Panel","!category":"function","parameters":{"mSettings":"type: object, description: The settings to pass to the panel constructor.","sId":"type: string, description: The ID to pass to the panel constructor."},"!static":false},"setActivePanel":{"!description":"Sets the active panel.","!type":"fn(oActivePanel: sap.ui.vtm.Panel) -> sap.ui.vtm.Vtm","!category":"function","parameters":{"oActivePanel":"type: sap.ui.vtm.Panel, description: The active panel."},"!static":false},"getPanels":{"!description":"Gets the set of created panels. Do not modify the returned array.","!type":"fn() -> [sap.ui.vtm.Panel]","!category":"function","!static":false},"removeExtension":{"!description":"Removes a extension from the aggregation {@link #getExtensions extensions}.","!type":"fn(vExtension: Number | String | sap.ui.vtm.Extension) -> sap.ui.vtm.Extension","!category":"function","parameters":{"vExtension":"type: int|string|sap.ui.vtm.Extension, description: The extension to remove or its index or id"},"!static":false},"attachActivePanelChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:activePanelChanged activePanelChanged} event of this <code>sap.ui.vtm.Vtm<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Vtm<\/code> itself.\n\nRaised when the active panel has changed.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Vtm","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Vtm<\/code> itself"},"!static":false},"firePanelAdded":{"!description":"Fires event {@link #event:panelAdded panelAdded} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Vtm","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"getExtensionsByName":{"!description":"Gets the extensions with a specified class name.","!type":"fn(sExtensionName: String) -> [sap.ui.vtm.Extension]","!category":"function","parameters":{"sExtensionName":"type: string, description: The fully qualified class name of the extension."},"!static":false},"fireActivePanelChanged":{"!description":"Fires event {@link #event:activePanelChanged activePanelChanged} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Vtm","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"!module":"sap/ui/vtm/Vtm","setAddDefaultExtensions":{"!description":"Sets a new value for property {@link #getAddDefaultExtensions addDefaultExtensions}.\n\nWhen true populates the <code>extensions<\/code> aggregation with the default set of extensions in the default configuration.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(bAddDefaultExtensions: Boolean) -> sap.ui.vtm.Vtm","!category":"function","parameters":{"bAddDefaultExtensions":"type: boolean, description: New value for property <code>addDefaultExtensions<\/code>"},"!static":false},"detachInitialized":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:initialized initialized} event of this <code>sap.ui.vtm.Vtm<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Vtm","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"indexOfExtension":{"!description":"Checks for the provided <code>sap.ui.vtm.Extension<\/code> in the aggregation {@link #getExtensions extensions}. and returns its index if found or -1 otherwise.","!type":"fn(oExtension: sap.ui.vtm.Extension) -> Number","!category":"function","parameters":{"oExtension":"type: sap.ui.vtm.Extension, description: The extension whose index is looked for"},"!static":false},"attachPanelAdded":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:panelAdded panelAdded} event of this <code>sap.ui.vtm.Vtm<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Vtm<\/code> itself.\n\nRaised when a panel has been added.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Vtm","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Vtm<\/code> itself"},"!static":false},"!category":"class","addExtension":{"!description":"Adds some extension to the aggregation {@link #getExtensions extensions}.","!type":"fn(oExtension: sap.ui.vtm.Extension) -> sap.ui.vtm.Vtm","!category":"function","parameters":{"oExtension":"type: sap.ui.vtm.Extension, description: The extension to add; if empty, nothing is inserted"},"!static":false},"detachActivePanelChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:activePanelChanged activePanelChanged} event of this <code>sap.ui.vtm.Vtm<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Vtm","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"detachPanelAdded":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:panelAdded panelAdded} event of this <code>sap.ui.vtm.Vtm<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Vtm","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getScene":{"!description":"Gets the scene.","!type":"fn() -> sap.ui.vtm.Scene","!category":"function","!static":false},"getAddDefaultExtensions":{"!description":"Gets current value of property {@link #getAddDefaultExtensions addDefaultExtensions}.\n\nWhen true populates the <code>extensions<\/code> aggregation with the default set of extensions in the default configuration.","!type":"fn() -> Boolean","!category":"function","!static":false},"removeAllExtensions":{"!description":"Removes all the controls from the aggregation {@link #getExtensions extensions}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.vtm.Extension]","!category":"function","!static":false},"destroyExtensions":{"!description":"Destroys all the extensions in the aggregation {@link #getExtensions extensions}.","!type":"fn() -> sap.ui.vtm.Vtm","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Vtm with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"getActivePanel":{"!description":"Gets the active panel.","!type":"fn() -> sap.ui.vtm.Panel | null","!category":"function","!static":false},"getExtensionsByInterface":{"!description":"Gets the extensions implementing a specified interface.","!type":"fn(sInterfaceName: String) -> [sap.ui.vtm.Extension]","!category":"function","parameters":{"sInterfaceName":"type: string, description: The fully qualified name of the interface."},"!static":false},"!constructorDescription":"Constructor for a new Vtm.\nThis constructor can be used to construct an instance of {@link sap.ui.vtm.Vtm} with a specific set of extensions.\nAlternatively {@link sap.ui.vtm.createVtm} can be used to create a {@link sap.ui.vtm.Vtm} instance with a default set of extensions.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getAddDefaultExtensions addDefaultExtensions} : boolean<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getExtensions extensions} : sap.ui.vtm.Extension[] (default)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:panelAdded panelAdded} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:activePanelChanged activePanelChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","getPanel":{"!description":"Gets a panel given its id. Returns undefined if no match is found.","!type":"fn(panelId: String) -> sap.ui.vtm.Panel | undefined","!category":"function","parameters":{"panelId":"type: string, description: The id of the panel to find."},"!static":false},"getExtensions":{"!description":"Gets content of aggregation {@link #getExtensions extensions}.\n\nThe set of VTM extensions. Extensions are used to provide extensibility. Default behaviors are implemented as extensions that can be replaced.","!type":"fn() -> [sap.ui.vtm.Extension]","!category":"function","!static":false},"getExtensionByInterface":{"!description":"Gets the extension implementing a specified interface.\n\nReturns <code>undefined<\/code> if there is not exactly one matching extension.","!type":"fn(sInterfaceName: String) -> sap.ui.vtm.Extension | undefined","!category":"function","parameters":{"sInterfaceName":"type: string, description: The fully qualified name of the interface."},"!static":false},"getExtensionByName":{"!description":"Gets an extension with a specified class name.\n\nReturns <code>undefined<\/code> if there is not exactly one matching extension.","!type":"fn(sExtensionName: String) -> sap.ui.vtm.Extension | undefined","!category":"function","parameters":{"sExtensionName":"type: string, description: The fully qualified class name of the extension."},"!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","attachInitialized":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:initialized initialized} event of this <code>sap.ui.vtm.Vtm<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Vtm<\/code> itself.\n\nRaised when this {@link sap.ui.vtm.Vtm} instance and its extensions have been initialized.\n\nApplications should add event handlers after the {@link sap.ui.vtm.Vtm} instance has initialized so that the extensions can attach event handlers before the application attempts to attach event handlers to the same events.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Vtm","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Vtm<\/code> itself"},"!static":false},"insertExtension":{"!description":"Inserts a extension into the aggregation {@link #getExtensions extensions}.","!type":"fn(oExtension: sap.ui.vtm.Extension, iIndex: Number) -> sap.ui.vtm.Vtm","!category":"function","parameters":{"oExtension":"type: sap.ui.vtm.Extension, description: The extension to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the extension should be inserted at; for a negative value of <code>iIndex<\/code>, the extension is inserted at position 0; for a value greater than the current size of the aggregation, the extension is inserted at the last position"},"!static":false},"fireInitialized":{"!description":"Fires event {@link #event:initialized initialized} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Vtm","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.Vtm.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.core.Element","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap":{"ui":"sap.ui","sap":"sap","!category":"namespace"},"sap.ui.vtm.extensions.ViewLinkingExtension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.ViewLinkingExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn()","prototype":"sap.ui.vtm.extensions.ViewLinkingExtension"},"sap.ui.vtm.SelectColumnsDialog":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.SelectColumnsDialog with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"setSelectableColumns":{"!description":"Sets a new value for property {@link #getSelectableColumns selectableColumns}.\n\nThe set of columns that should be shown in the dialog that may be selected for display.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sSelectableColumns: [sap.ui.vtm.Column]) -> sap.ui.vtm.SelectColumnsDialog","!category":"function","parameters":{"sSelectableColumns":"type: sap.ui.vtm.Column[], description: New value for property <code>selectableColumns<\/code>"},"!static":false},"!constructorDescription":"Constructor for a new SelectColumnsDialog.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getTree tree} : object<\/li>\n<li>{@link #getSelectableColumns selectableColumns} : sap.ui.vtm.Column[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/vtm/SelectColumnsDialog","open":{"!description":"Opens the dialog. The dialog applies the updated set of columns to the tree if confirmed.","!type":"fn() -> sap.ui.vtm.SelectColumnsDialog","!category":"function","!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","getSelectableColumns":{"!description":"Gets current value of property {@link #getSelectableColumns selectableColumns}.\n\nThe set of columns that should be shown in the dialog that may be selected for display.","!type":"fn() -> [sap.ui.vtm.Column]","!category":"function","!static":false},"!category":"class","setTree":{"!description":"Sets a new value for property {@link #getTree tree}.\n\nThe {@link sap.ui.vtm.Tree} that column selection is being performed for.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(oTree: Object) -> sap.ui.vtm.SelectColumnsDialog","!category":"function","parameters":{"oTree":"type: object, description: New value for property <code>tree<\/code>"},"!static":false},"getTree":{"!description":"Gets current value of property {@link #getTree tree}.\n\nThe {@link sap.ui.vtm.Tree} that column selection is being performed for.","!type":"fn() -> Object","!category":"function","!static":false},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.core.Control","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.SelectColumnsDialog.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.vtm.extensions.InitialViewExtension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.InitialViewExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.vtm.extensions.InitialViewExtension"},"sap.ui.vtm.extensions.InitialViewExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.InitialViewExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","!constructorDescription":"Constructor for a new InitialViewExtension.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getPredefinedView predefinedView} : sap.ui.vtm.PredefinedView<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.vtm.Extension#constructor sap.ui.vtm.Extension}\ncan be used as well.","setPredefinedView":{"!description":"Sets a new value for property {@link #getPredefinedView predefinedView}.\n\nSpecifies a predefined view to use. If a specific view is not specified this extension will zoom to fit all geometry without changing the camera angle.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sPredefinedView: sap.ui.vtm.PredefinedView) -> sap.ui.vtm.extensions.InitialViewExtension","!category":"function","parameters":{"sPredefinedView":"type: sap.ui.vtm.PredefinedView, description: New value for property <code>predefinedView<\/code>"},"!static":false},"getPredefinedView":{"!description":"Gets current value of property {@link #getPredefinedView predefinedView}.\n\nSpecifies a predefined view to use. If a specific view is not specified this extension will zoom to fit all geometry without changing the camera angle.","!type":"fn() -> sap.ui.vtm.PredefinedView","!category":"function","!static":false},"!module":"sap/ui/vtm/extensions/InitialViewExtension","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.extensions.InitialViewExtension.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.vtm.Extension","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.TreeItemType":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","Included":{"!description":"A tree item that can be shown in the tree. A tree item is an included tree item when it is a root tree item or is included in the <code>includedChildren<\/code> collection of its parent.","!type":"String","!category":"enum"},"!category":"static class","IncludedOrExcluded":{"!description":"Matches either included or excluded tree items.","!type":"String","!category":"enum"},"!module":"sap/ui/vtm/TreeItemType","Excluded":{"!description":"A tree item that is in the object hierarchy of the tree model, but cannot be shown in the tree. A tree item is an excluded tree item when any ancestor of the tree item is included in the <code>excludedChildren<\/code> collection of its parent.","!type":"String","!category":"enum"}},"sap.ui.vtm.ProgressDialog_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.ProgressDialog with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(scene: sap.ui.vtm.Scene)","prototype":"sap.ui.vtm.ProgressDialog"},"sap.ui.vtm.HashUtilities":{"hashMatrix":{"!description":"Creates a hash code for a {@link sap.ui.vtm.Matrix} value.\n\nThe resulting hash value can be any integer value. Use {@link sap.ui.vtm.HashUtilities.normalizeHash} on the result to create a hash code that is useful as a key in a {@link sap.ui.vtm.Lookup}.","!type":"fn(vtmMatrix: sap.ui.vtm.Matrix) -> Number","!category":"function","!static":"true"},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","normalizeHash":{"!description":"Normalizes a hash code to a range between 0 and an upper bound. Useful for creating a hash code that can be used as a key in a {@link sap.ui.vtm.Lookup} (to limit the number of buckets in the lookup).","!type":"fn(hashValue: Number, upperLimit: Number) -> Number","!category":"function","!static":"true"},"hashString":{"!description":"Creates a hash code for a string.\n\nThe resulting hash value can be any integer value. Use {@link sap.ui.vtm.HashUtilities.normalizeHash} on the result to create a hash code that is useful as a key in a {@link sap.ui.vtm.Lookup}.","!type":"fn(stringToHash: String) -> Number","!category":"function","!static":"true"},"!category":"namespace","combineHashes":{"!description":"Creates a single hash code from a set of hash code values and normalizes it using {@link sap.ui.vtm.HashUtilities.normalizeHash}.","!type":"fn(hashValues: [Number], upperLimit: Number) -> Number","!category":"function","!static":"true"},"!module":"sap/ui/vtm/HashUtilities","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.Viewable":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Viewable with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"getRelativeMatrix":{"!description":"Gets current value of property {@link #getRelativeMatrix relativeMatrix}.\n\nThe relative transformation matrix to apply to the scene node created to wrap the contents of the loaded viewable.","!type":"fn() -> sap.ui.vtm.Matrix","!category":"function","!static":false},"!constructorDescription":"Constructor for a new Viewable.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSource source} : any<\/li>\n<li>{@link #getName name} : string<\/li>\n<li>{@link #getRootNodeIds rootNodeIds} : string[]<\/li>\n<li>{@link #getRelativeMatrix relativeMatrix} : sap.ui.vtm.Matrix<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/vtm/Viewable","getSourceString":{"!description":"Returns a string representation of the source. If the source is a {@link File} this returns the file name (which is not guaranteed to uniquely identify the file).","!type":"fn() -> String","!category":"function","!static":false},"getSource":{"!description":"Gets current value of property {@link #getSource source}.\n\nThe source URL (string) or File for this Viewable.","!type":"fn() -> Object","!category":"function","!static":false},"setRootNodeIds":{"!description":"Sets a new value for property {@link #getRootNodeIds rootNodeIds}.\n\nThe root scene node IDs for this viewable.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sRootNodeIds: [String]) -> sap.ui.vtm.Viewable","!category":"function","parameters":{"sRootNodeIds":"type: string[], description: New value for property <code>rootNodeIds<\/code>"},"!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","setSource":{"!description":"Sets the source URL or File for this Viewable.","!type":"fn(source: String | File) -> sap.ui.vtm.Viewable","!category":"function","parameters":{"source":"type: string|File, description: The source URL of File for this Viewable."},"!static":false},"setRelativeMatrix":{"!description":"Sets a new value for property {@link #getRelativeMatrix relativeMatrix}.\n\nThe relative transformation matrix to apply to the scene node created to wrap the contents of the loaded viewable.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sRelativeMatrix: sap.ui.vtm.Matrix) -> sap.ui.vtm.Viewable","!category":"function","parameters":{"sRelativeMatrix":"type: sap.ui.vtm.Matrix, description: New value for property <code>relativeMatrix<\/code>"},"!static":false},"getName":{"!description":"Gets current value of property {@link #getName name}.\n\nThe name for this Viewable.","!type":"fn() -> String","!category":"function","!static":false},"!category":"class","getSourceId":{"!description":"Gets the unique ID that identifies this Viewable. This is an alias for {@link #getId}","!type":"fn() -> String","!category":"function","!static":false},"setName":{"!description":"Sets the name for this Viewable.","!type":"fn(name: String) -> sap.ui.vtm.Viewable","!category":"function","parameters":{"name":"type: string, description: The name for this Viewable."},"!static":false},"getRootNodeIds":{"!description":"Gets current value of property {@link #getRootNodeIds rootNodeIds}.\n\nThe root scene node IDs for this viewable.","!type":"fn() -> [String]","!category":"function","!static":false},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.core.Element","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.Viewable.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.vtm.interfaces.IMessageStatusIconClickExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","!module":"sap/ui/vtm/library"},"sap.ui.vtm.ProgressDialog":{"setProgressBarVisible":{"!description":"Sets a new value for property {@link #getProgressBarVisible progressBarVisible}.\n\nWhether the progress bar is visible.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bProgressBarVisible: Boolean) -> sap.ui.vtm.ProgressDialog","!category":"function","parameters":{"bProgressBarVisible":"type: boolean, description: New value for property <code>progressBarVisible<\/code>"},"!static":false},"getPercentComplete":{"!description":"Gets current value of property {@link #getPercentComplete percentComplete}.\n\nThe percentage (0-100) to show in the progress bar (if visible).\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setProgressText":{"!description":"Sets a new value for property {@link #getProgressText progressText}.\n\nThe text to display in the progress dialog.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sProgressText: String) -> sap.ui.vtm.ProgressDialog","!category":"function","parameters":{"sProgressText":"type: string, description: New value for property <code>progressText<\/code>"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.ProgressDialog with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!constructorDescription":"Constructor for a new ProgressDialog.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getProgressText progressText} : string<\/li>\n<li>{@link #getPercentComplete percentComplete} : int (default: 0)<\/li>\n<li>{@link #getProgressBarVisible progressBarVisible} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/vtm/ProgressDialog","getProgressBarVisible":{"!description":"Gets current value of property {@link #getProgressBarVisible progressBarVisible}.\n\nWhether the progress bar is visible.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"isOpen":{"!description":"Returns whether the dialog is open.","!type":"fn() -> Boolean","!category":"function","!static":false},"close":{"!description":"Closes the dialog.","!type":"fn() -> sap.ui.vtm.ProgressDialog","!category":"function","!static":false},"open":{"!description":"Opens the dialog.","!type":"fn() -> sap.ui.vtm.ProgressDialog","!category":"function","!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","getProgressText":{"!description":"Gets current value of property {@link #getProgressText progressText}.\n\nThe text to display in the progress dialog.","!type":"fn() -> String","!category":"function","!static":false},"setPercentComplete":{"!description":"Sets a new value for property {@link #getPercentComplete percentComplete}.\n\nThe percentage (0-100) to show in the progress bar (if visible).\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iPercentComplete: Number) -> sap.ui.vtm.ProgressDialog","!category":"function","parameters":{"iPercentComplete":"type: int, description: New value for property <code>percentComplete<\/code>"},"!static":false},"!category":"class","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.core.Control","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.ProgressDialog.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.vtm.ColumnType":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","Internal":{"!description":"The Internal column type. Columns of this type: <ul> <li>Should not be used for application data (all columns of this type are defined by VTM).<\/li> <li>Is not normally expected to be used by end users (columns of this type are typically expected to be used for development/debugging).<\/li> <\/ul>","!type":"String","!category":"enum"},"Metadata":{"!description":"The Metadata column type. This type of column represents metadata retrieved from viewables (or metadata values supplied by the application which will be present in exported viewables).","!type":"String","!category":"enum"},"Identifier":{"!description":"The Identifier column type. This type of column represents identifiers retrieved from viewables (or metadata values supplied by the application which will be present in exported viewables).","!type":"String","!category":"enum"},"!module":"sap/ui/vtm/ColumnType","AppData":{"!description":"The AppData (application data) column type. This type of column represents application data that is neither metadata nor identifier data.","!type":"String","!category":"enum"}},"sap.ui.vtm.extensions.ViewportSelectionLinkingExtension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.ViewportSelectionLinkingExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.vtm.extensions.ViewportSelectionLinkingExtension"},"sap.ui.vtm.InternalColumnDescriptor":{"SceneNodeIds":{"!description":"A column showing the <code>sceneNodeIds<\/code> field of the tree item.","!type":"String","!category":"enum"},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","RelativeMatrix":{"!description":"A column showing the <code>relativeMatrix<\/code> field of the tree item.","!type":"String","!category":"enum"},"Tree":{"!description":"The column that contains the tree item name and the tree type icon. This must always be the first column.","!type":"String","!category":"enum"},"HighlightColor":{"!description":"A column showing the <code>highlightColor<\/code> field of the tree item.","!type":"String","!category":"enum"},"!category":"static class","Visibility":{"!description":"The column that is used to indicate and control visibility of the scene nodes associated with the tree item.","!type":"String","!category":"enum"},"Opacity":{"!description":"A column showing the <code>opacity<\/code> field of the tree item.","!type":"String","!category":"enum"},"MessageStatus":{"!description":"The column that is used to provide an indication of the messages that apply to the tree item and its descendants.","!type":"String","!category":"enum"},"AbsoluteMatrix":{"!description":"A column showing the <code>absoluteMatrix<\/code> field of the tree item.","!type":"String","!category":"enum"},"!module":"sap/ui/vtm/InternalColumnDescriptor","TreeItemId":{"!description":"A column containing the <code>id<\/code> field of the tree item.","!type":"String","!category":"enum"}},"sap.ui.vtm.extensions.ViewportSelectionLinkingExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.ViewportSelectionLinkingExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","!constructorDescription":"Constructor for a new ViewportSelectionLinkingExtension.","!module":"sap/ui/vtm/extensions/ViewportSelectionLinkingExtension","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.extensions.ViewportSelectionLinkingExtension.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.vtm.Extension","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.extensions.DisplayStateCalculationExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.DisplayStateCalculationExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","!constructorDescription":"Constructor for a new DisplayStateCalculationExtension.","!module":"sap/ui/vtm/extensions/DisplayStateCalculationExtension","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.extensions.DisplayStateCalculationExtension.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.vtm.Extension","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.extensions.LoadProgressExtension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.LoadProgressExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.vtm.extensions.LoadProgressExtension"},"sap.ui.vtm.interfaces.ISelectionLinkingExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","!module":"sap/ui/vtm/library"},"sap.ui.vtm.ArrayUtilities":{"wrap":{"!description":"Wraps an item in an array if it is not already an array.\n\n<ul> <li>If the parameter is an array, the parameter is returned.<\/li> <li>If the parameter is <code>undefined<\/code> an empty array is returned.<\/li> <li>Otherwise a single element array containing the parameter value is returned.<\/li> <\/ul>","!type":"fn(item: Object) -> Array","!category":"function","!static":"true"},"deepClone":{"!description":"Creates a copy of an array in which the items are cloned.","!type":"fn(array: Array, itemCloneFunc: fn()) -> Array","!category":"function","!static":"true"},"unwrap":{"!description":"The inverse of {@link sap.ui.vtm.ArrayUtilities.wrap}.\n\n<ul> <li>If the parameter is not an array, the parameter is returned.<\/li> <li>If the parameter is an array of length 0, <code>undefined<\/code> is returned.<\/li> <li>If the parameter is an array of length 1, the first element of the array is returned.<\/li> <li>Otherwise if the parameter is an array of length > 1, the parameter is returned (as an array).<\/li> <\/ul>","!type":"fn(item: Object) -> Object | Array | undefined","!category":"function","!static":"true"},"haveIntersection":{"!description":"Returns whether a group of arrays have a non empty set intersection.","!type":"fn(arrayOfArrays: Array, equalityFunction: fn()) -> Boolean","!category":"function","!static":"true"},"toSet":{"!description":"Converts an array to an ES6 Set.","!type":"fn(array: Array) -> Set","!category":"function","!static":"true"},"findIndex":{"!description":"Returns the index of the first item in an array that matches the supplied predicate or returns -1 if no match is found.","!type":"fn(array: Array, predicate: fn()) -> Number","!category":"function","!static":"true"},"fromSet":{"!description":"Converts an ES6 Set to an array.","!type":"fn(set: Set) -> Array","!category":"function","!static":"true"},"shallowClone":{"!description":"Creates a copy of an array in which the items are copied by reference rather than being cloned.","!type":"fn(array: Array) -> Array","!category":"function","!static":"true"},"!module":"sap/ui/vtm/ArrayUtilities","areEqual":{"!description":"Returns <code>true<\/code> if a group of arrays are equal.","!type":"fn(arrayOfArrays: Array, equalityFunc: fn()) -> Boolean","!category":"function","!static":"true"},"flatten":{"!description":"Flattens an array of arrays down to an array.","!type":"fn(arrayOfArrays: Array) -> Array","!category":"function","!static":"true"},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","union":{"!description":"Returns the set union (as an array) of a group of arrays.","!type":"fn(arrayOfArrays: Array, equalityFunction: fn()) -> Array","!category":"function","!static":"true"},"intersect":{"!description":"Returns the set intersection of a group of arrays.","!type":"fn(arrayOfArrays: Array, equalityFunction: fn()) -> Array","!category":"function","!static":"true"},"!category":"namespace","fromArrayLike":{"!description":"Converts from an array-like object (an object that supports indexing and has a length) to an array.","!type":"fn(arrayLike: Object) -> Array","!category":"function","!static":"true"},"find":{"!description":"Returns the first item in an array that matches the supplied predicate or returns undefined if no match is found.","!type":"fn(array: Array, predicate: fn()) -> Object | undefined","!category":"function","!static":"true"},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.interfaces.ISceneNodeHoverHighlightExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","!module":"sap/ui/vtm/library"},"sap.ui.vtm.extensions.ViewLinkingExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.ViewLinkingExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","!constructorDescription":"Constructor for the ViewLinkingExtension.","!module":"sap/ui/vtm/extensions/ViewLinkingExtension","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.extensions.ViewLinkingExtension.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.vtm.Extension","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.SelectionMode":{"MultiToggle":{"!description":"A multiple selection mode that toggles the selection state of a row when it is clicked.","!type":"String","!category":"enum"},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","!module":"sap/ui/vtm/SelectionMode","Single":{"!description":"Single selection mode.","!type":"String","!category":"enum"}},"sap.ui.vtm.ViewableLoadInfo":{"getErrorCode":{"!description":"Gets current value of property {@link #getErrorCode errorCode}.\n\nThe error code describing why the Viewable failed to load.\n\nUse when {@link #getSucceeded} returns false.","!type":"fn() -> String","!category":"function","!static":false},"getStatus":{"!description":"Gets current value of property {@link #getStatus status}.\n\nThe download/load status of the {@link sap.ui.vtm.Viewable} this {@link sap.ui.vtm.ViewableLoadInfo} relates to.","!type":"fn() -> sap.ui.vtm.ViewableLoadStatus","!category":"function","!static":false},"setViewable":{"!description":"Sets a new value for property {@link #getViewable viewable}.\n\nThe {@link sap.ui.vtm.Viewable} this {@link sap.ui.vtm.ViewableLoadInfo} relates to.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(oViewable: Object) -> sap.ui.vtm.ViewableLoadInfo","!category":"function","parameters":{"oViewable":"type: object, description: New value for property <code>viewable<\/code>"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.ViewableLoadInfo with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"getViewable":{"!description":"Gets current value of property {@link #getViewable viewable}.\n\nThe {@link sap.ui.vtm.Viewable} this {@link sap.ui.vtm.ViewableLoadInfo} relates to.","!type":"fn() -> Object","!category":"function","!static":false},"!constructorDescription":"This class is not intended to be instantiated directly by application code.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getViewable viewable} : object<\/li>\n<li>{@link #getStatus status} : sap.ui.vtm.ViewableLoadStatus<\/li>\n<li>{@link #getErrorCode errorCode} : string<\/li>\n<li>{@link #getErrorText errorText} : string<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/vtm/ViewableLoadInfo","getErrorText":{"!description":"Gets current value of property {@link #getErrorText errorText}.\n\nThe error text describing why the Viewable failed to load. This is an untranslated technical message. Use when {@link #getSucceeded} returns false.","!type":"fn() -> String","!category":"function","!static":false},"setErrorCode":{"!description":"Sets a new value for property {@link #getErrorCode errorCode}.\n\nThe error code describing why the Viewable failed to load.\n\nUse when {@link #getSucceeded} returns false.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sErrorCode: String) -> sap.ui.vtm.ViewableLoadInfo","!category":"function","parameters":{"sErrorCode":"type: string, description: New value for property <code>errorCode<\/code>"},"!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"class","setErrorText":{"!description":"Sets a new value for property {@link #getErrorText errorText}.\n\nThe error text describing why the Viewable failed to load. This is an untranslated technical message. Use when {@link #getSucceeded} returns false.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sErrorText: String) -> sap.ui.vtm.ViewableLoadInfo","!category":"function","parameters":{"sErrorText":"type: string, description: New value for property <code>errorText<\/code>"},"!static":false},"setStatus":{"!description":"Sets a new value for property {@link #getStatus status}.\n\nThe download/load status of the {@link sap.ui.vtm.Viewable} this {@link sap.ui.vtm.ViewableLoadInfo} relates to.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sStatus: sap.ui.vtm.ViewableLoadStatus) -> sap.ui.vtm.ViewableLoadInfo","!category":"function","parameters":{"sStatus":"type: sap.ui.vtm.ViewableLoadStatus, description: New value for property <code>status<\/code>"},"!static":false},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.core.Element","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.ViewableLoadInfo.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.vtm.Column":{"getLabelControl":{"!description":"Gets current value of property {@link #getLabelControl labelControl}.\n\nA {@link sap.ui.core.Control} that is used in the column header. When specified, this is used in preference to the <code>label<\/code> property as the column header content. However the <code>label<\/code> property should also be specified since it is used in the used in the {@link sap.ui.vtm.ColumnSelectionDialog}.","!type":"fn() -> Object","!category":"function","!static":false},"setLabel":{"!description":"Sets a new value for property {@link #getLabel label}.\n\nA textual name for the column. This is also used in the {@link sap.ui.vtm.ColumnSelectionDialog}, so it should be included whether or not the <code>labelControl<\/code> property is used.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sLabel: String) -> sap.ui.vtm.Column","!category":"function","parameters":{"sLabel":"type: string, description: New value for property <code>label<\/code>"},"!static":false},"!module":"sap/ui/vtm/Column","getDescriptor":{"!description":"Gets current value of property {@link #getDescriptor descriptor}.\n\nThe descriptor is a JSON string identifying the column.\n\nWhen the type property has a value of {@link sap.ui.vtm.ColumnType.Metadata} the descriptor property has the following form: <code>'{\"category\":\"SAP\",\"field\":\"MATERIAL\"}'<\/code><br> Such descriptors can be constructed using {@link sap.ui.vtm.DescriptorUtilities.createMetadataDescriptor}.\n\nWhen the type property has a value of {@link sap.ui.vtm.ColumnType.Identifier} the descriptor property has the following form: <code>'{\"source\":\"SAP\",\"type\":\"VE_COMPONENT\"}'<\/code><br> Such descriptors can be constructed using {@link sap.ui.vtm.DescriptorUtilities.createIdentifierDescriptor}.\n\nWhen the type property has a value of {@link sap.ui.vtm.ColumnType.AppData} the descriptor property has the following form: <code>'bomId'<\/code>","!type":"fn() -> String","!category":"function","!static":false},"getResizable":{"!description":"Gets current value of property {@link #getResizable resizable}.\n\nIf set to true, the column can be resized.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getType":{"!description":"Gets current value of property {@link #getType type}.\n\nThe type of column.","!type":"fn() -> sap.ui.vtm.ColumnType","!category":"function","!static":false},"setTooltip":{"!description":"Sets a new value for property {@link #getTooltip tooltip}.\n\nA localized string to show in the column header tooltip. If unspecified, the label value will be used as the column header tooltip.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sTooltip: String) -> sap.ui.vtm.Column","!category":"function","parameters":{"sTooltip":"type: string, description: New value for property <code>tooltip<\/code>"},"!static":false},"!category":"class","getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nThe width of the tree column.\n\nDefault value is <code>200px<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"setValueFormatter":{"!description":"Sets a new value for property {@link #getValueFormatter valueFormatter}.\n\nIf defined, this is a function that specifies the formatting of cell content text for this column.<br/> The function must return a string containing the text to display in the cell (or null) for a given tree item.<br/> The first parameter to the function (which may not always be defined) is the tree item for the tree table row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(oValueFormatter: Object) -> sap.ui.vtm.Column","!category":"function","parameters":{"oValueFormatter":"type: any, description: New value for property <code>valueFormatter<\/code>"},"!static":false},"setLabelControl":{"!description":"Sets a new value for property {@link #getLabelControl labelControl}.\n\nA {@link sap.ui.core.Control} that is used in the column header. When specified, this is used in preference to the <code>label<\/code> property as the column header content. However the <code>label<\/code> property should also be specified since it is used in the used in the {@link sap.ui.vtm.ColumnSelectionDialog}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(oLabelControl: Object) -> sap.ui.vtm.Column","!category":"function","parameters":{"oLabelControl":"type: object, description: New value for property <code>labelControl<\/code>"},"!static":false},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nThe width of the tree column.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>200px<\/code>.","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.vtm.Column","!category":"function","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"},"!static":false},"getTemplate":{"!description":"Gets current value of property {@link #getTemplate template}.\n\nIf defined, overrides the cell template for the column.<br/> If this is defined, the <code>valueFormatter<\/code> and <code>tooltipFormatter<\/code> properties are ignored.","!type":"fn() -> sap.ui.core.Control","!category":"function","!static":false},"setTooltipFormatter":{"!description":"Sets a new value for property {@link #getTooltipFormatter tooltipFormatter}.\n\nIf defined, this is a function that specifies the formatting of cell content tooltips for this column (overriding the default behaviour).<br/> Not used if a custom template is specified.<br/> The function must return a string containing the text to display in the tooltip (or null) for a given tree item.<br/> The first parameter to the function (which may not always be defined) is the tree item for the tree table row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(oTooltipFormatter: Object) -> sap.ui.vtm.Column","!category":"function","parameters":{"oTooltipFormatter":"type: any, description: New value for property <code>tooltipFormatter<\/code>"},"!static":false},"setHAlign":{"!description":"Sets a new value for property {@link #getHAlign hAlign}.\n\nThe horizontal alignment for the tree column.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Left<\/code>.","!type":"fn(sHAlign: sap.ui.core.HorizontalAlign) -> sap.ui.vtm.Column","!category":"function","parameters":{"sHAlign":"type: sap.ui.core.HorizontalAlign, description: New value for property <code>hAlign<\/code>"},"!static":false},"setType":{"!description":"Sets a new value for property {@link #getType type}.\n\nThe type of column.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sType: sap.ui.vtm.ColumnType) -> sap.ui.vtm.Column","!category":"function","parameters":{"sType":"type: sap.ui.vtm.ColumnType, description: New value for property <code>type<\/code>"},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Column with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!constructorDescription":"Constructor for a new Column.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getType type} : sap.ui.vtm.ColumnType<\/li>\n<li>{@link #getDescriptor descriptor} : string<\/li>\n<li>{@link #getTooltip tooltip} : string<\/li>\n<li>{@link #getHAlign hAlign} : sap.ui.core.HorizontalAlign (default: Left)<\/li>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 200px)<\/li>\n<li>{@link #getResizable resizable} : boolean (default: true)<\/li>\n<li>{@link #getLabel label} : string<\/li>\n<li>{@link #getLabelControl labelControl} : object<\/li>\n<li>{@link #getValueFormatter valueFormatter} : any<\/li>\n<li>{@link #getTooltipFormatter tooltipFormatter} : any<\/li>\n<li>{@link #getTemplate template} : sap.ui.core.Control<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","getLabel":{"!description":"Gets current value of property {@link #getLabel label}.\n\nA textual name for the column. This is also used in the {@link sap.ui.vtm.ColumnSelectionDialog}, so it should be included whether or not the <code>labelControl<\/code> property is used.","!type":"fn() -> String","!category":"function","!static":false},"getTooltip":{"!description":"Gets current value of property {@link #getTooltip tooltip}.\n\nA localized string to show in the column header tooltip. If unspecified, the label value will be used as the column header tooltip.","!type":"fn() -> String","!category":"function","!static":false},"getValueFormatter":{"!description":"Gets current value of property {@link #getValueFormatter valueFormatter}.\n\nIf defined, this is a function that specifies the formatting of cell content text for this column.<br/> The function must return a string containing the text to display in the cell (or null) for a given tree item.<br/> The first parameter to the function (which may not always be defined) is the tree item for the tree table row.","!type":"fn() -> Object","!category":"function","!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","getTooltipFormatter":{"!description":"Gets current value of property {@link #getTooltipFormatter tooltipFormatter}.\n\nIf defined, this is a function that specifies the formatting of cell content tooltips for this column (overriding the default behaviour).<br/> Not used if a custom template is specified.<br/> The function must return a string containing the text to display in the tooltip (or null) for a given tree item.<br/> The first parameter to the function (which may not always be defined) is the tree item for the tree table row.","!type":"fn() -> Object","!category":"function","!static":false},"setDescriptor":{"!description":"Sets a new value for property {@link #getDescriptor descriptor}.\n\nThe descriptor is a JSON string identifying the column.\n\nWhen the type property has a value of {@link sap.ui.vtm.ColumnType.Metadata} the descriptor property has the following form: <code>'{\"category\":\"SAP\",\"field\":\"MATERIAL\"}'<\/code><br> Such descriptors can be constructed using {@link sap.ui.vtm.DescriptorUtilities.createMetadataDescriptor}.\n\nWhen the type property has a value of {@link sap.ui.vtm.ColumnType.Identifier} the descriptor property has the following form: <code>'{\"source\":\"SAP\",\"type\":\"VE_COMPONENT\"}'<\/code><br> Such descriptors can be constructed using {@link sap.ui.vtm.DescriptorUtilities.createIdentifierDescriptor}.\n\nWhen the type property has a value of {@link sap.ui.vtm.ColumnType.AppData} the descriptor property has the following form: <code>'bomId'<\/code>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sDescriptor: String) -> sap.ui.vtm.Column","!category":"function","parameters":{"sDescriptor":"type: string, description: New value for property <code>descriptor<\/code>"},"!static":false},"setResizable":{"!description":"Sets a new value for property {@link #getResizable resizable}.\n\nIf set to true, the column can be resized.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bResizable: Boolean) -> sap.ui.vtm.Column","!category":"function","parameters":{"bResizable":"type: boolean, description: New value for property <code>resizable<\/code>"},"!static":false},"setTemplate":{"!description":"Sets a new value for property {@link #getTemplate template}.\n\nIf defined, overrides the cell template for the column.<br/> If this is defined, the <code>valueFormatter<\/code> and <code>tooltipFormatter<\/code> properties are ignored.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sTemplate: sap.ui.core.Control) -> sap.ui.vtm.Column","!category":"function","parameters":{"sTemplate":"type: sap.ui.core.Control, description: New value for property <code>template<\/code>"},"!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.Column.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"getHAlign":{"!description":"Gets current value of property {@link #getHAlign hAlign}.\n\nThe horizontal alignment for the tree column.\n\nDefault value is <code>Left<\/code>.","!type":"fn() -> sap.ui.core.HorizontalAlign","!category":"function","!static":false},"!proto":"sap.ui.core.Element","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.interfaces.IDisplayStateCalculationExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","!module":"sap/ui/vtm/library"},"sap.ui.vtm.extensions.MessageStatusCalculationExtension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.MessageStatusCalculationExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.vtm.extensions.MessageStatusCalculationExtension"},"sap.ui.vtm.SelectColumnsDialog_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.SelectColumnsDialog with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn()","prototype":"sap.ui.vtm.SelectColumnsDialog"},"sap.ui.vtm.Viewport":{"attachRefreshRequested":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:refreshRequested refreshRequested} event of this <code>sap.ui.vtm.Viewport<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Viewport<\/code> itself.\n\nRaised when {@link sap.ui.vk.dvl.Viewport#refresh refresh} is called. This event can be used by code that is managing the viewport display state.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Viewport<\/code> itself"},"!static":false},"attachViewChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:viewChanged viewChanged} event of this <code>sap.ui.vtm.Viewport<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Viewport<\/code> itself.\n\nRaised when viewport's camera view changed.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Viewport<\/code> itself"},"!static":false},"setOpacity":{"!description":"Sets the opacity for a set of scene nodes in this viewport. Opacity is specified as a floating point value in the interval [0,1].\n\nThis method should not be called by application code when an extension implementing {@link sap.ui.vtm.interfaces.IDisplayStateCalculationExtension} is being used. In that case the extension implementing {@link sap.ui.vtm.interfaces.IDisplayStateCalculationExtension} should perform all management of scene node visibility in the viewports.","!type":"fn(sceneNodeIds: [String | String], opacity: Number, recursive: Boolean) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"recursive":"type: boolean, description: If true the specified opacity state will be applied to the descendants of the specified scene nodes.","opacity":"type: number, description: The opacity state to apply to the relevant scene nodes.","sceneNodeIds":"type: string|string[], description: A scene node ID or an array of scene node IDs."},"!static":false},"detachBeginGesture":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:beginGesture beginGesture} event of this <code>sap.ui.vtm.Viewport<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"addHeaderControl":{"!description":"Adds some headerControl into the association {@link #getHeaderControls headerControls}.","!type":"fn(vHeaderControl: sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"vHeaderControl":"type: sap.ui.core.ID|sap.ui.core.Control, description: The headerControls to add; if empty, nothing is inserted"},"!static":false},"!module":"sap/ui/vtm/Viewport","detachRefreshRequested":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:refreshRequested refreshRequested} event of this <code>sap.ui.vtm.Viewport<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"attachBeginGesture":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:beginGesture beginGesture} event of this <code>sap.ui.vtm.Viewport<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Viewport<\/code> itself.\n\nRaised when a gesture begins.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Viewport<\/code> itself"},"!static":false},"getOpacity":{"!description":"Gets the opacity for a set of scene nodes in this viewport. Opacity is specified as a floating point value in the interval [0,1].","!type":"fn(sceneNodeIds: [String | String]) -> [Number | Number]","!category":"function","parameters":{"sceneNodeIds":"type: string|string[], description: A scene node ID or an array of scene node IDs."},"!static":false},"setCameraInfo":{"!description":"Updates the camera for this viewport.","!type":"fn(cameraInfo: Object, flyToDuration: Number) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"cameraInfo":"type: object, description: An object containing camera information returned by {@link sap.ui.vtm.Viewport#getCameraInfo getCameraInfo}.","flyToDuration":"type: float, description: A duration in seconds for the transition to the new camera position. Defaults to 0."},"!static":false},"refresh":{"!description":"Fires a <code>refreshRequested<\/code> event.","!type":"fn() -> sap.ui.vtm.Viewport","!category":"function","!static":false},"attachNodeClicked":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:nodeClicked nodeClicked} event of this <code>sap.ui.vtm.Viewport<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Viewport<\/code> itself.\n\nRaised when a node in the viewport is clicked.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Viewport<\/code> itself"},"!static":false},"setOverrideDisplayGroups":{"!description":"Sets a new value for property {@link #getOverrideDisplayGroups overrideDisplayGroups}.\n\nAllows the calculated display state of scene nodes in the viewport o be overridden.\n\nA set of {@link sap.ui.vtm.DisplayGroup} objects that each specify the display state for a set of scene nodes. Precedence is inherent in the array ordering. Any display state specified in this way takes precedence over display states specified for geometry associated with tree items or specified using {@link #contextGroups}. Call {@link #refresh} to recalculate the display state in the viewport after modifying override display groups.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>[]<\/code>.","!type":"fn(sOverrideDisplayGroups: [Object]) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"sOverrideDisplayGroups":"type: object[], description: New value for property <code>overrideDisplayGroups<\/code>"},"!static":false},"detachVisibilityChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:visibilityChanged visibilityChanged} event of this <code>sap.ui.vtm.Viewport<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"detachNodeClicked":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:nodeClicked nodeClicked} event of this <code>sap.ui.vtm.Viewport<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getSelectedIds":{"!description":"Gets the IDs of the scene nodes that are selected in this viewport.","!type":"fn() -> [String]","!category":"function","!static":false},"attachEndGesture":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:endGesture endGesture} event of this <code>sap.ui.vtm.Viewport<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Viewport<\/code> itself.\n\nRaised when a gesture ends.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Viewport<\/code> itself"},"!static":false},"addOverrideDisplayGroup":{"!description":"Adds an override display group to the <code>overrideDisplayGroups<\/code> property.","!type":"fn(overrideDisplayGroup: sap.ui.vtm.DisplayGroup) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"overrideDisplayGroup":"type: sap.ui.vtm.DisplayGroup, description: The override display group to add to the <code>overrideDisplayGroups<\/code> property."},"!static":false},"fireBeginGesture":{"!description":"Fires event {@link #event:beginGesture beginGesture} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"setBackgroundGradientBottomColor":{"!description":"Sets a new value for property {@link #getBackgroundGradientBottomColor backgroundGradientBottomColor}.\n\nThe background gradient bottom color\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>white<\/code>.","!type":"fn(sBackgroundGradientBottomColor: sap.ui.core.CSSColor) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"sBackgroundGradientBottomColor":"type: sap.ui.core.CSSColor, description: New value for property <code>backgroundGradientBottomColor<\/code>"},"!static":false},"!constructorDescription":"This class is not intended to be instantiated directly by application code.\nA {@link sap.ui.vtm.Viewport} object is created when a {@link sap.ui.vtm.Panel} object is instantiated.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getBackgroundGradientTopColor backgroundGradientTopColor} : sap.ui.core.CSSColor (default: black)<\/li>\n<li>{@link #getBackgroundGradientBottomColor backgroundGradientBottomColor} : sap.ui.core.CSSColor (default: white)<\/li>\n<li>{@link #getOverrideDisplayGroups overrideDisplayGroups} : object[] (default: [])<\/li>\n<li>{@link #getContextDisplayGroups contextDisplayGroups} : object[] (default: [])<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getHeaderControls headerControls} : (sap.ui.core.ID | sap.ui.core.Control)[]<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:selectionChanged selectionChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:nodeClicked nodeClicked} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:visibilityChanged visibilityChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:viewChanged viewChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:refreshRequested refreshRequested} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:hover hover} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:beginGesture beginGesture} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:endGesture endGesture} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","fireSelectionChanged":{"!description":"Fires event {@link #event:selectionChanged selectionChanged} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"getBackgroundGradientTopColor":{"!description":"Gets current value of property {@link #getBackgroundGradientTopColor backgroundGradientTopColor}.\n\nThe background gradient top color.\n\nDefault value is <code>black<\/code>.","!type":"fn() -> sap.ui.core.CSSColor","!category":"function","!static":false},"getPanel":{"!description":"Gets the panel this viewport belongs to.","!type":"fn() -> sap.ui.vtm.Panel","!category":"function","!static":false},"fireVisibilityChanged":{"!description":"Fires event {@link #event:visibilityChanged visibilityChanged} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"removeHeaderControl":{"!description":"Removes an headerControl from the association named {@link #getHeaderControls headerControls}.","!type":"fn(vHeaderControl: Number | sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.core.ID","!category":"function","parameters":{"vHeaderControl":"type: int|sap.ui.core.ID|sap.ui.core.Control, description: The headerControl to be removed or its index or ID"},"!static":false},"removeAllHeaderControls":{"!description":"Removes all the controls in the association named {@link #getHeaderControls headerControls}.","!type":"fn() -> [sap.ui.core.ID]","!category":"function","!static":false},"zoomToFit":{"!description":"Calls {@link sap.ui.vtm.Viewport#zoomToSelected zoomToSelected} if any geometry is selected in this viewport, otherwise calls {@link sap.ui.vtm.Viewport#zoomToAll zoomToAll}.","!type":"fn(durationInSeconds: Number) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"durationInSeconds":"type: number, description: The duration of the zoom animation in seconds."},"!static":false},"getBackgroundGradientBottomColor":{"!description":"Gets current value of property {@link #getBackgroundGradientBottomColor backgroundGradientBottomColor}.\n\nThe background gradient bottom color\n\nDefault value is <code>white<\/code>.","!type":"fn() -> sap.ui.core.CSSColor","!category":"function","!static":false},"addContextDisplayGroup":{"!description":"Adds an override display group to the <code>overrideDisplayGroups<\/code> property.","!type":"fn(contextDisplayGroup: sap.ui.vtm.DisplayGroup) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"contextDisplayGroup":"type: sap.ui.vtm.DisplayGroup, description: The context display group to add to the <code>contextDisplayGroups<\/code> property."},"!static":false},"getSelected":{"!description":"Gets the selection state for a set of scene nodes in this viewport.","!type":"fn(sceneNodeIds: [String | String]) -> [Boolean | Boolean]","!category":"function","parameters":{"sceneNodeIds":"type: string|string[], description: A scene node ID or an array of scene node IDs."},"!static":false},"getInitialized":{"!description":"Returns whether the {@link sap.ui.vtm.Viewport} has been initialized.","!type":"fn() -> Boolean","!category":"function","!static":false},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.core.Control","attachSelectionChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:selectionChanged selectionChanged} event of this <code>sap.ui.vtm.Viewport<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Viewport<\/code> itself.\n\nRaised when the selection is changed due to a click in the viewport (either on a node or in empty space).","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Viewport<\/code> itself"},"!static":false},"getContextDisplayGroups":{"!description":"Gets current value of property {@link #getContextDisplayGroups contextDisplayGroups}.\n\nAllows the calculated display state for scene nodes whose display state is not determined by tree item associations or override display groups to be specified.\n\nA set of {@link sap.ui.vtm.DisplayGroup} objects objects that describe display states to apply to scene nodes. Precedence is inherent in the array ordering. Call {@link #refresh} to recalculate the display state in the viewport after modifying override display groups.\n\nDefault value is <code>[]<\/code>.","!type":"fn() -> [Object]","!category":"function","!static":false},"getVisibility":{"!description":"Gets the visibility state for a set of scene nodes in this viewport.","!type":"fn(sceneNodeIds: [String | String]) -> [Boolean | Boolean]","!category":"function","parameters":{"sceneNodeIds":"type: string|string[], description: A scene node ID or an array of scene node IDs."},"!static":false},"attachHover":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:hover hover} event of this <code>sap.ui.vtm.Viewport<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Viewport<\/code> itself.\n\nRaised on mouse move over viewport.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Viewport<\/code> itself"},"!static":false},"getCameraInfo":{"!description":"Retrieves an object containing the current camera information for this viewport.\n\nThis value can then be passed to {@link sap.ui.vtm.Viewport#setCameraInfo setCameraInfo} to restore the camera position at a later point in time.","!type":"fn() -> Object","!category":"function","!static":false},"detachHover":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:hover hover} event of this <code>sap.ui.vtm.Viewport<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"fireEndGesture":{"!description":"Fires event {@link #event:endGesture endGesture} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"detachViewChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:viewChanged viewChanged} event of this <code>sap.ui.vtm.Viewport<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"fireHover":{"!description":"Fires event {@link #event:hover hover} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"zoomToSelected":{"!description":"Zooms to the set of geometry that is selected in the current viewport. If no geometry is selected, no action is taken.","!type":"fn(durationInSeconds: Number) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"durationInSeconds":"type: number, description: The duration of the zoom animation in seconds."},"!static":false},"!category":"class","getHighlightColor":{"!description":"Gets the highlight colors for a set of scene nodes in this viewport.","!type":"fn(sceneNodeIds: [String | String]) -> [sap.ui.core.CSSColor | sap.ui.core.CSSColor]","!category":"function","parameters":{"sceneNodeIds":"type: string|string[], description: A scene node ID or an array of scene node IDs."},"!static":false},"fireViewChanged":{"!description":"Fires event {@link #event:viewChanged viewChanged} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"getHeaderControls":{"!description":"Returns array of IDs of the elements which are the current targets of the association {@link #getHeaderControls headerControls}.","!type":"fn() -> [sap.ui.core.ID]","!category":"function","!static":false},"getScene":{"!description":"Gets the {@link sap.ui.vtm.Scene} used by this {@link sap.ui.vtm.Viewport}.","!type":"fn() -> sap.ui.vtm.Scene","!category":"function","!static":false},"zoomToAll":{"!description":"Zooms to a view in the current viewport that can fit all geometry in the scene (visible or not).","!type":"fn(durationInSeconds: Number) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"durationInSeconds":"type: number, description: The duration of the zoom animation in seconds."},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Viewport with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"setHighlightColor":{"!description":"Sets the highlight color for a set of scene nodes in this viewport.\n\nThis method should not be called by application code when an extension implementing {@link sap.ui.vtm.interfaces.IDisplayStateCalculationExtension} is being used. In that case the extension implementing {@link sap.ui.vtm.interfaces.IDisplayStateCalculationExtension} should perform all management of scene node visibility in the viewports.","!type":"fn(sceneNodeIds: [String | String], color: sap.ui.core.CSSColor | null, recursive: Boolean) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"color":"type: sap.ui.core.CSSColor|null, description: The highlight color to apply to the relevant scene nodes. If null, the highlight color is removed.<br/> The alpha component of the color controls the blending ratio between the highlight color and the geometry color.","recursive":"type: boolean, description: If true the specified highlight color will be applied to the descendants of the specified scene nodes.","sceneNodeIds":"type: string|string[], description: A scene node ID or an array of scene node IDs."},"!static":false},"setBackgroundGradientTopColor":{"!description":"Sets a new value for property {@link #getBackgroundGradientTopColor backgroundGradientTopColor}.\n\nThe background gradient top color.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>black<\/code>.","!type":"fn(sBackgroundGradientTopColor: sap.ui.core.CSSColor) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"sBackgroundGradientTopColor":"type: sap.ui.core.CSSColor, description: New value for property <code>backgroundGradientTopColor<\/code>"},"!static":false},"attachVisibilityChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:visibilityChanged visibilityChanged} event of this <code>sap.ui.vtm.Viewport<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Viewport<\/code> itself.\n\nRaised when the visibility of scene nodes changed in the viewport.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Viewport<\/code> itself"},"!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","detachEndGesture":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:endGesture endGesture} event of this <code>sap.ui.vtm.Viewport<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getOverrideDisplayGroups":{"!description":"Gets current value of property {@link #getOverrideDisplayGroups overrideDisplayGroups}.\n\nAllows the calculated display state of scene nodes in the viewport o be overridden.\n\nA set of {@link sap.ui.vtm.DisplayGroup} objects that each specify the display state for a set of scene nodes. Precedence is inherent in the array ordering. Any display state specified in this way takes precedence over display states specified for geometry associated with tree items or specified using {@link #contextGroups}. Call {@link #refresh} to recalculate the display state in the viewport after modifying override display groups.\n\nDefault value is <code>[]<\/code>.","!type":"fn() -> [Object]","!category":"function","!static":false},"setContextDisplayGroups":{"!description":"Sets a new value for property {@link #getContextDisplayGroups contextDisplayGroups}.\n\nAllows the calculated display state for scene nodes whose display state is not determined by tree item associations or override display groups to be specified.\n\nA set of {@link sap.ui.vtm.DisplayGroup} objects objects that describe display states to apply to scene nodes. Precedence is inherent in the array ordering. Call {@link #refresh} to recalculate the display state in the viewport after modifying override display groups.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>[]<\/code>.","!type":"fn(sContextDisplayGroups: [Object]) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"sContextDisplayGroups":"type: object[], description: New value for property <code>contextDisplayGroups<\/code>"},"!static":false},"detachSelectionChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:selectionChanged selectionChanged} event of this <code>sap.ui.vtm.Viewport<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"fireNodeClicked":{"!description":"Fires event {@link #event:nodeClicked nodeClicked} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"setVisibility":{"!description":"Sets the visibility state for a set of scene nodes in this viewport.\n\nThis method should not be called by application code when an extension implementing {@link sap.ui.vtm.interfaces.IDisplayStateCalculationExtension} is being used. In that case the extension implementing {@link sap.ui.vtm.interfaces.IDisplayStateCalculationExtension} should perform all management of scene node visibility in the viewports.","!type":"fn(sceneNodeIds: [String | String], visibility: Boolean, recursive: Boolean) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"visibility":"type: boolean, description: The visibility state to apply to the relevant scene nodes.","recursive":"type: boolean, description: If true the specified visibility state will be applied to the descendants of the specified scene nodes.","sceneNodeIds":"type: string|string[], description: A scene node ID or an array of scene node IDs."},"!static":false},"setPredefinedView":{"!description":"Sets the view in the current viewport to one of the predefined views.","!type":"fn(view: sap.ui.vtm.PredefinedView) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"view":"type: sap.ui.vtm.PredefinedView, description: The predefined view to apply."},"!static":false},"zoomToVisible":{"!description":"Zooms to the set of geometry that is visible in the current viewport. If no geometry is visible, this zooms to all geometry in the current viewport.","!type":"fn(durationInSeconds: Number) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"durationInSeconds":"type: number, description: The duration of the zoom animation in seconds."},"!static":false},"fireRefreshRequested":{"!description":"Fires event {@link #event:refreshRequested refreshRequested} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"setSelected":{"!description":"Sets the selection state for a set of scene nodes in this viewport.\n\nThis method should not be called by application code when an extension implementing {@link sap.ui.vtm.interfaces.IViewportSelectionLinkingExtension} is being used. In that case the extension implementing {@link sap.ui.vtm.interfaces.IViewportSelectionLinkingExtension} should perform all management of scene node selection in the viewports.","!type":"fn(sceneNodeIds: [String | String], selected: Boolean, recursive: Boolean) -> sap.ui.vtm.Viewport","!category":"function","parameters":{"selected":"type: boolean, description: The new selection state of the nodes.","recursive":"type: boolean, description: The flags indicates if the change needs to propagate recursively to child nodes.","sceneNodeIds":"type: string|string[], description: A scene node ID or an array of scene node IDs."},"!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.Viewport.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.vtm.extensions.LoadProgressExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.LoadProgressExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","!constructorDescription":"Constructor for a new LoadProgressExtension.","!module":"sap/ui/vtm/extensions/LoadProgressExtension","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.extensions.LoadProgressExtension.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.vtm.Extension","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.TreeItemUtilities":{"removeRoot":{"!description":"Removes a root item from the tree.","!type":"fn(rootItemToRemove: String | Object) -> Object | undefined","!category":"function","!static":"true"},"hasChildren":{"!description":"Gets whether a tree item has items in the <code>includedChildren<\/code> and/or <code>excludedChildren<\/code> collections.","!type":"fn(treeItem: Object, childCollectionType: sap.ui.vtm.ChildCollectionType) -> Boolean","!category":"function","!static":"true"},"addExcludedChild":{"!description":"Adds a child tree item to the end of the the <code>excludedChildren<\/code> collection of its parent tree item.","!type":"fn(item: Object, childItem: Object)","!category":"function","!static":"true"},"getChildren":{"!description":"Gets the children of a tree item from the <code>includedChildren<\/code> and/or <code>excludedChildren<\/code> collections.","!type":"fn(treeItem: Object, childCollectionType: sap.ui.vtm.ChildCollectionType) -> [Object]","!category":"function","!static":"true"},"cloneAppData":{"!description":"Returns a cloned copy of the appData on the passed tree item.","!type":"fn(treeItem: Object) -> Object","!category":"function","!static":"true"},"!module":"sap/ui/vtm/TreeItemUtilities","cloneMetadata":{"!description":"Returns a cloned copy of the metadata on the passed tree item.","!type":"fn(treeItem: Object) -> Object","!category":"function","!static":"true"},"getMessages":{"!description":"Gets the messages stored on a tree item.","!type":"fn(treeItem: Object) -> [sap.ui.core.Message]","!category":"function","!static":"true"},"setAppDataValues":{"!description":"Set the application data values associated with a particular descriptor for a tree item (replacing any existing values).","!type":"fn(treeItem: Object, descriptor: String, values: [undefined | String | string[] | Number | number[] | Boolean | boolean[] | Object | Object])","!category":"function","!static":"true"},"getSceneNodeIds":{"!description":"Gets the IDs of the scene nodes associated with a tree item as an array of strings.","!type":"fn(treeItem: Object) -> [String]","!category":"function","!static":"true"},"calculateRelativeMatrix":{"!description":"Calculates the relative matrix that should be applied to a tree item given its absolute matrix and the absolute matrix of its parent.","!type":"fn(absoluteMatrix: sap.ui.vtm.Matrix, parentAbsoluteMatrix: sap.ui.vtm.Matrix) -> sap.ui.vtm.Matrix","!category":"function","!static":"true"},"setIdentifierValues":{"!description":"Set the identifier values associated with a particular descriptor for a tree item (replacing any existing values).","!type":"fn(treeItem: Object, descriptor: String, values: [String | String])","!category":"function","!static":"true"},"hasVisibility":{"!description":"Returns whether the tree item has a <code>visibility<\/code> value.","!type":"fn(treeItem: Object) -> Boolean","!category":"function","!static":"true"},"setSceneNodeIds":{"!description":"Sets the IDs of the scene nodes to associate with a tree item in a memory efficient manner.","!type":"fn(treeItem: Object, sceneNodeIds: [String | String])","!category":"function","!static":"true"},"setIncludedChildren":{"!description":"Sets the <code>includedChildren<\/code> collection of a tree item.","!type":"fn(treeItem: Object, includedChildren: [Object])","!category":"function","!static":"true"},"!category":"namespace","getAppDataDescriptors":{"!description":"Gets the application data field descriptors for a given tree item.","!type":"fn(treeItem: Object) -> [String]","!category":"function","!static":"true"},"validateTree":{"!description":"Validates a tree and returns a set of error messages.","!type":"fn(rootItems: [Object]) -> [String]","!category":"function","!static":"true"},"getIdentifierDescriptors":{"!description":"Gets the identifier descriptors for a given tree item.","!type":"fn(treeItem: Object) -> [String]","!category":"function","!static":"true"},"excludeAllChildren":{"!description":"Moves all items from the <code>includedChildren<\/code> collection of a tree item (or set of tree items) to the <code>excludedChildren<\/code> collection.","!type":"fn(treeItems: [Object], recursive: Boolean)","!category":"function","!static":"true"},"getIncludedChildren":{"!description":"Gets the included children of a tree item.","!type":"fn(treeItem: Object) -> [Object]","!category":"function","!static":"true"},"getMetadataValues":{"!description":"Gets the metadata values associated with a particular descriptor for a tree item.","!type":"fn(treeItem: Object, descriptor: String) -> [string[] | number[] | boolean[] | Object]","!category":"function","!static":"true"},"validateTreeItem":{"!description":"Validates a tree item and returns a set of error messages.","!type":"fn(treeItem: Object) -> [String]","!category":"function","!static":"true"},"addRoot":{"!description":"Adds a root item to the tree.","!type":"fn(rootItemToAdd: Object)","!category":"function","!static":"true"},"traverseBranch":{"!description":"Recursively traverses a tree branch calling a function on each item (including the tree item that is the root of the branch).","!type":"fn(treeItem: Object, callback: fn(), ancestors?: [Object])","!category":"function","!static":"true"},"traverseTree":{"!description":"Recursively traverses a tree calling a function on each item.","!type":"fn(callback: fn())","!category":"function","!static":"true"},"getIdentifierValues":{"!description":"Gets the identifier values associated with a particular descriptor for a tree item.","!type":"fn(treeItem: Object, descriptor: String) -> [String]","!category":"function","!static":"true"},"mapBranch":{"!description":"Applies a mapping function to each tree item in a branch of a tree to create a new tree branch.","!type":"fn(treeItem: Object, mapFunc: fn()) -> Object","!category":"function","!static":"true"},"mapTree":{"!description":"Applies a mapping function to each tree item in a tree to create a new tree.","!type":"fn(rootTreeItems: [Object], mapFunc: fn()) -> [Object]","!category":"function","!static":"true"},"includeAllChildren":{"!description":"Moves all items from the <code>excludedChildren<\/code> collection of a tree item (or set of tree items) to the <code>includedChildren<\/code> collection.","!type":"fn(treeItems: [Object], recursive: Boolean)","!category":"function","!static":"true"},"cloneIdentifiers":{"!description":"Returns a cloned copy of the identifiers on the passed tree item.","!type":"fn(treeItem: Object) -> Object","!category":"function","!static":"true"},"getMetadataDescriptors":{"!description":"Gets the metadata field descriptors for a given tree item.","!type":"fn(treeItem: Object) -> [String]","!category":"function","!static":"true"},"setMetadataValues":{"!description":"Set the metadata values associated with a particular descriptor for a tree item (replacing any existing values).","!type":"fn(treeItem: Object, descriptor: String, values: [undefined | String | string[] | Number | number[] | Boolean | boolean[] | Object | Object])","!category":"function","!static":"true"},"removeIncludedChild":{"!description":"Removes a child tree item from the <code>includedChildren<\/code> collection of its parent tree item.","!type":"fn(item: Object, childItem: String | Object) -> Object | undefined","!category":"function","!static":"true"},"addIncludedChild":{"!description":"Adds a child tree item to the end of the the <code>includedChildren<\/code> collection of its parent tree item.","!type":"fn(item: Object, childItem: Object)","!category":"function","!static":"true"},"getExcludedChildren":{"!description":"Gets the excluded children of a tree item.","!type":"fn(treeItem: Object) -> [Object]","!category":"function","!static":"true"},"removeChild":{"!description":"Removes a child tree item from the <code>includedChildren<\/code> and/or <code>excludedChildren<\/code> collection of its parent tree item.","!type":"fn(item: Object, childItem: String | Object, childCollectionType: sap.ui.vtm.ChildCollectionType) -> Object | undefined","!category":"function","!static":"true"},"setMessages":{"!description":"Sets the messages stored on a tree item.","!type":"fn(treeItem: Object, messages: [sap.ui.core.Message])","!category":"function","!static":"true"},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","getAppDataValues":{"!description":"Gets the application data values associated with a particular descriptor for a tree item.","!type":"fn(treeItem: Object, descriptor: String) -> [string[] | number[] | boolean[] | Object]","!category":"function","!static":"true"},"setExcludedChildren":{"!description":"Sets the <code>excludedChildren<\/code> collection of a tree item.","!type":"fn(treeItem: Object, excludedChildren: [Object])","!category":"function","!static":"true"},"setChildren":{"!description":"Sets either the <code>includedChildren<\/code> or <code>excludedChildren<\/code> collection of a tree item.","!type":"fn(treeItem: Object, children: [Object], childCollectionType: sap.ui.vtm.ChildCollectionType)","!category":"function","!static":"true"},"removeExcludedChild":{"!description":"Removes a child tree item from the <code>excludedChildren<\/code> collection of its parent tree item.","!type":"fn(item: Object, childItem: String | Object) -> Object | undefined","!category":"function","!static":"true"},"addChild":{"!description":"Adds a child tree item to the end of the the <code>includedChildren<\/code> or <code>excludedChildren<\/code> collection of its parent tree item.","!type":"fn(item: Object, childItem: Object, childCollectionType: sap.ui.vtm.ChildCollectionType)","!category":"function","!static":"true"},"hasExcludedChildren":{"!description":"Gets whether a tree item has excluded children.","!type":"fn(treeItem: Object) -> [Object]","!category":"function","!static":"true"},"calculateAbsoluteMatrix":{"!description":"Calculates the absolute matrix that should be applied to a tree item given its relative matrix and the absolute matrix of its parent.","!type":"fn(relativeMatrix: sap.ui.vtm.Matrix, parentAbsoluteMatrix: sap.ui.vtm.Matrix) -> sap.ui.vtm.Matrix","!category":"function","!static":"true"},"hasIncludedChildren":{"!description":"Gets whether a tree item has included children.","!type":"fn(treeItem: Object) -> [Object]","!category":"function","!static":"true"},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.extensions.MessageStatusCalculationExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.MessageStatusCalculationExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","!constructorDescription":"Constructor for a new MessageStatusCalculationExtension.","!module":"sap/ui/vtm/extensions/MessageStatusCalculationExtension","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.extensions.MessageStatusCalculationExtension.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.vtm.Extension","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.SceneNode_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.SceneNode with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn({string: undefined, mSettings: Object)","prototype":"sap.ui.vtm.SceneNode"},"sap.ui.vtm.Panel_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Panel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.vtm.Panel"},"sap.ui.vtm.MessagesPopover_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.MessagesPopover with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.m.Popover.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn()","prototype":"sap.ui.vtm.MessagesPopover"},"sap.ui.vtm.Lookup_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Lookup with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(equalsFunc: fn())","prototype":"sap.ui.vtm.Lookup"},"sap.ui.vtm.extensions.MessageStatusIconClickExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.MessageStatusIconClickExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","!constructorDescription":"Constructor for a new MessageStatusIconClickExtension.","!module":"sap/ui/vtm/extensions/MessageStatusIconClickExtension","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.extensions.MessageStatusIconClickExtension.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.vtm.Extension","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.interfaces.IInitialViewExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","!module":"sap/ui/vtm/library"},"sap.ui.vtm.extensions.VisibilityIconClickExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.VisibilityIconClickExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","!constructorDescription":"Constructor for a new VisibilityIconClickExtension.","!module":"sap/ui/vtm/extensions/VisibilityIconClickExtension","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.extensions.VisibilityIconClickExtension.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.vtm.Extension","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.extensions.SceneNodeHoverHighlightExtension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.SceneNodeHoverHighlightExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.vtm.extensions.SceneNodeHoverHighlightExtension"},"sap.ui.vtm.TextColor":{"Default":{"!description":"The default text color.","!type":"String","!category":"enum"},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","Grey":{"!description":"Grey. A synonym for Gray.","!type":"String","!category":"enum"},"!category":"static class","!module":"sap/ui/vtm/TextColor","Gray":{"!description":"Gray.","!type":"String","!category":"enum"}},"sap.ui.vtm.interfaces.IVisibilityIconClickExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","!module":"sap/ui/vtm/library"},"sap.ui.vtm.interfaces":{"ILoadProgressExtension":"sap.ui.vtm.interfaces.ILoadProgressExtension","ISceneNodeHoverHighlightExtension":"sap.ui.vtm.interfaces.ISceneNodeHoverHighlightExtension","IInitialViewExtension":"sap.ui.vtm.interfaces.IInitialViewExtension","!module":"sap/ui/vtm/library","IViewLinkingExtension":"sap.ui.vtm.interfaces.IViewLinkingExtension","IDownloadProgressExtension":"sap.ui.vtm.interfaces.IDownloadProgressExtension","IMessageStatusCalculationExtension":"sap.ui.vtm.interfaces.IMessageStatusCalculationExtension","IMessageStatusIconClickExtension":"sap.ui.vtm.interfaces.IMessageStatusIconClickExtension","ISceneNodeHoverTooltipExtension":"sap.ui.vtm.interfaces.ISceneNodeHoverTooltipExtension","ISelectionLinkingExtension":"sap.ui.vtm.interfaces.ISelectionLinkingExtension","IVisibilityHeaderIconClickExtension":"sap.ui.vtm.interfaces.IVisibilityHeaderIconClickExtension","IMessageStatusHeaderIconClickExtension":"sap.ui.vtm.interfaces.IMessageStatusHeaderIconClickExtension","IViewportSelectionLinkingExtension":"sap.ui.vtm.interfaces.IViewportSelectionLinkingExtension","!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"namespace","IVisibilityIconClickExtension":"sap.ui.vtm.interfaces.IVisibilityIconClickExtension","IDisplayStateCalculationExtension":"sap.ui.vtm.interfaces.IDisplayStateCalculationExtension","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.interfaces.IMessageStatusCalculationExtension":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"static class","!module":"sap/ui/vtm/library"},"sap.ui.vtm.Lookup":{"hasValue":{"!description":"Returns whether there are any values stored against the given key.","!type":"fn(key: Object) -> Boolean","!category":"function","parameters":{"key":"type: any, description: The key."},"!static":false},"forEach":{"!description":"Loops over the key/value array pairs calling the callback function for each pair.","!type":"fn(callback: fn()) -> sap.ui.vtm.Lookup","!category":"function","parameters":{"callback":"type: function, description: The callback function to call for each key/value array pair. The first argument to the callback function is the value array and the second parameter is the key."},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Lookup with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!constructorDescription":"Constructor for a new Lookup.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.","!module":"sap/ui/vtm/Lookup","addValue":{"!description":"Adds a value to the set of values stored against a given key.","!type":"fn(key: Object, value: Object) -> sap.ui.vtm.Lookup","!category":"function","parameters":{"value":"type: any, description: The value.","key":"type: any, description: The key."},"!static":false},"clear":{"!description":"Clears the Lookup.","!type":"fn() -> sap.ui.vtm.Lookup","!category":"function","!static":false},"removeValue":{"!description":"Removes a particular value.","!type":"fn(key: Object, value: Object, equalsFunc: fn()) -> sap.ui.vtm.Lookup","!category":"function","parameters":{"value":"type: any, description: The value.","equalsFunc":"type: function, description: A function to compare two values for equality (takes two values as parameters and returns true if they are equal).","key":"type: any, description: The key."},"!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"class","getValues":{"!description":"Gets the values stored against a given key.","!type":"fn(key: Object) -> [Object]","!category":"function","parameters":{"key":"type: any, description: The key to use to index the Lookup."},"!static":false},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.core.Element","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.Lookup.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.vtm.extensions.SceneNodeHoverTooltipExtension":{"getTooltipCallback":{"!description":"Gets current value of property {@link #getTooltipCallback tooltipCallback}.\n\nA callback function that gets a tooltip for a given {@link sap.ui.vtm.SceneNode}. If unspecified, the scene node name is used for the tooltip text.\n\nThe first parameter is the {@link sap.ui.vtm.SceneNode} under cursor.<br> The function should return an object containing a tooltip text for the specified scene node. <pre>\n  {\n    text: [string]\n  }\n<\/pre> If function returns null no tooltip will be displayed.","!type":"fn() -> Object","!category":"function","!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.vtm.extensions.SceneNodeHoverTooltipExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.vtm.Extension.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!category":"class","setTooltipCallback":{"!description":"Sets a new value for property {@link #getTooltipCallback tooltipCallback}.\n\nA callback function that gets a tooltip for a given {@link sap.ui.vtm.SceneNode}. If unspecified, the scene node name is used for the tooltip text.\n\nThe first parameter is the {@link sap.ui.vtm.SceneNode} under cursor.<br> The function should return an object containing a tooltip text for the specified scene node. <pre>\n  {\n    text: [string]\n  }\n<\/pre> If function returns null no tooltip will be displayed.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(oTooltipCallback: Object) -> sap.ui.vtm.extensions.SceneNodeHoverTooltipExtension","!category":"function","parameters":{"oTooltipCallback":"type: any, description: New value for property <code>tooltipCallback<\/code>"},"!static":false},"!constructorDescription":"Constructor for a new SceneNodeHoverTooltipExtension.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getTooltipCallback tooltipCallback} : any<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.vtm.Extension#constructor sap.ui.vtm.Extension}\ncan be used as well.","!module":"sap/ui/vtm/extensions/SceneNodeHoverTooltipExtension","getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.extensions.SceneNodeHoverTooltipExtension.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.vtm.Extension","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>"},"sap.ui.vtm.Viewport_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Viewport with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn()","prototype":"sap.ui.vtm.Viewport"},"sap.ui.vtm.Column_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Column with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.vtm.Column"},"sap.ui.vtm.ViewableLoadStatus":{"LoadFailed":{"!description":"The attempt to load the {@link sap.ui.vtm.Viewable} failed.","!type":"String","!category":"enum"},"Loaded":{"!description":"The {@link sap.ui.vtm.Viewable} was loaded successfully.","!type":"String","!category":"enum"},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","Loading":{"!description":"The {@link sap.ui.vtm.Viewable} is being loaded.","!type":"String","!category":"enum"},"DownloadFailed":{"!description":"The attempt to download the {@link sap.ui.vtm.Viewable} failed.","!type":"String","!category":"enum"},"!category":"static class","Downloaded":{"!description":"The {@link sap.ui.vtm.Viewable} was downloaded successfully.","!type":"String","!category":"enum"},"Downloading":{"!description":"The {@link sap.ui.vtm.Viewable} is being downloaded.","!type":"String","!category":"enum"},"!module":"sap/ui/vtm/ViewableLoadStatus"},"sap.ui.vtm.Tree":{"setOpacity":{"!description":"Sets the <code>opacity<\/code> property of some tree items.","!type":"fn(treeItems: [Object | Object], opacity: Number, recursive: Boolean, visualOnly: Boolean, refresh: Boolean) -> sap.ui.vtm.Tree","!category":"function","parameters":{"visualOnly":"type: boolean, description: If <code>true<\/code> changes are only made to tree items that have a defined <code>visibility<\/code> property value. Default value is <code>true<\/code>.","recursive":"type: boolean, description: If <code>true<\/code> changes are applied recursively to included and excluded descendant tree items. Default value is <code>true<\/code>.","opacity":"type: float, description: The new opacity value of the tree items (between 0.0 and 1.0 inclusive).","refresh":"type: boolean, description: If <code>true<code>, {@link #updateModel} is called to refresh the tree (so the check eye icons are updated) and {@link sap.ui.vtm.Viewport#refresh} is called on the corresponding {@link sap.ui.vtm.Viewport} to recalculate the display state. Default value is <code>true<\/code>.","treeItems":"type: object|object[], description: The tree item or the array of tree items."},"!static":false},"addHeaderControl":{"!description":"Adds some headerControl to the aggregation {@link #getHeaderControls headerControls}.","!type":"fn(oHeaderControl: sap.ui.core.Control) -> sap.ui.vtm.Tree","!category":"function","parameters":{"oHeaderControl":"type: sap.ui.core.Control, description: The headerControl to add; if empty, nothing is inserted"},"!static":false},"detachMessageStatusIconClicked":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:messageStatusIconClicked messageStatusIconClicked} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"!module":"sap/ui/vtm/Tree","updateModel":{"!description":"Updates the model.\n\nThe application should call this whenever changes are made to the tree model.","!type":"fn(forceRecreate: Boolean) -> sap.ui.vtm.Tree","!category":"function","parameters":{"forceRecreate":"type: boolean, description: If <code>true<\/code>, the tree control model and bindings are recreated. If <code>false<\/code> and the model and bindings already exist, this call only results in the bindings being refreshed. Rebuilding the model and bindings is much more expensive than refreshing the bindings, so only use a value of <code>true<\/code> for this parameter when a value of <code>false<\/code> does not result in the the tree being updated correctly."},"!static":false},"destroyHeaderControls":{"!description":"Destroys all the headerControls in the aggregation {@link #getHeaderControls headerControls}.","!type":"fn() -> sap.ui.vtm.Tree","!category":"function","!static":false},"collapseAll":{"!description":"Expands all tree items in the tree.","!type":"fn() -> sap.ui.vtm.Tree","!category":"function","!static":false},"setSelectionMode":{"!description":"Sets a new value for property {@link #getSelectionMode selectionMode}.\n\nThe tree selection mode.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Single<\/code>.","!type":"fn(sSelectionMode: sap.ui.vtm.SelectionMode) -> sap.ui.vtm.Tree","!category":"function","parameters":{"sSelectionMode":"type: sap.ui.vtm.SelectionMode, description: New value for property <code>selectionMode<\/code>"},"!static":false},"getDescendantItems":{"!description":"Gets the descendants of a tree item.\n\nThis method relies on {@link #updateCollections} being called after the tree is populated/changed.","!type":"fn(treeItem: Object | String, treeItemType: sap.ui.vtm.TreeItemType) -> [Object]","!category":"function","parameters":{"treeItemType":"type: sap.ui.vtm.TreeItemType, description: Indicates the types of tree item to match. Defaults to {@link sap.ui.vtm.TreeItemType.Included}.","treeItem":"type: object|string, description: The tree item or id of the tree item to get the descendants of."},"!static":false},"setSelectedItems":{"!description":"Sets the selected tree items.\n\nThis method relies on {@link #updateCollections} being called after the tree is populated/changed.","!type":"fn(items: [Object | Object], scrollToView: Boolean) -> sap.ui.vtm.Tree","!category":"function","parameters":{"items":"type: object|object[], description: Tree item(s) to select in the tree.","scrollToView":"type: boolean, description: When set brings selected item into view. Default value is to true."},"!static":false},"getOpacity":{"!description":"Gets the <code>opacity<\/code> property of a tree item or array of tree items.\n\nIf a single tree item is passed to the method then a single value is returned.<br/> If an array of tree items is passed to the method then an array is returned.","!type":"fn(treeItems: [Object | Object]) -> [Number | Number]","!category":"function","parameters":{"treeItems":"type: object|object[], description: The tree item or the array of tree items."},"!static":false},"getAncestorItems":{"!description":"Finds all ancestors of a tree item.\n\nAn empty array will be returned for root items.<br/> Otherwise an array of ancestor tree items will be returned.<br/> The array will be ordered such that: <ul> <li>The root item will be first element in the array.<\/li> <li>The parent item will be last element in the array.<\/li> <\/ul>\n\nThis method relies on {@link #updateCollections} being called after the tree is populated/changed.","!type":"fn(treeItem: Object | String) -> [Object]","!category":"function","parameters":{"treeItem":"type: object|string, description: The tree item or id of the tree item to get the ancestors of."},"!static":false},"fireDataColumnsChanged":{"!description":"Fires event {@link #event:dataColumnsChanged dataColumnsChanged} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"attachFixedColumnsChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:fixedColumnsChanged fixedColumnsChanged} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Tree<\/code> itself.\n\nRaised when the fixed columns are updated.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Tree<\/code> itself"},"!static":false},"detachHierarchyChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:hierarchyChanged hierarchyChanged} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"fireSelectionChanged":{"!description":"Fires event {@link #event:selectionChanged selectionChanged} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"getPanel":{"!description":"Gets the panel this tree belongs to.","!type":"fn() -> sap.ui.vtm.Panel","!category":"function","!static":false},"removeAllHeaderControls":{"!description":"Removes all the controls from the aggregation {@link #getHeaderControls headerControls}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Control]","!category":"function","!static":false},"attachDragStart":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:dragStart dragStart} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Tree<\/code> itself.\n\nRaised when a tree item drag is initiated. To prevent a drag from being initiated call preventDefault() on the event.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Tree<\/code> itself"},"!static":false},"attachMessageStatusIconClicked":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:messageStatusIconClicked messageStatusIconClicked} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Tree<\/code> itself.\n\nRaised when a tree item message status icon is clicked.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Tree<\/code> itself"},"!static":false},"attachDataColumnsChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:dataColumnsChanged dataColumnsChanged} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Tree<\/code> itself.\n\nRaised when the data columns are updated.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Tree<\/code> itself"},"!static":false},"setFixedColumns":{"!description":"Sets the fixed columns for the tree.","!type":"fn(fixedColumns: [sap.ui.vtm.Column]) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fixedColumns":"type: sap.ui.vtm.Column[], description: The fixed columns."},"!static":false},"fireMessageStatusIconClicked":{"!description":"Fires event {@link #event:messageStatusIconClicked messageStatusIconClicked} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"!proto":"sap.ui.core.Control","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","attachVisibilityIconClicked":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:visibilityIconClicked visibilityIconClicked} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Tree<\/code> itself.\n\nRaised when an icon in the visibility column is clicked.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Tree<\/code> itself"},"!static":false},"detachVisibilityIconClicked":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:visibilityIconClicked visibilityIconClicked} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getVisibility":{"!description":"Gets the <code>visibility<\/code> property of a tree item or array of tree items.\n\nIf a single tree item is passed to the method then a single value is returned.<br/> If an array of tree items is passed to the method then an array is returned.","!type":"fn(treeItems: [Object | Object]) -> [Boolean | Boolean]","!category":"function","parameters":{"treeItems":"type: object|object[], description: The tree item or the array of tree items."},"!static":false},"detachMessageStatusHeaderIconClicked":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:messageStatusHeaderIconClicked messageStatusHeaderIconClicked} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"fireDragOver":{"!description":"Fires event {@link #event:dragOver dragOver} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!type":"fn(mParameters?: Object) -> Boolean","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"fireBeforeModelUpdated":{"!description":"Fires event {@link #event:beforeModelUpdated beforeModelUpdated} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"getAllItems":{"!description":"Finds all tree items in the tree of a given type.\n\nThis method relies on {@link #updateCollections} being called after the tree is populated/changed.","!type":"fn(treeItemType: sap.ui.vtm.TreeItemType) -> [Object]","!category":"function","parameters":{"treeItemType":"type: sap.ui.vtm.TreeItemType, description: Indicates the types of tree item to match. Defaults to {@link sap.ui.vtm.TreeItemType.Included}."},"!static":false},"getRootItems":{"!description":"Gets the root tree items.","!type":"fn() -> [Object]","!category":"function","!static":false},"updateCollections":{"!description":"Updates collections used to find tree items by various criteria.<br/> This method should be called whenever the tree has been populated, when the tree structure has changed or when any of the following fields have been modified for a tree item in the tree: <ul> <li>id<\/li> <li>sceneNodeIds <b>*<\/b><\/li> <li>includedChildren<\/li> <li>excludedChildren<\/li> <\/ul> <br/> Correct usage of this method is required by the following methods: <ul> <li>{@link #getItem}<\/li> <li>{@link #getParentItem}<\/li> <li>{@link #getDescendantItems}<\/li> <li>{@link #getAncestorItems}<\/li> <li>{@link #getItemsBySceneNodeId} <b>*<\/b><\/li> <li>{@link #setExpanded}<\/li> <li>{@link #getExpanded}<\/li> <li>{@link #expandAncestors}<\/li> <li>{@link #scrollIntoView}<\/li> <li>{@link #setSelectedItems}<\/li> <li>{@link #isIncludedItem}<\/li> <li>{@link #isExcludedItem}<\/li> <li>{@link #traverseBranch}<\/li> <\/ul> <br/> <b>*<\/b> When the only changes to the tree since the last call to {@link #updateCollections} are changes to the <code>sceneNodeIds<code> properties of the tree items, {@link #updateTreeItemsBySceneNodeId} can be used instead of {@link #updateCollections}.","!type":"fn(checkForHierarchyChanges: Boolean) -> sap.ui.vtm.Tree","!category":"function","parameters":{"checkForHierarchyChanges":"type: boolean, description: When true a <code>hierarchyChanged<\/code> event will be raised if the hierarchy has changed since the last time this method was called. This method is called when the tree is empty as part of the {@link sap.ui.vtm.Tree} constructor, so the first time it is called from application code a <code>hierarchyChanged<\/code> event will be raised if the tree has been populated. The default value for the parameter is <code>true<\/code>."},"!static":false},"!category":"class","detachExpandedChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:expandedChanged expandedChanged} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getItemByBindingContextPath":{"!description":"Finds a tree item by binding context path or returns undefined if it is not found. This is typically used to find the corresponding tree item in event handlers for custom column template controls.","!type":"fn(bindingContextPath: String) -> Object | undefined","!category":"function","parameters":{"bindingContextPath":"type: string, description: The binding context path to look for."},"!static":false},"addRoot":{"!description":"Adds a root item to the tree.","!type":"fn(rootItemToAdd: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"rootItemToAdd":"type: object, description: The root tree item to remove."},"!static":false},"traverseBranch":{"!description":"Recursively traverses a tree branch calling a function on each item (including the tree item that is the root of the branch).","!type":"fn(treeItem: Object, callback: fn()) -> sap.ui.vtm.Tree","!category":"function","parameters":{"treeItem":"type: object, description: The root of the branch to apply the function to.","callback":"type: function, description: The function to apply to tree items in the branch.<br/> The first parameter to the callback function is the current tree item object (at the current point of the traversal.<br/> The second parameter to the callback function is the set of ancestors of the current tree item in the traversal.<br/> The function may return a {@link sap.ui.vtm.ChildCollectionType} value to specify which immediate children of the tree item to traverse.<br/> If no such value is returned a default of {@link sap.ui.vtm.ChildCollectionType.Included} is used."},"!static":false},"detachVisibilityHeaderIconClicked":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:visibilityHeaderIconClicked visibilityHeaderIconClicked} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"detachFixedColumnsChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:fixedColumnsChanged fixedColumnsChanged} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"setHighlightColor":{"!description":"Sets the <code>highlightColor<\/code> property of some tree items.","!type":"fn(treeItems: [Object | Object], highlightColor: sap.ui.core.CSSColor, recursive: Boolean, visualOnly: Boolean, refresh: Boolean) -> sap.ui.vtm.Tree","!category":"function","parameters":{"highlightColor":"type: sap.ui.core.CSSColor, description: The new highlight color value of the tree items.","visualOnly":"type: boolean, description: If <code>true<\/code> changes are only made to tree items that have a defined <code>visibility<\/code> property value. Default value is <code>true<\/code>.","recursive":"type: boolean, description: If <code>true<\/code> changes are applied recursively to included and excluded descendant tree items. Default value is <code>true<\/code>.","refresh":"type: boolean, description: If <code>true<code>, {@link #updateModel} is called to refresh the tree (so the check eye icons are updated) and {@link sap.ui.vtm.Viewport#refresh} is called on the corresponding {@link sap.ui.vtm.Viewport} to recalculate the display state. Default value is <code>true<\/code>.","treeItems":"type: object|object[], description: The tree item or the array of tree items."},"!static":false},"attachBeforeModelUpdated":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:beforeModelUpdated beforeModelUpdated} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Tree<\/code> itself.\n\nRaised before the model is updated.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Tree<\/code> itself"},"!static":false},"fireMessageStatusHeaderIconClicked":{"!description":"Fires event {@link #event:messageStatusHeaderIconClicked messageStatusHeaderIconClicked} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"expandToLevel":{"!description":"Expands tree items in the tree from the root down to the given level.","!type":"fn(iLevel: Number) -> sap.ui.vtm.Tree","!category":"function","parameters":{"iLevel":"type: int, description: The tree level to expand to."},"!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","fireExpandedChanged":{"!description":"Fires event {@link #event:expandedChanged expandedChanged} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"setExpanded":{"!description":"Expands or collapses the row associated with a tree item.\n\nThis method relies on {@link #updateCollections} being called after the tree is populated/changed.","!type":"fn(oTreeItem: Object, bExpanded: Boolean) -> sap.ui.vtm.Tree","!category":"function","parameters":{"bExpanded":"type: boolean, description: If <code>true<\/code> the row will be expanded otherwise it will be collapsed.","oTreeItem":"type: object, description: The tree item."},"!static":false},"detachBeforeModelUpdated":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:beforeModelUpdated beforeModelUpdated} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"detachSelectionChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:selectionChanged selectionChanged} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"isIncludedItem":{"!description":"Returns whether a tree item object is an included tree item in the tree model of this {@link sap.ui.vtm.Tree}.\n\nThis method relies on {@link #updateCollections} being called after the tree is populated/changed.","!type":"fn(treeItem: Object | String) -> Boolean","!category":"function","parameters":{"treeItem":"type: object|string, description: The tree item or tree item id to check."},"!static":false},"setVisibility":{"!description":"Sets the <code>visibility<\/code> property of some tree items.","!type":"fn(treeItems: [Object | Object], visibility: Boolean, recursive: Boolean, visualOnly: Boolean, refresh: Boolean) -> sap.ui.vtm.Tree","!category":"function","parameters":{"visibility":"type: boolean, description: The new visibility state of the tree items.","visualOnly":"type: boolean, description: If <code>true<\/code> changes are only made to tree items that have a defined <code>visibility<\/code> property value. Default value is <code>true<\/code>.","recursive":"type: boolean, description: If <code>true<\/code> changes are applied recursively to included and excluded descendant tree items. Default value is <code>true<\/code>.","refresh":"type: boolean, description: If <code>true<code>, {@link #updateModel} is called to refresh the tree (so the check eye icons are updated) and {@link sap.ui.vtm.Viewport#refresh} is called on the corresponding {@link sap.ui.vtm.Viewport} to recalculate the display state. Default value is <code>true<\/code>.","treeItems":"type: object|object[], description: The tree item or the array of tree items."},"!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.vtm.Tree.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"indexOfHeaderControl":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getHeaderControls headerControls}. and returns its index if found or -1 otherwise.","!type":"fn(oHeaderControl: sap.ui.core.Control) -> Number","!category":"function","parameters":{"oHeaderControl":"type: sap.ui.core.Control, description: The headerControl whose index is looked for"},"!static":false},"insertHeaderControl":{"!description":"Inserts a headerControl into the aggregation {@link #getHeaderControls headerControls}.","!type":"fn(oHeaderControl: sap.ui.core.Control, iIndex: Number) -> sap.ui.vtm.Tree","!category":"function","parameters":{"oHeaderControl":"type: sap.ui.core.Control, description: The headerControl to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the headerControl should be inserted at; for a negative value of <code>iIndex<\/code>, the headerControl is inserted at position 0; for a value greater than the current size of the aggregation, the headerControl is inserted at the last position"},"!static":false},"removeRoot":{"!description":"Removes a root item from the tree.","!type":"fn(rootItemToRemove: String | Object) -> Object | undefined","!category":"function","parameters":{"rootItemToRemove":"type: string|object, description: The root tree item to remove (or its id)."},"!static":false},"attachMessageStatusHeaderIconClicked":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:messageStatusHeaderIconClicked messageStatusHeaderIconClicked} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Tree<\/code> itself.\n\nRaised when a tree item message status icon is clicked.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Tree<\/code> itself"},"!static":false},"expandAll":{"!description":"Expands all tree items in the tree.","!type":"fn() -> sap.ui.vtm.Tree","!category":"function","!static":false},"isEmpty":{"!description":"Returns whether the tree is empty.","!type":"fn() -> Boolean","!category":"function","!static":false},"getItemsBySceneNodeId":{"!description":"Finds the set of tree items that are associated with a particular scene node id.\n\nThis method relies on {@link #updateCollections} being called after the tree is populated/changed.","!type":"fn(sceneNodeIds: [String | String], treeItemType: sap.ui.vtm.TreeItemType) -> [Object]","!category":"function","parameters":{"treeItemType":"type: sap.ui.vtm.TreeItemType, description: Indicates the types of tree item to match. Defaults to {@link sap.ui.vtm.TreeItemType.Included}.","sceneNodeIds":"type: string|string[], description: The scene node ID or IDs to find."},"!static":false},"fireVisibilityHeaderIconClicked":{"!description":"Fires event {@link #event:visibilityHeaderIconClicked visibilityHeaderIconClicked} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"validateTree":{"!description":"Validates the tree. If errors are found they are written to the console log and an exception is thrown.","!type":"fn() -> sap.ui.vtm.Tree","!category":"function","!static":false},"attachHierarchyChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:hierarchyChanged hierarchyChanged} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Tree<\/code> itself.\n\nRaised when the tree hierarchy (the set of parent child relationships) changes.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Tree<\/code> itself"},"!static":false},"fireModelUpdated":{"!description":"Fires event {@link #event:modelUpdated modelUpdated} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"updateTreeItemsBySceneNodeId":{"!description":"Update the collection used by {@link #getItemsBySceneNodeId}.\n\nThis is useful when the only changes to the tree since the last call to {@link #updateCollections} are changes to the <code>sceneNodeIds<code> properties of the tree items.","!type":"fn() -> sap.ui.vtm.Tree","!category":"function","!static":false},"detachDragStart":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:dragStart dragStart} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getDataColumns":{"!description":"Gets the set of data columns for the tree.","!type":"fn() -> [sap.ui.vtm.Column]","!category":"function","!static":false},"!constructorDescription":"This class is not intended to be instantiated directly by application code.\nA {@link sap.ui.vtm.Tree} object is created when a {@link sap.ui.vtm.Panel} object is instantiated.\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSelectionMode selectionMode} : sap.ui.vtm.SelectionMode (default: Single)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getHeaderControls headerControls} : sap.ui.core.Control[]<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:dragStart dragStart} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:dragOver dragOver} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:drop drop} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:selectionChanged selectionChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:visibilityHeaderIconClicked visibilityHeaderIconClicked} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:visibilityIconClicked visibilityIconClicked} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:expandedChanged expandedChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:fixedColumnsChanged fixedColumnsChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:dataColumnsChanged dataColumnsChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:beforeModelUpdated beforeModelUpdated} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:modelUpdated modelUpdated} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:messageStatusIconClicked messageStatusIconClicked} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:messageStatusHeaderIconClicked messageStatusHeaderIconClicked} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:hierarchyChanged hierarchyChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","fireVisibilityIconClicked":{"!description":"Fires event {@link #event:visibilityIconClicked visibilityIconClicked} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"attachExpandedChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:expandedChanged expandedChanged} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Tree<\/code> itself.\n\nRaised when a tree item entry is expanded or collapsed.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Tree<\/code> itself"},"!static":false},"removeHeaderControl":{"!description":"Removes a headerControl from the aggregation {@link #getHeaderControls headerControls}.","!type":"fn(vHeaderControl: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","parameters":{"vHeaderControl":"type: int|string|sap.ui.core.Control, description: The headerControl to remove or its index or id"},"!static":false},"expandAncestors":{"!description":"Expands all ancestors of specified tree item.\n\nThis method relies on {@link #updateCollections} being called after the tree is populated/changed.","!type":"fn(treeItem: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"treeItem":"type: object, description: Tree item."},"!static":false},"attachModelUpdated":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:modelUpdated modelUpdated} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Tree<\/code> itself.\n\nRaised after the model has been updated.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Tree<\/code> itself"},"!static":false},"detachDataColumnsChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:dataColumnsChanged dataColumnsChanged} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"attachDrop":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:drop drop} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Tree<\/code> itself.\n\nRaised when a tree item is dropped on a tree item or an unpopulated row in a tree. A drop cannot occur unless preventDefault() is called on the sap.ui.base.Event object in the preceding dragOver event.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Tree<\/code> itself"},"!static":false},"getFixedColumns":{"!description":"Gets the fixed columns for the tree.","!type":"fn() -> [sap.ui.vtm.Column]","!category":"function","!static":false},"detachDrop":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:drop drop} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"setRootItems":{"!description":"Sets the root tree items.","!type":"fn(rootItems: [Object]) -> sap.ui.vtm.Tree","!category":"function","parameters":{"rootItems":"type: object[], description: The root tree items."},"!static":false},"setDataColumns":{"!description":"Sets the data columns for the tree.","!type":"fn(dataColumns: [sap.ui.vtm.Column]) -> sap.ui.vtm.Tree","!category":"function","parameters":{"dataColumns":"type: sap.ui.vtm.Column[], description: The data columns for the tree."},"!static":false},"attachSelectionChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:selectionChanged selectionChanged} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Tree<\/code> itself.\n\nRaised when the set of selected tree items for a tree changes.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Tree<\/code> itself"},"!static":false},"detachModelUpdated":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:modelUpdated modelUpdated} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"fireHierarchyChanged":{"!description":"Fires event {@link #event:hierarchyChanged hierarchyChanged} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"getExpanded":{"!description":"Gets whether the row associated with a tree item is expanded.\n\nThis method relies on {@link #updateCollections} being called after the tree is populated/changed.","!type":"fn(oTreeItem: Object) -> Boolean","!category":"function","parameters":{"oTreeItem":"type: object, description: The tree item."},"!static":false},"isExcludedItem":{"!description":"Returns whether a tree item object is an excluded tree item in the tree model of this {@link sap.ui.vtm.Tree}.\n\nThis method relies on {@link #updateCollections} being called after the tree is populated/changed.","!type":"fn(treeItem: Object | String) -> Boolean","!category":"function","parameters":{"treeItem":"type: object|string, description: The tree item or tree item id to check."},"!static":false},"attachDragOver":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:dragOver dragOver} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Tree<\/code> itself.\n\nRaised when a tree item is dragged over a tree item or an unpopulated row in a tree. To allow a drop to occur call preventDefault() on the event.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Tree<\/code> itself"},"!static":false},"detachDragOver":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:dragOver dragOver} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called, when the event occurs","oListener":"type: object, description: Context object on which the given function had to be called"},"!static":false},"getSelectionMode":{"!description":"Gets current value of property {@link #getSelectionMode selectionMode}.\n\nThe tree selection mode.\n\nDefault value is <code>Single<\/code>.","!type":"fn() -> sap.ui.vtm.SelectionMode","!category":"function","!static":false},"getItem":{"!description":"Finds a tree item by id or returns undefined if it is not found.<\/br> This method relies on {@link #updateCollections} being called after the tree is populated/changed.","!type":"fn(treeItemId: String) -> Object | undefined","!category":"function","parameters":{"treeItemId":"type: string, description: The tree item id to look for."},"!static":false},"fireFixedColumnsChanged":{"!description":"Fires event {@link #event:fixedColumnsChanged fixedColumnsChanged} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"getHighlightColor":{"!description":"Gets the <code>highlightColor<\/code> property of a tree item or array of tree items.\n\nIf a single tree item is passed to the method then a single value is returned.<br/> If an array of tree items is passed to the method then an array is returned.","!type":"fn(treeItems: [Object | Object]) -> [String | String]","!category":"function","parameters":{"treeItems":"type: object|object[], description: The tree item or the array of tree items."},"!static":false},"fireDrop":{"!description":"Fires event {@link #event:drop drop} to attached listeners.","!type":"fn(mParameters?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"fireDragStart":{"!description":"Fires event {@link #event:dragStart dragStart} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!type":"fn(mParameters?: Object) -> Boolean","!category":"function","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"},"!static":false},"getHeaderControls":{"!description":"Gets content of aggregation {@link #getHeaderControls headerControls}.\n\nA set of controls such as toolbars to show above the tree.","!type":"fn() -> [sap.ui.core.Control]","!category":"function","!static":false},"getParentItem":{"!description":"Finds a parent tree item or returns undefined if it is not found.\n\nThis method relies on {@link #updateCollections} being called after the tree is populated/changed.","!type":"fn(treeItem: Object | String) -> Object | undefined","!category":"function","parameters":{"treeItem":"type: object|string, description: The child tree item or child tree item id."},"!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Tree with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"scrollIntoView":{"!description":"Brings specified tree item to view, expanding the tree if necessary.\n\nThis method relies on {@link #updateCollections} being called after the tree is populated/changed.","!type":"fn(treeItem: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"treeItem":"type: object, description: The tree item to scroll into view."},"!static":false},"traverseTree":{"!description":"Recursively traverses the tree calling a function on each item.","!type":"fn(callback: fn()) -> sap.ui.vtm.Tree","!category":"function","parameters":{"callback":"type: function, description: The function to apply to tree items in the tree.<br/> The first parameter to the callback function is the current tree item object (at the current point of the traversal.<br/> The second parameter to the callback function is the set of ancestors of the current tree item.<br/> The function may return a {@link sap.ui.vtm.ChildCollectionType} value to specify which immediate children to traverse. If no such value is returned a default of {@link sap.ui.vtm.ChildCollectionType.Included} is used."},"!static":false},"getSelectedItems":{"!description":"Gets the selected tree items.","!type":"fn() -> [Object]","!category":"function","!static":false},"attachVisibilityHeaderIconClicked":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:visibilityHeaderIconClicked visibilityHeaderIconClicked} event of this <code>sap.ui.vtm.Tree<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.vtm.Tree<\/code> itself.\n\nRaised when the icon in the visibility column header is clicked.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.vtm.Tree","!category":"function","parameters":{"fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event","oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.vtm.Tree<\/code> itself"},"!static":false}},"sap.ui.vtm.Viewable_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.vtm.Viewable with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","parameters":{"FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","oClassInfo":"type: object, description: Object literal with information about the class","sClassName":"type: string, description: Name of the class being created"},"!static":true},"!type":"fn({string: undefined, mSettings: Object)","prototype":"sap.ui.vtm.Viewable"}},"!name":"sap.ui.vtm","!version":"1.20.0"}