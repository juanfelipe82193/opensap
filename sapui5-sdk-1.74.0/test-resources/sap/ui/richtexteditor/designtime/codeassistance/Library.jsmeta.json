{"!name":"sap.ui.richtexteditor","!version":"1.20.0","!define":{"sap.ui.richtexteditor.RichTextEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.richtexteditor.RichTextEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.richtexteditor.RichTextEditor"},"sap.ui.richtexteditor.EditorType":{"!description":"Determines which editor component should be used for editing the text.","TinyMCE":{"!description":"Uses TinyMCE version 3 as editor (default)","!category":"enum","!type":"String"},"!module":"sap/ui/richtexteditor/library","TinyMCE4":{"!description":"Uses TinyMCE version 4 as editor","!category":"enum","!type":"String"},"!category":"static class"},"sap":{"sap":"sap","ui":"sap.ui","!category":"namespace"},"sap.ui.richtexteditor.IToolbar":{"!description":"Interface for controls which are suitable as a Toolbar for RichTextEditor.","!module":"sap/ui/richtexteditor/library","!category":"static class"},"sap.ui":{"richtexteditor":"sap.ui.richtexteditor","!category":"namespace"},"sap.ui.richtexteditor":{"showGroupLink":{"!description":"Determines whether the toolbar button group containing commands like Create Link and Remove Link is available. Changing this after the initial rendering will result in some visible redrawing.","!category":"enum","!type":"Boolean"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"plugins":{"!description":"An array of plugin configuration objects with the obligatory property \"name\". Each object has to contain a property \"name\" which then contains the plugin name/ID.","!category":"enum","!type":"[Object]"},"!category":"namespace","IToolbar":"sap.ui.richtexteditor.IToolbar","showGroupInsert":{"!description":"Determines whether the toolbar button group containing commands like Insert Image and Insert Smiley is available. Changing this after the initial rendering will result in some visible redrawing.","!category":"enum","!type":"Boolean"},"required":{"!description":"Determines whether a value is required.","!category":"enum","!type":"Boolean"},"textDirection":{"!description":"The text direction","!category":"enum","!type":"sap.ui.core.TextDirection"},"showGroupFontStyle":{"!description":"Determines whether the toolbar button group containing commands like Bold, Italic, Underline and Strikethrough is available. Changing this after the initial rendering will result in some visible redrawing.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"showGroupClipboard":{"!description":"Determines whether the toolbar button group containing commands like Cut, Copy and Paste is available. Changing this after the initial rendering will result in some visible redrawing.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"RichTextEditor":"sap.ui.richtexteditor.RichTextEditor_obj","value":{"!description":"An HTML string representing the editor content. Because this is HTML, the value cannot be generically escaped to prevent cross-site scripting, so the application is responsible for doing so. Overwriting this property would also reset editor's Undo manager and buttons \"Undo\"/\"Redo\" would be set to their initial state.","!category":"enum","!type":"String"},"height":{"!description":"Height of RichTextEditor control in CSS units. <b>Note:<\/b> If the height property results in a value smaller than 200px, the minimum height of 200px will be applied.","!category":"enum","!type":"sap.ui.core.CSSSize"},"!description":"A rich text editor (RTE) control. Requires installation of an additional rich text editor library.","sanitizeValue":{"!description":"Determines whether to run the HTML sanitizer once the value (HTML markup) is applied or not. To configure allowed URLs please use the whitelist API via <code>jQuery.sap.addUrlWhitelist<\/code>","!category":"enum","!type":"Boolean"},"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"showGroupUndo":{"!description":"Determines whether the toolbar button group containing commands like Undo and Redo is available. Changing this after the initial rendering will result in some visible redrawing.","!category":"enum","!type":"Boolean"},"useLegacyTheme":{"!description":"Determines whether or not to use the legacy theme for the toolbar buttons. If this is set to false, the default theme for the editor will be used (which might change slightly with every update). The legacy theme has the disadvantage that not all functionality has its own icon, so using non default buttons might lead to invisible buttons with the legacy theme - use the default editor theme in this case.","!category":"enum","!type":"Boolean"},"buttonGroups":{"!description":"An array of button configurations. These configurations contain the names of buttons as array in the property \"buttons\" and the name of the group in \"name\", they can also contain the \"row\" where the buttons should be placed, a \"priority\" and whether the buttons are \"visible\". See method addButtonGroup() for more details on the structure of the objects in this array.","!category":"enum","!type":"[Object]"},"editable":{"!description":"Determines whether the editor content can be modified by the user. When set to \"false\" there might not be any editor toolbar.","!category":"enum","!type":"Boolean"},"EditorType":"sap.ui.richtexteditor.EditorType","editorLocation":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.25.0 The editorLocation is set implicitly when choosing the editorType.<br>Relative or absolute URL where the editor is available. Must be on the same server. <b>Note:<\/b> Any attempts to set this property after the first rendering will not have any effect.","!category":"enum","!type":"String"},"showGroupFont":{"!description":"Determines whether the toolbar button group containing commands like Font, Font Size and Colors is available. Changing this after the initial rendering will result in some visible redrawing.","!category":"enum","!type":"Boolean"},"wrapping":{"!description":"Determines whether the text in the editor is wrapped. This does not affect the editor's value, only the representation in the control.","!category":"enum","!type":"Boolean"},"showGroupStructure":{"!description":"Determines whether the toolbar button group containing commands like Bullets and Indentation is available. Changing this after the initial rendering will result in some visible redrawing.","!category":"enum","!type":"Boolean"},"!module":"sap/ui/richtexteditor/library","!helpDescription":"A rich text editor (RTE) control. Requires installation of an additional rich text editor library.","showGroupTextAlign":{"!description":"Determines whether the toolbar button group containing text alignment commands is available. Changing this after the initial rendering will result in some visible redrawing.","!category":"enum","!type":"Boolean"},"width":{"!description":"Width of RichTextEditor control in CSS units.","!category":"enum","!type":"sap.ui.core.CSSSize"},"customToolbar":{"!description":"Determines whether a Fiori Toolbar is used instead of the TinyMCE default toolbar one. It is applied only when the EditorType is TinyMCE4 and sap.m library is loaded. <b>Note:<\/b> The <code>customToolbar<\/code> property will have effect only on initial loading. Changing it during runtime will not affect the initially loaded toolbar.","!category":"enum","!type":"Boolean"},"editorType":{"!description":"The editor implementation to use.\n\nValid values are the ones found under sap.ui.richtexteditor.EditorType and any other editor identifier that may be introduced by other groups (hence this is not an enumeration).\n\n<b>Notes:<\/b> <ul><li>TinyMCE version 3 is no longer supported and cannot be used. If you set the property to TinyMCE, it will load TinyMCE version 4.<\/li> <li>Any attempts to set this property after the first rendering will not have any effect.<\/li><\/ul>","!category":"enum","!type":"String"}},"sap.ui.richtexteditor.RichTextEditor":{"getShowGroupFont":{"!description":"Gets current value of property {@link #getShowGroupFont showGroupFont}.\n\nDetermines whether the toolbar button group containing commands like Font, Font Size and Colors is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"indexOfCustomButton":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getCustomButtons customButtons}. and returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oCustomButton: sap.ui.core.Control) -> Number","parameters":{"oCustomButton":"type: sap.ui.core.Control, description: The customButton whose index is looked for"}},"setRequired":{"!description":"Sets a new value for property {@link #getRequired required}.\n\nDetermines whether a value is required.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bRequired: Boolean) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"bRequired":"type: boolean, description: New value for property <code>required<\/code>"}},"detachReady":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:ready ready} event of this <code>sap.ui.richtexteditor.RichTextEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getEditable":{"!description":"Gets current value of property {@link #getEditable editable}.\n\nDetermines whether the editor content can be modified by the user. When set to \"false\" there might not be any editor toolbar.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"fireReadyRecurring":{"!description":"Fires event {@link #event:readyRecurring readyRecurring} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"attachReadyRecurring":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:readyRecurring readyRecurring} event of this <code>sap.ui.richtexteditor.RichTextEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.richtexteditor.RichTextEditor<\/code> itself.\n\nAnalogous to the ready event, the event is fired when the used editor is loaded and ready. But the event is fired after every time the control is ready to use and not only once like the ready event.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.richtexteditor.RichTextEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:change change} event of this <code>sap.ui.richtexteditor.RichTextEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"removeAllCustomButtons":{"!description":"Removes all the controls from the aggregation {@link #getCustomButtons customButtons}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"getShowGroupUndo":{"!description":"Gets current value of property {@link #getShowGroupUndo showGroupUndo}.\n\nDetermines whether the toolbar button group containing commands like Undo and Redo is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setUseLegacyTheme":{"!description":"Sets a new value for property {@link #getUseLegacyTheme useLegacyTheme}.\n\nDetermines whether or not to use the legacy theme for the toolbar buttons. If this is set to false, the default theme for the editor will be used (which might change slightly with every update). The legacy theme has the disadvantage that not all functionality has its own icon, so using non default buttons might lead to invisible buttons with the legacy theme - use the default editor theme in this case.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bUseLegacyTheme: Boolean) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"bUseLegacyTheme":"type: boolean, description: New value for property <code>useLegacyTheme<\/code>"}},"getShowGroupInsert":{"!description":"Gets current value of property {@link #getShowGroupInsert showGroupInsert}.\n\nDetermines whether the toolbar button group containing commands like Insert Image and Insert Smiley is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setShowGroupInsert":{"!description":"Sets a new value for property {@link #getShowGroupInsert showGroupInsert}.\n\nDetermines whether the toolbar button group containing commands like Insert Image and Insert Smiley is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bShowGroupInsert: Boolean) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"bShowGroupInsert":"type: boolean, description: New value for property <code>showGroupInsert<\/code>"}},"getShowGroupClipboard":{"!description":"Gets current value of property {@link #getShowGroupClipboard showGroupClipboard}.\n\nDetermines whether the toolbar button group containing commands like Cut, Copy and Paste is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setButtonGroups":{"!description":"Sets the button groups to the editor.","!static":false,"!category":"function","!type":"fn(aGroups?: Array) -> Object","parameters":{"aGroups":"type: array, description: Array of names or objects containing the group information"}},"detachReadyRecurring":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:readyRecurring readyRecurring} event of this <code>sap.ui.richtexteditor.RichTextEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"setWrapping":{"!description":"Sets a new value for property {@link #getWrapping wrapping}.\n\nDetermines whether the text in the editor is wrapped. This does not affect the editor's value, only the representation in the control.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bWrapping: Boolean) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"bWrapping":"type: boolean, description: New value for property <code>wrapping<\/code>"}},"setShowGroupFontStyle":{"!description":"Sets a new value for property {@link #getShowGroupFontStyle showGroupFontStyle}.\n\nDetermines whether the toolbar button group containing commands like Bold, Italic, Underline and Strikethrough is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bShowGroupFontStyle: Boolean) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"bShowGroupFontStyle":"type: boolean, description: New value for property <code>showGroupFontStyle<\/code>"}},"getNativeApi":{"!description":"Returns the current editor's instance. CAUTION: using the native editor introduces a dependency to that editor and breaks the wrapping character of the RichTextEditor control, so it should only be done in justified cases.","!static":false,"!category":"function","!type":"fn() -> Object"},"getPlugins":{"!description":"Gets current value of property {@link #getPlugins plugins}.\n\nAn array of plugin configuration objects with the obligatory property \"name\". Each object has to contain a property \"name\" which then contains the plugin name/ID.\n\nDefault value is <code>[]<\/code>.","!static":false,"!category":"function","!type":"fn() -> [Object]"},"getShowGroupFontStyle":{"!description":"Gets current value of property {@link #getShowGroupFontStyle showGroupFontStyle}.\n\nDetermines whether the toolbar button group containing commands like Bold, Italic, Underline and Strikethrough is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getSanitizeValue":{"!description":"Gets current value of property {@link #getSanitizeValue sanitizeValue}.\n\nDetermines whether to run the HTML sanitizer once the value (HTML markup) is applied or not. To configure allowed URLs please use the whitelist API via <code>jQuery.sap.addUrlWhitelist<\/code>\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getCustomToolbar":{"!description":"Gets current value of property {@link #getCustomToolbar customToolbar}.\n\nDetermines whether a Fiori Toolbar is used instead of the TinyMCE default toolbar one. It is applied only when the EditorType is TinyMCE4 and sap.m library is loaded. <b>Note:<\/b> The <code>customToolbar<\/code> property will have effect only on initial loading. Changing it during runtime will not affect the initially loaded toolbar.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getUseLegacyTheme":{"!description":"Gets current value of property {@link #getUseLegacyTheme useLegacyTheme}.\n\nDetermines whether or not to use the legacy theme for the toolbar buttons. If this is set to false, the default theme for the editor will be used (which might change slightly with every update). The legacy theme has the disadvantage that not all functionality has its own icon, so using non default buttons might lead to invisible buttons with the legacy theme - use the default editor theme in this case.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!description":"The RichTextEditor-Control is used to enter formatted text. It uses the third-party component called TinyMCE. In addition to the native toolbar, you can also use a toolbar built with SAPUI5 controls. <h3>Overview<\/h3>\n\nWith version 1.48 onward, aside from the native toolbar of the TinyMCE, the <code>RichTextEditor<\/code> can also use a toolbar built with SAPUI5 controls. Which toolbar is used is taken into consideration only while the control is being initialized and it will not be possible to change it during runtime, because of lifecycle incompatibilities between the SAPUI5 and the third-party library. The custom toolbar acts like a wrapper to the native toolbar and takes care of synchronizing the state of its internal controls with the current state of the selection in the editor (bold, italics, font styles etc.).\n\n<h4>Limitations<\/h4>\n\n<b>Note: The <code>RichTextEditor<\/code> uses a third-party component and therefore some additional limitations apply for its proper usage and support. For more information see the Preamble section in {@link topic:d4f3f1598373452bb73f2120930c133c sap.ui.richtexteditor}. <\/b>\n\n<h3>Guidelines<\/h3> <ul> <li> The <code>RichTextEditor<\/code> should be used for desktop apps only.<\/li> <li> In order to be usable, the control needs a minimum width 17.5 rem and height of 12.5 rem.<\/li> <li> Do not instantiate the <code>RichTextEditor<\/code> from a hidden container.<\/li> <li> Make sure you destroy the <code>RichTextEditor<\/code> instance instead of hiding it and create a new one when you show it again.<\/li> <\/ul>\n\n<h3>Usage<\/h3>\n\n<h4>When to use<\/h4> <ul> <li>You want to enable users to enter text and other elements (tables, images) with different styles and colors.<\/li> <li>You need to provide a tool for texts that require additional formatting.<\/li> <\/ul>\n\n<h4> When not to use<\/h4> <ul> <li>You want to let users add simple text that doesn\u2019t require formatting. Use {@link sap.m.TextArea text area} instead.<\/li> <li>Use callbacks to the native third-party API with care, as there may be compatibility issues with later versions.<\/li> <\/ul>","getMetadata":{"!description":"Returns a metadata object for class sap.ui.richtexteditor.RichTextEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setTextDirection":{"!description":"Sets a new value for property {@link #getTextDirection textDirection}.\n\nThe text direction\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Inherit<\/code>.","!static":false,"!category":"function","!type":"fn(sTextDirection: sap.ui.core.TextDirection) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"sTextDirection":"type: sap.ui.core.TextDirection, description: New value for property <code>textDirection<\/code>"}},"attachReady":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:ready ready} event of this <code>sap.ui.richtexteditor.RichTextEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.richtexteditor.RichTextEditor<\/code> itself.\n\nFired when the used editor is loaded and ready (its HTML is also created).","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.richtexteditor.RichTextEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"attachChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:change change} event of this <code>sap.ui.richtexteditor.RichTextEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.richtexteditor.RichTextEditor<\/code> itself.\n\nEvent is fired when the text in the field has changed AND the focus leaves the editor or when the Enter key is pressed.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.richtexteditor.RichTextEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"addCustomButton":{"!description":"Adds some customButton to the aggregation {@link #getCustomButtons customButtons}.","!static":false,"!category":"function","!type":"fn(oCustomButton: sap.ui.core.Control) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"oCustomButton":"type: sap.ui.core.Control, description: The customButton to add; if empty, nothing is inserted"}},"fireChange":{"!description":"Fires event {@link #event:change change} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"setHeight":{"!description":"Sets a new value for property {@link #getHeight height}.\n\nHeight of RichTextEditor control in CSS units. <b>Note:<\/b> If the height property results in a value smaller than 200px, the minimum height of 200px will be applied.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sHeight: sap.ui.core.CSSSize) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"sHeight":"type: sap.ui.core.CSSSize, description: New value for property <code>height<\/code>"}},"detachBeforeEditorInit":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:beforeEditorInit beforeEditorInit} event of this <code>sap.ui.richtexteditor.RichTextEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"extend":{"!description":"Creates a new subclass of class sap.ui.richtexteditor.RichTextEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setShowGroupTextAlign":{"!description":"Sets a new value for property {@link #getShowGroupTextAlign showGroupTextAlign}.\n\nDetermines whether the toolbar button group containing text alignment commands is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bShowGroupTextAlign: Boolean) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"bShowGroupTextAlign":"type: boolean, description: New value for property <code>showGroupTextAlign<\/code>"}},"!module":"sap/ui/richtexteditor/RichTextEditor","!helpDescription":"The RichTextEditor-Control is used to enter formatted text. It uses the third-party component called TinyMCE. In addition to the native toolbar, you can also use a toolbar built with SAPUI5 controls. <h3>Overview<\/h3>\n\nWith version 1.48 onward, aside from the native toolbar of the TinyMCE, the <code>RichTextEditor<\/code> can also use a toolbar built with SAPUI5 controls. Which toolbar is used is taken into consideration only while the control is being initialized and it will not be possible to change it during runtime, because of lifecycle incompatibilities between the SAPUI5 and the third-party library. The custom toolbar acts like a wrapper to the native toolbar and takes care of synchronizing the state of its internal controls with the current state of the selection in the editor (bold, italics, font styles etc.).\n\n<h4>Limitations<\/h4>\n\n<b>Note: The <code>RichTextEditor<\/code> uses a third-party component and therefore some additional limitations apply for its proper usage and support. For more information see the Preamble section in {@link topic:d4f3f1598373452bb73f2120930c133c sap.ui.richtexteditor}. <\/b>\n\n<h3>Guidelines<\/h3> <ul> <li> The <code>RichTextEditor<\/code> should be used for desktop apps only.<\/li> <li> In order to be usable, the control needs a minimum width 17.5 rem and height of 12.5 rem.<\/li> <li> Do not instantiate the <code>RichTextEditor<\/code> from a hidden container.<\/li> <li> Make sure you destroy the <code>RichTextEditor<\/code> instance instead of hiding it and create a new one when you show it again.<\/li> <\/ul>\n\n<h3>Usage<\/h3>\n\n<h4>When to use<\/h4> <ul> <li>You want to enable users to enter text and other elements (tables, images) with different styles and colors.<\/li> <li>You need to provide a tool for texts that require additional formatting.<\/li> <\/ul>\n\n<h4> When not to use<\/h4> <ul> <li>You want to let users add simple text that doesn\u2019t require formatting. Use {@link sap.m.TextArea text area} instead.<\/li> <li>Use callbacks to the native third-party API with care, as there may be compatibility issues with later versions.<\/li> <\/ul>","getShowGroupStructure":{"!description":"Gets current value of property {@link #getShowGroupStructure showGroupStructure}.\n\nDetermines whether the toolbar button group containing commands like Bullets and Indentation is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setPlugins":{"!description":"Sets a new value for property {@link #getPlugins plugins}.\n\nAn array of plugin configuration objects with the obligatory property \"name\". Each object has to contain a property \"name\" which then contains the plugin name/ID.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>[]<\/code>.","!static":false,"!category":"function","!type":"fn(sPlugins: [Object]) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"sPlugins":"type: object[], description: New value for property <code>plugins<\/code>"}},"removeCustomButton":{"!description":"Removes a customButton from the aggregation {@link #getCustomButtons customButtons}.","!static":false,"!category":"function","!type":"fn(vCustomButton: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vCustomButton":"type: int|string|sap.ui.core.Control, description: The customButton to remove or its index or id"}},"setShowGroupFont":{"!description":"Sets a new value for property {@link #getShowGroupFont showGroupFont}.\n\nDetermines whether the toolbar button group containing commands like Font, Font Size and Colors is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bShowGroupFont: Boolean) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"bShowGroupFont":"type: boolean, description: New value for property <code>showGroupFont<\/code>"}},"fireReady":{"!description":"Fires event {@link #event:ready ready} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getEditorType":{"!description":"Gets current value of property {@link #getEditorType editorType}.\n\nThe editor implementation to use.\n\nValid values are the ones found under sap.ui.richtexteditor.EditorType and any other editor identifier that may be introduced by other groups (hence this is not an enumeration).\n\n<b>Notes:<\/b> <ul><li>TinyMCE version 3 is no longer supported and cannot be used. If you set the property to TinyMCE, it will load TinyMCE version 4.<\/li> <li>Any attempts to set this property after the first rendering will not have any effect.<\/li><\/ul>\n\nDefault value is <code>TinyMCE4<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"fireBeforeEditorInit":{"!description":"Fires event {@link #event:beforeEditorInit beforeEditorInit} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getWrapping":{"!description":"Gets current value of property {@link #getWrapping wrapping}.\n\nDetermines whether the text in the editor is wrapped. This does not affect the editor's value, only the representation in the control.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"removePlugin":{"!description":"Removes the plugin with the given name/ID from the list of plugins to load","!static":false,"!category":"function","!type":"fn(sPluginName?: String) -> Object","parameters":{"sPluginName":"type: string, description: The name/ID of the plugin to remove"}},"!proto":"sap.ui.core.Control","!category":"class","addPlugin":{"!description":"Allows to add a plugin (that must already be installed on the server) to the RichTextEditor.","!static":false,"!category":"function","!type":"fn(mPlugin?: Object | String) -> Object","parameters":{"mPlugin":"type: object|string, description: The plugin ID/name or an object with property \"name\", containing the ID/name of the plugin"}},"getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nWidth of RichTextEditor control in CSS units.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"setShowGroupLink":{"!description":"Sets a new value for property {@link #getShowGroupLink showGroupLink}.\n\nDetermines whether the toolbar button group containing commands like Create Link and Remove Link is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bShowGroupLink: Boolean) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"bShowGroupLink":"type: boolean, description: New value for property <code>showGroupLink<\/code>"}},"setShowGroupClipboard":{"!description":"Sets a new value for property {@link #getShowGroupClipboard showGroupClipboard}.\n\nDetermines whether the toolbar button group containing commands like Cut, Copy and Paste is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bShowGroupClipboard: Boolean) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"bShowGroupClipboard":"type: boolean, description: New value for property <code>showGroupClipboard<\/code>"}},"getHeight":{"!description":"Gets current value of property {@link #getHeight height}.\n\nHeight of RichTextEditor control in CSS units. <b>Note:<\/b> If the height property results in a value smaller than 200px, the minimum height of 200px will be applied.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"!constructorDescription":"Constructor for a new RichTextEditor.\n\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getValue value} : string (default: )<\/li>\n<li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)<\/li>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getHeight height} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getEditorType editorType} : string (default: TinyMCE4)<\/li>\n<li>{@link #getEditorLocation editorLocation} : string (default: js/tiny_mce4/tinymce.js)<\/li>\n<li>{@link #getEditable editable} : boolean (default: true)<\/li>\n<li>{@link #getShowGroupFontStyle showGroupFontStyle} : boolean (default: true)<\/li>\n<li>{@link #getShowGroupTextAlign showGroupTextAlign} : boolean (default: true)<\/li>\n<li>{@link #getShowGroupStructure showGroupStructure} : boolean (default: true)<\/li>\n<li>{@link #getShowGroupFont showGroupFont} : boolean (default: false)<\/li>\n<li>{@link #getShowGroupClipboard showGroupClipboard} : boolean (default: true)<\/li>\n<li>{@link #getShowGroupInsert showGroupInsert} : boolean (default: false)<\/li>\n<li>{@link #getShowGroupLink showGroupLink} : boolean (default: false)<\/li>\n<li>{@link #getShowGroupUndo showGroupUndo} : boolean (default: false)<\/li>\n<li>{@link #getWrapping wrapping} : boolean (default: true)<\/li>\n<li>{@link #getRequired required} : boolean (default: false)<\/li>\n<li>{@link #getSanitizeValue sanitizeValue} : boolean (default: true)<\/li>\n<li>{@link #getPlugins plugins} : object[] (default: [])<\/li>\n<li>{@link #getUseLegacyTheme useLegacyTheme} : boolean (default: true)<\/li>\n<li>{@link #getButtonGroups buttonGroups} : object[] (default: [])<\/li>\n<li>{@link #getCustomToolbar customToolbar} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getCustomButtons customButtons} : sap.ui.core.Control[]<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:ready ready} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:readyRecurring readyRecurring} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:beforeEditorInit beforeEditorInit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","addButtonGroup":{"!description":"Adds a button group to the editor.","!static":false,"!category":"function","!type":"fn(mGroup?: Object | String) -> Object","parameters":{"mGroup":"type: object|string, description: Name/ID of a single button or object containing the group information"}},"setSanitizeValue":{"!description":"Sets a new value for property {@link #getSanitizeValue sanitizeValue}.\n\nDetermines whether to run the HTML sanitizer once the value (HTML markup) is applied or not. To configure allowed URLs please use the whitelist API via <code>jQuery.sap.addUrlWhitelist<\/code>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bSanitizeValue: Boolean) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"bSanitizeValue":"type: boolean, description: New value for property <code>sanitizeValue<\/code>"}},"getShowGroupLink":{"!description":"Gets current value of property {@link #getShowGroupLink showGroupLink}.\n\nDetermines whether the toolbar button group containing commands like Create Link and Remove Link is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setShowGroupUndo":{"!description":"Sets a new value for property {@link #getShowGroupUndo showGroupUndo}.\n\nDetermines whether the toolbar button group containing commands like Undo and Redo is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bShowGroupUndo: Boolean) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"bShowGroupUndo":"type: boolean, description: New value for property <code>showGroupUndo<\/code>"}},"insertCustomButton":{"!description":"Inserts a customButton into the aggregation {@link #getCustomButtons customButtons}.","!static":false,"!category":"function","!type":"fn(oCustomButton: sap.ui.core.Control, iIndex: Number) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"oCustomButton":"type: sap.ui.core.Control, description: The customButton to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the customButton should be inserted at; for a negative value of <code>iIndex<\/code>, the customButton is inserted at position 0; for a value greater than the current size of the aggregation, the customButton is inserted at the last position"}},"attachBeforeEditorInit":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:beforeEditorInit beforeEditorInit} event of this <code>sap.ui.richtexteditor.RichTextEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.richtexteditor.RichTextEditor<\/code> itself.\n\nThis event is fired right before the TinyMCE instance is created and can be used to change the settings object that will be given to TinyMCE. The parameter \"configuration\" is the javascript oject that will be given to TinyMCE upon first instantiation. The configuration parameter contains a map that can be changed in the case of TinyMCE.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.richtexteditor.RichTextEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getButtonGroups":{"!description":"Gets current value of property {@link #getButtonGroups buttonGroups}.\n\nAn array of button configurations. These configurations contain the names of buttons as array in the property \"buttons\" and the name of the group in \"name\", they can also contain the \"row\" where the buttons should be placed, a \"priority\" and whether the buttons are \"visible\". See method addButtonGroup() for more details on the structure of the objects in this array.\n\nDefault value is <code>[]<\/code>.","!static":false,"!category":"function","!type":"fn() -> [Object]"},"setEditorType":{"!description":"Switches the editor type and sets the default settings for the editor. All plugins and button groups should be set after this has been invoked","!static":false,"!category":"function","!type":"fn(sEditorType?: String) -> Object","parameters":{"sEditorType":"type: string, description: Which editor type to be used (currently only TinyMCE 3 and 4)"}},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nWidth of RichTextEditor control in CSS units.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"}},"setCustomToolbar":{"!description":"Sets a new value for property {@link #getCustomToolbar customToolbar}.\n\nDetermines whether a Fiori Toolbar is used instead of the TinyMCE default toolbar one. It is applied only when the EditorType is TinyMCE4 and sap.m library is loaded. <b>Note:<\/b> The <code>customToolbar<\/code> property will have effect only on initial loading. Changing it during runtime will not affect the initially loaded toolbar.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bCustomToolbar: Boolean) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"bCustomToolbar":"type: boolean, description: New value for property <code>customToolbar<\/code>"}},"getValue":{"!description":"Gets current value of property {@link #getValue value}.\n\nAn HTML string representing the editor content. Because this is HTML, the value cannot be generically escaped to prevent cross-site scripting, so the application is responsible for doing so. Overwriting this property would also reset editor's Undo manager and buttons \"Undo\"/\"Redo\" would be set to their initial state.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"destroyCustomButtons":{"!description":"Destroys all the customButtons in the aggregation {@link #getCustomButtons customButtons}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.richtexteditor.RichTextEditor"},"getShowGroupTextAlign":{"!description":"Gets current value of property {@link #getShowGroupTextAlign showGroupTextAlign}.\n\nDetermines whether the toolbar button group containing text alignment commands is available. Changing this after the initial rendering will result in some visible redrawing.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setEditorLocation":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.25.0 The editorLocation is set implicitly when choosing the editorType.<br>Sets a new value for property {@link #getEditorLocation editorLocation}.\n\nRelative or absolute URL where the editor is available. Must be on the same server. <b>Note:<\/b> Any attempts to set this property after the first rendering will not have any effect.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>js/tiny_mce4/tinymce.js<\/code>.","!static":false,"!category":"function","!type":"fn(sEditorLocation: String) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"sEditorLocation":"type: string, description: New value for property <code>editorLocation<\/code>"}},"setEditable":{"!description":"Sets a new value for property {@link #getEditable editable}.\n\nDetermines whether the editor content can be modified by the user. When set to \"false\" there might not be any editor toolbar.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bEditable: Boolean) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"bEditable":"type: boolean, description: New value for property <code>editable<\/code>"}},"setValue":{"!description":"Sets a new value for property {@link #getValue value}.\n\nAn HTML string representing the editor content. Because this is HTML, the value cannot be generically escaped to prevent cross-site scripting, so the application is responsible for doing so. Overwriting this property would also reset editor's Undo manager and buttons \"Undo\"/\"Redo\" would be set to their initial state.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn(sValue: String) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"sValue":"type: string, description: New value for property <code>value<\/code>"}},"getEditorLocation":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.25.0 The editorLocation is set implicitly when choosing the editorType.<br>Gets current value of property {@link #getEditorLocation editorLocation}.\n\nRelative or absolute URL where the editor is available. Must be on the same server. <b>Note:<\/b> Any attempts to set this property after the first rendering will not have any effect.\n\nDefault value is <code>js/tiny_mce4/tinymce.js<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"setShowGroupStructure":{"!description":"Sets a new value for property {@link #getShowGroupStructure showGroupStructure}.\n\nDetermines whether the toolbar button group containing commands like Bullets and Indentation is available. Changing this after the initial rendering will result in some visible redrawing.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bShowGroupStructure: Boolean) -> sap.ui.richtexteditor.RichTextEditor","parameters":{"bShowGroupStructure":"type: boolean, description: New value for property <code>showGroupStructure<\/code>"}},"getCustomButtons":{"!description":"Gets content of aggregation {@link #getCustomButtons customButtons}.\n\nCustom buttons are meant to extend the <code>RichTextEditor<\/code>'s custom toolbar. Though type is set to sap.ui.Control, only sap.m.Button is allowed. <b>Note:<\/b> customButtons are available only when the customToolbar is enabled and all the requirements are fulfilled.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"getRequired":{"!description":"Gets current value of property {@link #getRequired required}.\n\nDetermines whether a value is required.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getTextDirection":{"!description":"Gets current value of property {@link #getTextDirection textDirection}.\n\nThe text direction\n\nDefault value is <code>Inherit<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.TextDirection"}}}}